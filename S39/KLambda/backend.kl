(defun cl.kl-to-lisp (V5736) (cl.kl-to-lisp-h () V5736))

(defun cl.kl-to-lisp-h (V5744 V5745) (cond ((= T (MEMBER V5745 V5744)) V5745) ((and (cons? V5745) (and (= type (hd V5745)) (and (cons? (tl V5745)) (and (cons? (tl (tl V5745))) (= () (tl (tl (tl V5745)))))))) (cl.kl-to-lisp-h V5744 (hd (tl V5745)))) ((and (cons? V5745) (and (= protect (hd V5745)) (and (cons? (tl V5745)) (= () (tl (tl V5745)))))) (cl.kl-to-lisp-h V5744 (hd (tl V5745)))) ((and (cons? V5745) (and (= lambda (hd V5745)) (and (cons? (tl V5745)) (and (cons? (tl (tl V5745))) (and (= () (tl (tl (tl V5745)))) (= (hd (tl V5745)) T)))))) (cl.kl-to-lisp-h V5744 (cl.rectify-t V5745))) ((and (cons? V5745) (and (= lambda (hd V5745)) (and (cons? (tl V5745)) (and (cons? (tl (tl V5745))) (= () (tl (tl (tl V5745)))))))) (cons FUNCTION (cons (cons LAMBDA (cons (cons (hd (tl V5745)) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V5745)) V5744) (hd (tl (tl V5745)))) ()))) ()))) ((and (cons? V5745) (and (= let (hd V5745)) (and (cons? (tl V5745)) (and (cons? (tl (tl V5745))) (and (cons? (tl (tl (tl V5745)))) (and (= () (tl (tl (tl (tl V5745))))) (= (hd (tl V5745)) T))))))) (cl.kl-to-lisp-h V5744 (cl.rectify-t V5745))) ((and (cons? V5745) (and (= let (hd V5745)) (and (cons? (tl V5745)) (and (cons? (tl (tl V5745))) (and (cons? (tl (tl (tl V5745)))) (= () (tl (tl (tl (tl V5745)))))))))) (cons LET (cons (cons (cons (hd (tl V5745)) (cons (cl.kl-to-lisp-h V5744 (hd (tl (tl V5745)))) ())) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V5745)) V5744) (hd (tl (tl (tl V5745))))) ())))) ((and (cons? V5745) (and (= defun (hd V5745)) (and (cons? (tl V5745)) (and (cons? (tl (tl V5745))) (and (cons? (tl (tl (tl V5745)))) (= () (tl (tl (tl (tl V5745)))))))))) (cons DEFUN (cons (hd (tl V5745)) (cons (hd (tl (tl V5745))) (cons (cl.kl-to-lisp-h (hd (tl (tl V5745))) (hd (tl (tl (tl V5745))))) ()))))) ((and (cons? V5745) (= cond (hd V5745))) (cons COND (CL.MAPCAR (lambda Z5746 (cl.cond-code V5744 Z5746)) (tl V5745)))) ((and (cons? V5745) (or (= T (MEMBER (hd V5745) V5744)) (cons? (hd V5745)))) (let W5747 (CL.MAPCAR (lambda Z5748 (cl.kl-to-lisp-h V5744 Z5748)) V5745) (cl.currylisp W5747))) ((and (cons? V5745) (cl.fastsymbol? (hd V5745))) (let W5749 (CL.MAPCAR (lambda Z5750 (cl.kl-to-lisp-h V5744 Z5750)) (tl V5745)) (let W5751 (cl.maplispsym (hd V5745)) (cl.optimise-application (cons W5751 W5749))))) ((or (number? V5745) (or (string? V5745) (empty? V5745))) V5745) (true (cons QUOTE (cons V5745 ())))))

(defun cl.rectify-t (V5752) (SUBST (GENSYM "x") T V5752))

(defun cl.currylisp (V5753) (cond ((and (cons? V5753) (and (cons? (tl V5753)) (cons? (tl (tl V5753))))) (cl.currylisp (cons (cons FUNCALL (cons (hd V5753) (cons (hd (tl V5753)) ()))) (tl (tl V5753))))) ((and (cons? V5753) (and (cons? (tl V5753)) (= () (tl (tl V5753))))) (cons FUNCALL V5753)) ((and (cons? V5753) (= () (tl V5753))) (cons FUNCALL V5753)) (true V5753)))

(defun cl.optimise-application (V5754) (cond ((and (cons? V5754) (and (= protect (hd V5754)) (and (cons? (tl V5754)) (= () (tl (tl V5754)))))) (cl.optimise-application (hd (tl V5754)))) ((and (cons? V5754) (and (= hd (hd V5754)) (and (cons? (tl V5754)) (= () (tl (tl V5754)))))) (cons CAR (cons (cl.optimise-application (hd (tl V5754))) ()))) ((and (cons? V5754) (and (= tl (hd V5754)) (and (cons? (tl V5754)) (= () (tl (tl V5754)))))) (cons CDR (cons (cl.optimise-application (hd (tl V5754))) ()))) ((and (cons? V5754) (and (= cons (hd V5754)) (and (cons? (tl V5754)) (and (cons? (tl (tl V5754))) (= () (tl (tl (tl V5754)))))))) (cons CONS (cons (cl.optimise-application (hd (tl V5754))) (cons (cl.optimise-application (hd (tl (tl V5754)))) ())))) ((and (cons? V5754) (and (= append (hd V5754)) (and (cons? (tl V5754)) (and (cons? (tl (tl V5754))) (= () (tl (tl (tl V5754)))))))) (cons APPEND (cons (cl.optimise-application (hd (tl V5754))) (cons (cl.optimise-application (hd (tl (tl V5754)))) ())))) ((and (cons? V5754) (and (= reverse (hd V5754)) (and (cons? (tl V5754)) (= () (tl (tl V5754)))))) (cons REVERSE (cons (cl.optimise-application (hd (tl V5754))) ()))) ((and (cons? V5754) (and (= length (hd V5754)) (and (cons? (tl V5754)) (= () (tl (tl V5754)))))) (cons CL.LIST-LENGTH (cons (cl.optimise-application (hd (tl V5754))) ()))) ((and (cons? V5754) (and (= if (hd V5754)) (and (cons? (tl V5754)) (and (cons? (tl (tl V5754))) (and (cons? (tl (tl (tl V5754)))) (= () (tl (tl (tl (tl V5754)))))))))) (cons IF (cons (cl.wrap (hd (tl V5754))) (cons (cl.optimise-application (hd (tl (tl V5754)))) (cons (cl.optimise-application (hd (tl (tl (tl V5754))))) ()))))) ((and (cons? V5754) (and (= value (hd V5754)) (and (cons? (tl V5754)) (and (cons? (hd (tl V5754))) (and (cons? (tl (hd (tl V5754)))) (and (= () (tl (tl (hd (tl V5754))))) (and (= () (tl (tl V5754))) (= (hd (hd (tl V5754))) QUOTE)))))))) (hd (tl (hd (tl V5754))))) ((and (cons? V5754) (and (= map (hd V5754)) (and (cons? (tl V5754)) (and (cons? (tl (tl V5754))) (= () (tl (tl (tl V5754)))))))) (cons CL.MAPCAR (tl V5754))) ((and (cons? V5754) (and (= + (hd V5754)) (and (cons? (tl V5754)) (and (= 1 (hd (tl V5754))) (and (cons? (tl (tl V5754))) (= () (tl (tl (tl V5754))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl (tl V5754)))) ()))) ((and (cons? V5754) (and (= + (hd V5754)) (and (cons? (tl V5754)) (and (cons? (tl (tl V5754))) (and (= 1 (hd (tl (tl V5754)))) (= () (tl (tl (tl V5754))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl V5754))) ()))) ((and (cons? V5754) (and (= - (hd V5754)) (and (cons? (tl V5754)) (and (cons? (tl (tl V5754))) (and (= 1 (hd (tl (tl V5754)))) (= () (tl (tl (tl V5754))))))))) (cons (intern "1-") (cons (cl.optimise-application (hd (tl V5754))) ()))) ((cons? V5754) (CL.MAPCAR (lambda Z5755 (cl.optimise-application Z5755)) V5754)) (true V5754)))

(defun cl.cond-code (V5760 V5761) (cond ((and (cons? V5761) (and (cons? (tl V5761)) (= () (tl (tl V5761))))) (let W5762 (cl.wrap (cl.kl-to-lisp-h V5760 (hd V5761))) (let W5763 (cl.kl-to-lisp-h V5760 (hd (tl V5761))) (cons W5762 (cons W5763 ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun cl.wrap (V5764) (cond ((and (cons? V5764) (and (cons? (tl V5764)) (and (= true (hd (tl V5764))) (and (= () (tl (tl V5764))) (= (hd V5764) QUOTE))))) T) ((and (cons? V5764) (and (= cons? (hd V5764)) (and (cons? (tl V5764)) (= () (tl (tl V5764)))))) (cons CONSP (tl V5764))) ((and (cons? V5764) (and (= string? (hd V5764)) (and (cons? (tl V5764)) (= () (tl (tl V5764)))))) (cons STRINGP (tl V5764))) ((and (cons? V5764) (and (= number? (hd V5764)) (and (cons? (tl V5764)) (= () (tl (tl V5764)))))) (cons NUMBERP (tl V5764))) ((and (cons? V5764) (and (= empty? (hd V5764)) (and (cons? (tl V5764)) (= () (tl (tl V5764)))))) (cons NULL (tl V5764))) ((and (cons? V5764) (and (= and (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (= () (tl (tl (tl V5764)))))))) (cons AND (cons (cl.wrap (hd (tl V5764))) (cons (cl.wrap (hd (tl (tl V5764)))) ())))) ((and (cons? V5764) (and (= or (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (= () (tl (tl (tl V5764)))))))) (cons OR (cons (cl.wrap (hd (tl V5764))) (cons (cl.wrap (hd (tl (tl V5764)))) ())))) ((and (cons? V5764) (and (= not (hd V5764)) (and (cons? (tl V5764)) (= () (tl (tl V5764)))))) (cons NOT (cons (cl.wrap (hd (tl V5764))) ()))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (and (= () (hd (tl (tl V5764)))) (= () (tl (tl (tl V5764))))))))) (cons NULL (cons (hd (tl V5764)) ()))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (= () (hd (tl V5764))) (and (cons? (tl (tl V5764))) (= () (tl (tl (tl V5764))))))))) (cons NULL (tl (tl V5764)))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (and (cons? (hd (tl (tl V5764)))) (and (cons? (tl (hd (tl (tl V5764))))) (and (= () (tl (tl (hd (tl (tl V5764)))))) (and (= () (tl (tl (tl V5764)))) (and (= (hd (hd (tl (tl V5764)))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl (tl V5764))))))))))))))) (cons EQ (tl V5764))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (hd (tl V5764))) (and (cons? (tl (hd (tl V5764)))) (and (= () (tl (tl (hd (tl V5764))))) (and (cons? (tl (tl V5764))) (and (= () (tl (tl (tl V5764)))) (and (= (hd (hd (tl V5764))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl V5764)))))))))))))) (cons EQ (tl V5764))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (hd (tl V5764))) (and (= fail (hd (hd (tl V5764)))) (and (= () (tl (hd (tl V5764)))) (and (cons? (tl (tl V5764))) (= () (tl (tl (tl V5764))))))))))) (cons EQ (tl V5764))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (and (cons? (hd (tl (tl V5764)))) (and (= fail (hd (hd (tl (tl V5764))))) (and (= () (tl (hd (tl (tl V5764))))) (= () (tl (tl (tl V5764))))))))))) (cons EQ (tl V5764))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (and (= () (tl (tl (tl V5764)))) (string? (hd (tl V5764)))))))) (cons EQUAL (tl V5764))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (and (= () (tl (tl (tl V5764)))) (string? (hd (tl (tl V5764))))))))) (cons EQUAL (tl V5764))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (and (= () (tl (tl (tl V5764)))) (number? (hd (tl V5764)))))))) (cons EQUALP (tl V5764))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (and (= () (tl (tl (tl V5764)))) (number? (hd (tl (tl V5764))))))))) (cons EQUALP (tl V5764))) ((and (cons? V5764) (and (= cl.equal? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (= () (tl (tl (tl V5764)))))))) (cons cl.ABSEQUAL (tl V5764))) ((and (cons? V5764) (and (= cl.greater? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (= () (tl (tl (tl V5764)))))))) (cons > (tl V5764))) ((and (cons? V5764) (and (= cl.greater-than-or-equal-to? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (= () (tl (tl (tl V5764)))))))) (cons >= (tl V5764))) ((and (cons? V5764) (and (= cl.less? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (= () (tl (tl (tl V5764)))))))) (cons < (tl V5764))) ((and (cons? V5764) (and (= cl.less-than-or-equal-to? (hd V5764)) (and (cons? (tl V5764)) (and (cons? (tl (tl V5764))) (= () (tl (tl (tl V5764)))))))) (cons <= (tl V5764))) (true (cons cl.wrapper (cons V5764 ())))))

(defun cl.fastsymbol? (V5771) (cond ((cons? V5771) false) ((= () V5771) false) ((string? V5771) false) ((number? V5771) false) (true true)))

(defun cl.wrapper (V5772) (cond ((= true V5772) T) ((= false V5772) ()) (true (simple-error "boolean expected"))))

(defun cl.maplispsym (V5773) (cond ((= = V5773) cl.equal?) ((= > V5773) cl.greater?) ((= < V5773) cl.less?) ((= >= V5773) cl.greater-than-or-equal-to?) ((= <= V5773) cl.less-than-or-equal-to?) ((= + V5773) cl.add) ((= - V5773) cl.subtract) ((= / V5773) cl.divide) ((= * V5773) cl.multiply) (true V5773)))

