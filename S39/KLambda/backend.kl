(defun cl.kl-to-lisp (V5732) (cl.kl-to-lisp-h () V5732))

(defun cl.kl-to-lisp-h (V5740 V5741) (cond ((= T (MEMBER V5741 V5740)) V5741) ((and (cons? V5741) (and (= type (hd V5741)) (and (cons? (tl V5741)) (and (cons? (tl (tl V5741))) (= () (tl (tl (tl V5741)))))))) (cl.kl-to-lisp-h V5740 (hd (tl V5741)))) ((and (cons? V5741) (and (= protect (hd V5741)) (and (cons? (tl V5741)) (= () (tl (tl V5741)))))) (cl.kl-to-lisp-h V5740 (hd (tl V5741)))) ((and (cons? V5741) (and (= lambda (hd V5741)) (and (cons? (tl V5741)) (and (cons? (tl (tl V5741))) (and (= () (tl (tl (tl V5741)))) (= (hd (tl V5741)) T)))))) (cl.kl-to-lisp-h V5740 (cl.rectify-t V5741))) ((and (cons? V5741) (and (= lambda (hd V5741)) (and (cons? (tl V5741)) (and (cons? (tl (tl V5741))) (= () (tl (tl (tl V5741)))))))) (cons FUNCTION (cons (cons LAMBDA (cons (cons (hd (tl V5741)) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V5741)) V5740) (hd (tl (tl V5741)))) ()))) ()))) ((and (cons? V5741) (and (= let (hd V5741)) (and (cons? (tl V5741)) (and (cons? (tl (tl V5741))) (and (cons? (tl (tl (tl V5741)))) (and (= () (tl (tl (tl (tl V5741))))) (= (hd (tl V5741)) T))))))) (cl.kl-to-lisp-h V5740 (cl.rectify-t V5741))) ((and (cons? V5741) (and (= let (hd V5741)) (and (cons? (tl V5741)) (and (cons? (tl (tl V5741))) (and (cons? (tl (tl (tl V5741)))) (= () (tl (tl (tl (tl V5741)))))))))) (cons LET (cons (cons (cons (hd (tl V5741)) (cons (cl.kl-to-lisp-h V5740 (hd (tl (tl V5741)))) ())) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V5741)) V5740) (hd (tl (tl (tl V5741))))) ())))) ((and (cons? V5741) (and (= defun (hd V5741)) (and (cons? (tl V5741)) (and (cons? (tl (tl V5741))) (and (cons? (tl (tl (tl V5741)))) (= () (tl (tl (tl (tl V5741)))))))))) (cons DEFUN (cons (hd (tl V5741)) (cons (hd (tl (tl V5741))) (cons (cl.kl-to-lisp-h (hd (tl (tl V5741))) (hd (tl (tl (tl V5741))))) ()))))) ((and (cons? V5741) (= cond (hd V5741))) (cons COND (CL.MAPCAR (lambda Z5742 (cl.cond-code V5740 Z5742)) (tl V5741)))) ((and (cons? V5741) (or (= T (MEMBER (hd V5741) V5740)) (cons? (hd V5741)))) (let W5743 (CL.MAPCAR (lambda Z5744 (cl.kl-to-lisp-h V5740 Z5744)) V5741) (cl.currylisp W5743))) ((and (cons? V5741) (cl.fastsymbol? (hd V5741))) (let W5745 (CL.MAPCAR (lambda Z5746 (cl.kl-to-lisp-h V5740 Z5746)) (tl V5741)) (let W5747 (cl.maplispsym (hd V5741)) (cl.optimise-application (cons W5747 W5745))))) ((or (number? V5741) (or (string? V5741) (empty? V5741))) V5741) (true (cons QUOTE (cons V5741 ())))))

(defun cl.rectify-t (V5748) (SUBST (GENSYM "x") T V5748))

(defun cl.currylisp (V5749) (cond ((and (cons? V5749) (and (cons? (tl V5749)) (cons? (tl (tl V5749))))) (cl.currylisp (cons (cons FUNCALL (cons (hd V5749) (cons (hd (tl V5749)) ()))) (tl (tl V5749))))) ((and (cons? V5749) (and (cons? (tl V5749)) (= () (tl (tl V5749))))) (cons FUNCALL V5749)) ((and (cons? V5749) (= () (tl V5749))) (cons FUNCALL V5749)) (true V5749)))

(defun cl.optimise-application (V5750) (cond ((and (cons? V5750) (and (= protect (hd V5750)) (and (cons? (tl V5750)) (= () (tl (tl V5750)))))) (cl.optimise-application (hd (tl V5750)))) ((and (cons? V5750) (and (= hd (hd V5750)) (and (cons? (tl V5750)) (= () (tl (tl V5750)))))) (cons CAR (cons (cl.optimise-application (hd (tl V5750))) ()))) ((and (cons? V5750) (and (= tl (hd V5750)) (and (cons? (tl V5750)) (= () (tl (tl V5750)))))) (cons CDR (cons (cl.optimise-application (hd (tl V5750))) ()))) ((and (cons? V5750) (and (= cons (hd V5750)) (and (cons? (tl V5750)) (and (cons? (tl (tl V5750))) (= () (tl (tl (tl V5750)))))))) (cons CONS (cons (cl.optimise-application (hd (tl V5750))) (cons (cl.optimise-application (hd (tl (tl V5750)))) ())))) ((and (cons? V5750) (and (= append (hd V5750)) (and (cons? (tl V5750)) (and (cons? (tl (tl V5750))) (= () (tl (tl (tl V5750)))))))) (cons APPEND (cons (cl.optimise-application (hd (tl V5750))) (cons (cl.optimise-application (hd (tl (tl V5750)))) ())))) ((and (cons? V5750) (and (= reverse (hd V5750)) (and (cons? (tl V5750)) (= () (tl (tl V5750)))))) (cons REVERSE (cons (cl.optimise-application (hd (tl V5750))) ()))) ((and (cons? V5750) (and (= length (hd V5750)) (and (cons? (tl V5750)) (= () (tl (tl V5750)))))) (cons CL.LIST-LENGTH (cons (cl.optimise-application (hd (tl V5750))) ()))) ((and (cons? V5750) (and (= if (hd V5750)) (and (cons? (tl V5750)) (and (cons? (tl (tl V5750))) (and (cons? (tl (tl (tl V5750)))) (= () (tl (tl (tl (tl V5750)))))))))) (cons IF (cons (cl.wrap (hd (tl V5750))) (cons (cl.optimise-application (hd (tl (tl V5750)))) (cons (cl.optimise-application (hd (tl (tl (tl V5750))))) ()))))) ((and (cons? V5750) (and (= value (hd V5750)) (and (cons? (tl V5750)) (and (cons? (hd (tl V5750))) (and (cons? (tl (hd (tl V5750)))) (and (= () (tl (tl (hd (tl V5750))))) (and (= () (tl (tl V5750))) (= (hd (hd (tl V5750))) QUOTE)))))))) (hd (tl (hd (tl V5750))))) ((and (cons? V5750) (and (= map (hd V5750)) (and (cons? (tl V5750)) (and (cons? (tl (tl V5750))) (= () (tl (tl (tl V5750)))))))) (cons CL.MAPCAR (tl V5750))) ((and (cons? V5750) (and (= + (hd V5750)) (and (cons? (tl V5750)) (and (= 1 (hd (tl V5750))) (and (cons? (tl (tl V5750))) (= () (tl (tl (tl V5750))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl (tl V5750)))) ()))) ((and (cons? V5750) (and (= + (hd V5750)) (and (cons? (tl V5750)) (and (cons? (tl (tl V5750))) (and (= 1 (hd (tl (tl V5750)))) (= () (tl (tl (tl V5750))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl V5750))) ()))) ((and (cons? V5750) (and (= - (hd V5750)) (and (cons? (tl V5750)) (and (cons? (tl (tl V5750))) (and (= 1 (hd (tl (tl V5750)))) (= () (tl (tl (tl V5750))))))))) (cons (intern "1-") (cons (cl.optimise-application (hd (tl V5750))) ()))) ((cons? V5750) (CL.MAPCAR (lambda Z5751 (cl.optimise-application Z5751)) V5750)) (true V5750)))

(defun cl.cond-code (V5756 V5757) (cond ((and (cons? V5757) (and (cons? (tl V5757)) (= () (tl (tl V5757))))) (let W5758 (cl.wrap (cl.kl-to-lisp-h V5756 (hd V5757))) (let W5759 (cl.kl-to-lisp-h V5756 (hd (tl V5757))) (cons W5758 (cons W5759 ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun cl.wrap (V5760) (cond ((and (cons? V5760) (and (cons? (tl V5760)) (and (= true (hd (tl V5760))) (and (= () (tl (tl V5760))) (= (hd V5760) QUOTE))))) T) ((and (cons? V5760) (and (= cons? (hd V5760)) (and (cons? (tl V5760)) (= () (tl (tl V5760)))))) (cons CONSP (tl V5760))) ((and (cons? V5760) (and (= string? (hd V5760)) (and (cons? (tl V5760)) (= () (tl (tl V5760)))))) (cons STRINGP (tl V5760))) ((and (cons? V5760) (and (= number? (hd V5760)) (and (cons? (tl V5760)) (= () (tl (tl V5760)))))) (cons NUMBERP (tl V5760))) ((and (cons? V5760) (and (= empty? (hd V5760)) (and (cons? (tl V5760)) (= () (tl (tl V5760)))))) (cons NULL (tl V5760))) ((and (cons? V5760) (and (= and (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (= () (tl (tl (tl V5760)))))))) (cons AND (cons (cl.wrap (hd (tl V5760))) (cons (cl.wrap (hd (tl (tl V5760)))) ())))) ((and (cons? V5760) (and (= or (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (= () (tl (tl (tl V5760)))))))) (cons OR (cons (cl.wrap (hd (tl V5760))) (cons (cl.wrap (hd (tl (tl V5760)))) ())))) ((and (cons? V5760) (and (= not (hd V5760)) (and (cons? (tl V5760)) (= () (tl (tl V5760)))))) (cons NOT (cons (cl.wrap (hd (tl V5760))) ()))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (and (= () (hd (tl (tl V5760)))) (= () (tl (tl (tl V5760))))))))) (cons NULL (cons (hd (tl V5760)) ()))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (= () (hd (tl V5760))) (and (cons? (tl (tl V5760))) (= () (tl (tl (tl V5760))))))))) (cons NULL (tl (tl V5760)))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (and (cons? (hd (tl (tl V5760)))) (and (cons? (tl (hd (tl (tl V5760))))) (and (= () (tl (tl (hd (tl (tl V5760)))))) (and (= () (tl (tl (tl V5760)))) (and (= (hd (hd (tl (tl V5760)))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl (tl V5760))))))))))))))) (cons EQ (tl V5760))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (hd (tl V5760))) (and (cons? (tl (hd (tl V5760)))) (and (= () (tl (tl (hd (tl V5760))))) (and (cons? (tl (tl V5760))) (and (= () (tl (tl (tl V5760)))) (and (= (hd (hd (tl V5760))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl V5760)))))))))))))) (cons EQ (tl V5760))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (hd (tl V5760))) (and (= fail (hd (hd (tl V5760)))) (and (= () (tl (hd (tl V5760)))) (and (cons? (tl (tl V5760))) (= () (tl (tl (tl V5760))))))))))) (cons EQ (tl V5760))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (and (cons? (hd (tl (tl V5760)))) (and (= fail (hd (hd (tl (tl V5760))))) (and (= () (tl (hd (tl (tl V5760))))) (= () (tl (tl (tl V5760))))))))))) (cons EQ (tl V5760))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (and (= () (tl (tl (tl V5760)))) (string? (hd (tl V5760)))))))) (cons EQUAL (tl V5760))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (and (= () (tl (tl (tl V5760)))) (string? (hd (tl (tl V5760))))))))) (cons EQUAL (tl V5760))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (and (= () (tl (tl (tl V5760)))) (number? (hd (tl V5760)))))))) (cons EQUALP (tl V5760))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (and (= () (tl (tl (tl V5760)))) (number? (hd (tl (tl V5760))))))))) (cons EQUALP (tl V5760))) ((and (cons? V5760) (and (= cl.equal? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (= () (tl (tl (tl V5760)))))))) (cons cl.ABSEQUAL (tl V5760))) ((and (cons? V5760) (and (= cl.greater? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (= () (tl (tl (tl V5760)))))))) (cons > (tl V5760))) ((and (cons? V5760) (and (= cl.greater-than-or-equal-to? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (= () (tl (tl (tl V5760)))))))) (cons >= (tl V5760))) ((and (cons? V5760) (and (= cl.less? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (= () (tl (tl (tl V5760)))))))) (cons < (tl V5760))) ((and (cons? V5760) (and (= cl.less-than-or-equal-to? (hd V5760)) (and (cons? (tl V5760)) (and (cons? (tl (tl V5760))) (= () (tl (tl (tl V5760)))))))) (cons <= (tl V5760))) (true (cons cl.wrapper (cons V5760 ())))))

(defun cl.fastsymbol? (V5767) (cond ((cons? V5767) false) ((= () V5767) false) ((string? V5767) false) ((number? V5767) false) (true true)))

(defun cl.wrapper (V5768) (cond ((= true V5768) T) ((= false V5768) ()) (true (simple-error "boolean expected"))))

(defun cl.maplispsym (V5769) (cond ((= = V5769) cl.equal?) ((= > V5769) cl.greater?) ((= < V5769) cl.less?) ((= >= V5769) cl.greater-than-or-equal-to?) ((= <= V5769) cl.less-than-or-equal-to?) ((= + V5769) cl.add) ((= - V5769) cl.subtract) ((= / V5769) cl.divide) ((= * V5769) cl.multiply) (true V5769)))

