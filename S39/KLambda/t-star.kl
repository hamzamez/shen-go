(defun shen.typecheck (V4484 V4485) (let W4486 (shen.extract-vars V4485) (let W4487 (shen.rectify-type V4485) (let W4488 (shen.curry V4484) (((((lambda Z4489 (lambda Z4490 (lambda Z4491 (lambda Z4492 (let W4493 (shen.newpv Z4489) (shen.gc Z4489 (do (shen.incinfs) (shen.insert-prolog-variables (receive (shen.deref W4486 Z4489)) (receive (shen.deref W4487 Z4489)) W4493 Z4489 Z4490 Z4491 (freeze (shen.toplevel-forms (receive (shen.deref W4488 Z4489)) W4493 Z4489 Z4490 Z4491 (freeze (return W4493 Z4489 Z4490 Z4491 Z4492)))))))))))) (shen.prolog-vector)) (@v true (@v 0 (vector 0)))) 0) (freeze true))))))

(defun shen.insert-prolog-variables (V4494 V4495 V4496 V4497 V4498 V4499 V4500) (let W4501 (if (shen.unlocked? V4498) (let W4502 (shen.lazyderef V4494 V4497) (if (= W4502 ()) (do (shen.incinfs) (is! V4495 V4496 V4497 V4498 V4499 V4500)) false)) false) (if (= W4501 false) (if (shen.unlocked? V4498) (let W4503 (shen.lazyderef V4494 V4497) (if (cons? W4503) (let W4504 (hd W4503) (let W4505 (tl W4503) (let W4506 (shen.newpv V4497) (shen.gc V4497 (do (shen.incinfs) (shen.insert-prolog-variables W4505 (subst (shen.deref W4506 V4497) W4504 V4495) V4496 V4497 V4498 V4499 V4500)))))) false)) false) W4501)))

(defun shen.toplevel-forms (V4507 V4508 V4509 V4510 V4511 V4512) (let W4513 (+ V4511 1) (let W4514 (if (shen.unlocked? V4510) (let W4515 (shen.lazyderef V4507 V4509) (if (cons? W4515) (let W4516 (shen.lazyderef (hd W4515) V4509) (if (= W4516 define) (let W4517 (shen.lazyderef (tl W4515) V4509) (if (cons? W4517) (let W4518 (hd W4517) (let W4519 (tl W4517) (do (shen.incinfs) (when (shen.type-theory-enabled?) V4509 V4510 W4513 (freeze (shen.cut V4509 V4510 W4513 (freeze (shen.signal-def (value shen.*spy*) W4518 V4509 V4510 W4513 (freeze (shen.t* (cons define (cons W4518 W4519)) V4508 V4509 V4510 W4513 V4512)))))))))) false)) false)) false)) false) (if (= W4514 false) (let W4520 (if (shen.unlocked? V4510) (do (shen.incinfs) (shen.system-S (cons V4507 (cons (intern ":") (cons V4508 ()))) () V4509 V4510 W4513 V4512)) false) (if (= W4520 false) (shen.unlock V4510 W4513) W4520)) W4514))))

(defun shen.signal-def (V4521 V4522 V4523 V4524 V4525 V4526) (let W4527 (if (shen.unlocked? V4524) (let W4528 (shen.lazyderef V4521 V4523) (if (= W4528 false) (do (shen.incinfs) (thaw V4526)) false)) false) (if (= W4527 false) (if (shen.unlocked? V4524) (let W4529 (shen.lazyderef V4521 V4523) (if (= W4529 true) (let W4530 (shen.newpv V4523) (shen.gc V4523 (do (shen.incinfs) (is W4530 (pr (cn "
typechecking (fn " (shen.app (shen.deref V4522 V4523) ")
" shen.a)) (stoutput)) V4523 V4524 V4525 V4526)))) false)) false) W4527)))

(defun shen.rectify-type (V4531) (shen.demodulate (shen.curry-type V4531)))

(defun shen.demodulate (V4532) (trap-error (let W4533 (shen.walk (lambda Z4534 (shen.demod Z4534)) V4532) (if (= W4533 V4532) V4532 (shen.demodulate W4533))) (lambda Z4535 V4532)))

(defun shen.curry-type (V4536) (cond ((and (cons? V4536) (and (cons? (tl V4536)) (and (= --> (hd (tl V4536))) (and (cons? (tl (tl V4536))) (and (cons? (tl (tl (tl V4536)))) (= --> (hd (tl (tl (tl V4536)))))))))) (shen.curry-type (cons (hd V4536) (cons --> (cons (tl (tl V4536)) ()))))) ((and (cons? V4536) (and (cons? (hd V4536)) (and (= list (hd (hd V4536))) (and (cons? (tl (hd V4536))) (and (= () (tl (tl (hd V4536)))) (and (cons? (tl V4536)) (and (= ==> (hd (tl V4536))) (and (cons? (tl (tl V4536))) (= () (tl (tl (tl V4536)))))))))))) (shen.curry-type (cons (hd V4536) (cons --> (cons (cons str (cons (hd V4536) (tl (tl V4536)))) ()))))) ((and (cons? V4536) (and (cons? (tl V4536)) (and (= * (hd (tl V4536))) (and (cons? (tl (tl V4536))) (and (cons? (tl (tl (tl V4536)))) (= * (hd (tl (tl (tl V4536)))))))))) (shen.curry-type (cons (hd V4536) (cons * (cons (tl (tl V4536)) ()))))) ((cons? V4536) (map (lambda Z4537 (shen.curry-type Z4537)) V4536)) (true V4536)))

(defun shen.curry (V4538) (cond ((and (cons? V4538) (and (= define (hd V4538)) (cons? (tl V4538)))) V4538) ((and (cons? V4538) (and (= type (hd V4538)) (and (cons? (tl V4538)) (and (cons? (tl (tl V4538))) (= () (tl (tl (tl V4538)))))))) (cons type (cons (shen.curry (hd (tl V4538))) (tl (tl V4538))))) ((and (cons? V4538) (and (= input+ (hd V4538)) (and (cons? (tl V4538)) (and (cons? (tl (tl V4538))) (= () (tl (tl (tl V4538)))))))) (cons input+ (cons (hd (tl V4538)) (cons (shen.curry (hd (tl (tl V4538)))) ())))) ((and (cons? V4538) (shen.special? (hd V4538))) (cons (hd V4538) (map (lambda Z4539 (shen.curry Z4539)) (tl V4538)))) ((and (cons? V4538) (shen.extraspecial? (hd V4538))) V4538) ((and (cons? V4538) (and (cons? (tl V4538)) (cons? (tl (tl V4538))))) (shen.curry (cons (cons (hd V4538) (cons (hd (tl V4538)) ())) (tl (tl V4538))))) ((and (cons? V4538) (and (cons? (tl V4538)) (= () (tl (tl V4538))))) (cons (shen.curry (hd V4538)) (cons (shen.curry (hd (tl V4538))) ()))) (true V4538)))

(defun shen.special? (V4540) (element? V4540 (value shen.*special*)))

(defun shen.extraspecial? (V4541) (element? V4541 (value shen.*extraspecial*)))

(defun shen.system-S (V4542 V4543 V4544 V4545 V4546 V4547) (let W4548 (+ V4546 1) (let W4549 (if (shen.unlocked? V4545) (do (shen.incinfs) (when (shen.maxinfexceeded?) V4544 V4545 W4548 V4547)) false) (if (= W4549 false) (let W4550 (if (shen.unlocked? V4545) (let W4551 (shen.lazyderef V4542 V4544) (if (cons? W4551) (let W4552 (hd W4551) (let W4553 (shen.lazyderef (tl W4551) V4544) (if (cons? W4553) (let W4554 (hd W4553) (let W4555 (shen.lazyderef (tl W4553) V4544) (if (cons? W4555) (let W4556 (hd W4555) (let W4557 (shen.lazyderef (tl W4555) V4544) (if (= W4557 ()) (do (shen.incinfs) (when (= (shen.deref W4554 V4544) (intern ":")) V4544 V4545 W4548 (freeze (when (shen.type-theory-enabled?) V4544 V4545 W4548 (freeze (shen.cut V4544 V4545 W4548 (freeze (shen.system-S-h W4552 W4556 V4543 V4544 V4545 W4548 V4547)))))))) false))) false))) false))) false)) false) (if (= W4550 false) (let W4558 (if (shen.unlocked? V4545) (do (shen.incinfs) (when (value shen.*spy*) V4544 V4545 W4548 (freeze (shen.show V4542 V4543 V4544 V4545 W4548 V4547)))) false) (if (= W4558 false) (let W4559 (if (shen.unlocked? V4545) (do (shen.incinfs) (shen.search-user-datatypes V4542 V4543 (value shen.*datatypes*) V4544 V4545 W4548 V4547)) false) (if (= W4559 false) (shen.unlock V4545 W4548) W4559)) W4558)) W4550)) W4549))))

(defun shen.show (V4566 V4567 V4568 V4569 V4570 V4571) (do (shen.line) (do (shen.show-p (shen.deref V4566 V4568)) (do (nl 2) (do (shen.show-assumptions (shen.deref V4567 V4568) 1) (do (shen.pause-for-user) false))))))

(defun shen.line () (let W4572 (inferences) (pr (cn "____________________________________________________________ " (shen.app W4572 (cn " inference" (shen.app (if (= 1 W4572) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))

(defun shen.show-p (V4573) (cond ((and (cons? V4573) (and (cons? (tl V4573)) (and (cons? (tl (tl V4573))) (and (= () (tl (tl (tl V4573)))) (= (hd (tl V4573)) (intern ":")))))) (do (shen.prterm (hd V4573)) (do (pr " : " (stoutput)) (pr (shen.app (hd (tl (tl V4573))) "" shen.r) (stoutput))))) (true (shen.prterm V4573))))

(defun shen.prterm (V4574) (cond ((and (cons? V4574) (and (= cons (hd V4574)) (and (cons? (tl V4574)) (and (cons? (tl (tl V4574))) (= () (tl (tl (tl V4574)))))))) (do (pr "[" (stoutput)) (do (shen.prterm (hd (tl V4574))) (do (shen.prtl (hd (tl (tl V4574)))) (pr "]" (stoutput)))))) ((cons? V4574) (do (pr "(" (stoutput)) (do (shen.prterm (hd V4574)) (do (map (lambda Z4575 (do (pr " " (stoutput)) (shen.prterm Z4575))) (tl V4574)) (pr ")" (stoutput)))))) (true (print V4574))))

(defun shen.prtl (V4576) (cond ((= () V4576) "") ((and (cons? V4576) (and (= cons (hd V4576)) (and (cons? (tl V4576)) (and (cons? (tl (tl V4576))) (= () (tl (tl (tl V4576)))))))) (do (pr " " (stoutput)) (do (shen.prterm (hd (tl V4576))) (shen.prtl (hd (tl (tl V4576))))))) (true (do (pr " | " (stoutput)) (shen.prterm V4576)))))

(defun shen.show-assumptions (V4583 V4584) (cond ((= () V4583) (pr "
> " (stoutput))) ((cons? V4583) (do (pr (shen.app V4584 ". " shen.a) (stoutput)) (do (shen.show-p (hd V4583)) (do (nl 1) (shen.show-assumptions (tl V4583) (+ V4584 1)))))) (true (simple-error "implementation error in shen.show-assumptions"))))

(defun shen.pause-for-user () (let W4585 (read-byte (stinput)) (if (= W4585 94) (simple-error "input aborted
") (nl 1))))

(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))

(defun shen.maxinfexceeded? () (if (> (inferences) (value shen.*maxinferences*)) (simple-error "maximum inferences exceeded") false))

(defun shen.system-S-h (V4586 V4587 V4588 V4589 V4590 V4591 V4592) (let W4593 (+ V4591 1) (let W4594 (if (shen.unlocked? V4590) (do (shen.incinfs) (when (value shen.*spy*) V4589 V4590 W4593 (freeze (shen.show (cons V4586 (cons (intern ":") (cons V4587 ()))) V4588 V4589 V4590 W4593 V4592)))) false) (if (= W4594 false) (let W4595 (if (shen.unlocked? V4590) (do (shen.incinfs) (when (not (cons? (shen.lazyderef V4586 V4589))) V4589 V4590 W4593 (freeze (shen.primitive V4586 V4587 V4589 V4590 W4593 V4592)))) false) (if (= W4595 false) (let W4596 (if (shen.unlocked? V4590) (do (shen.incinfs) (shen.by-hypothesis V4586 V4587 V4588 V4589 V4590 W4593 V4592)) false) (if (= W4596 false) (let W4597 (if (shen.unlocked? V4590) (let W4598 (shen.lazyderef V4586 V4589) (if (cons? W4598) (let W4599 (hd W4598) (let W4600 (shen.lazyderef (tl W4598) V4589) (if (= W4600 ()) (do (shen.incinfs) (shen.lookupsig W4599 (cons --> (cons V4587 ())) V4589 V4590 W4593 V4592)) false))) false)) false) (if (= W4597 false) (let W4601 (if (shen.unlocked? V4590) (let W4602 (shen.lazyderef V4586 V4589) (if (cons? W4602) (let W4603 (shen.lazyderef (hd W4602) V4589) (if (= W4603 fn) (let W4604 (shen.lazyderef (tl W4602) V4589) (if (cons? W4604) (let W4605 (hd W4604) (let W4606 (shen.lazyderef (tl W4604) V4589) (if (= W4606 ()) (do (shen.incinfs) (when (= (arity (shen.deref W4605 V4589)) 0) V4589 V4590 W4593 (freeze (shen.cut V4589 V4590 W4593 (freeze (shen.system-S-h (cons W4605 ()) V4587 V4588 V4589 V4590 W4593 V4592)))))) false))) false)) false)) false)) false) (if (= W4601 false) (let W4607 (if (shen.unlocked? V4590) (let W4608 (shen.lazyderef V4586 V4589) (if (cons? W4608) (let W4609 (shen.lazyderef (hd W4608) V4589) (if (= W4609 fn) (let W4610 (shen.lazyderef (tl W4608) V4589) (if (cons? W4610) (let W4611 (hd W4610) (let W4612 (shen.lazyderef (tl W4610) V4589) (if (= W4612 ()) (do (shen.incinfs) (shen.lookupsig W4611 V4587 V4589 V4590 W4593 V4592)) false))) false)) false)) false)) false) (if (= W4607 false) (let W4613 (if (shen.unlocked? V4590) (let W4614 (shen.lazyderef V4586 V4589) (if (cons? W4614) (let W4615 (hd W4614) (let W4616 (shen.lazyderef (tl W4614) V4589) (if (cons? W4616) (let W4617 (hd W4616) (let W4618 (shen.lazyderef (tl W4616) V4589) (if (= W4618 ()) (let W4619 (shen.newpv V4589) (shen.gc V4589 (do (shen.incinfs) (when (not (cons? (shen.lazyderef W4615 V4589))) V4589 V4590 W4593 (freeze (shen.lookupsig W4615 (cons W4619 (cons --> (cons V4587 ()))) V4589 V4590 W4593 (freeze (shen.system-S-h W4617 W4619 V4588 V4589 V4590 W4593 V4592)))))))) false))) false))) false)) false) (if (= W4613 false) (let W4620 (if (shen.unlocked? V4590) (let W4621 (shen.lazyderef V4586 V4589) (if (cons? W4621) (let W4622 (hd W4621) (let W4623 (shen.lazyderef (tl W4621) V4589) (if (cons? W4623) (let W4624 (hd W4623) (let W4625 (shen.lazyderef (tl W4623) V4589) (if (= W4625 ()) (let W4626 (shen.newpv V4589) (shen.gc V4589 (do (shen.incinfs) (shen.system-S-h W4622 (cons W4626 (cons --> (cons V4587 ()))) V4588 V4589 V4590 W4593 (freeze (shen.system-S-h W4624 W4626 V4588 V4589 V4590 W4593 V4592)))))) false))) false))) false)) false) (if (= W4620 false) (let W4627 (if (shen.unlocked? V4590) (let W4628 (shen.lazyderef V4586 V4589) (if (cons? W4628) (let W4629 (shen.lazyderef (hd W4628) V4589) (if (= W4629 cons) (let W4630 (shen.lazyderef (tl W4628) V4589) (if (cons? W4630) (let W4631 (hd W4630) (let W4632 (shen.lazyderef (tl W4630) V4589) (if (cons? W4632) (let W4633 (hd W4632) (let W4634 (shen.lazyderef (tl W4632) V4589) (if (= W4634 ()) (let W4635 (shen.lazyderef V4587 V4589) (let W4636 (lambda Z4637 (do (shen.incinfs) (shen.system-S-h W4631 Z4637 V4588 V4589 V4590 W4593 (freeze (shen.system-S-h W4633 (cons list (cons Z4637 ())) V4588 V4589 V4590 W4593 V4592))))) (if (cons? W4635) (let W4638 (shen.lazyderef (hd W4635) V4589) (let W4639 (freeze (let W4640 (shen.lazyderef (tl W4635) V4589) (let W4641 (lambda Z4642 (W4636 Z4642)) (if (cons? W4640) (let W4643 (hd W4640) (let W4644 (shen.lazyderef (tl W4640) V4589) (let W4645 (freeze (W4641 W4643)) (if (= W4644 ()) (thaw W4645) (if (shen.pvar? W4644) (shen.bind! W4644 () V4589 W4645) false))))) (if (shen.pvar? W4640) (let W4646 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4640 (cons W4646 ()) V4589 (freeze (W4641 W4646))))) false))))) (if (= W4638 list) (thaw W4639) (if (shen.pvar? W4638) (shen.bind! W4638 list V4589 W4639) false)))) (if (shen.pvar? W4635) (let W4647 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4635 (cons list (cons W4647 ())) V4589 (freeze (W4636 W4647))))) false)))) false))) false))) false)) false)) false)) false) (if (= W4627 false) (let W4648 (if (shen.unlocked? V4590) (let W4649 (shen.lazyderef V4586 V4589) (if (cons? W4649) (let W4650 (shen.lazyderef (hd W4649) V4589) (if (= W4650 @p) (let W4651 (shen.lazyderef (tl W4649) V4589) (if (cons? W4651) (let W4652 (hd W4651) (let W4653 (shen.lazyderef (tl W4651) V4589) (if (cons? W4653) (let W4654 (hd W4653) (let W4655 (shen.lazyderef (tl W4653) V4589) (if (= W4655 ()) (let W4656 (shen.lazyderef V4587 V4589) (let W4657 (lambda Z4658 (lambda Z4659 (do (shen.incinfs) (shen.system-S-h W4652 Z4658 V4588 V4589 V4590 W4593 (freeze (shen.system-S-h W4654 Z4659 V4588 V4589 V4590 W4593 V4592)))))) (if (cons? W4656) (let W4660 (hd W4656) (let W4661 (shen.lazyderef (tl W4656) V4589) (let W4662 (lambda Z4663 ((W4657 W4660) Z4663)) (if (cons? W4661) (let W4664 (shen.lazyderef (hd W4661) V4589) (let W4665 (freeze (let W4666 (shen.lazyderef (tl W4661) V4589) (let W4667 (lambda Z4668 (W4662 Z4668)) (if (cons? W4666) (let W4669 (hd W4666) (let W4670 (shen.lazyderef (tl W4666) V4589) (let W4671 (freeze (W4667 W4669)) (if (= W4670 ()) (thaw W4671) (if (shen.pvar? W4670) (shen.bind! W4670 () V4589 W4671) false))))) (if (shen.pvar? W4666) (let W4672 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4666 (cons W4672 ()) V4589 (freeze (W4667 W4672))))) false))))) (if (= W4664 *) (thaw W4665) (if (shen.pvar? W4664) (shen.bind! W4664 * V4589 W4665) false)))) (if (shen.pvar? W4661) (let W4673 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4661 (cons * (cons W4673 ())) V4589 (freeze (W4662 W4673))))) false))))) (if (shen.pvar? W4656) (let W4674 (shen.newpv V4589) (shen.gc V4589 (let W4675 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4656 (cons W4674 (cons * (cons W4675 ()))) V4589 (freeze ((W4657 W4674) W4675))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W4648 false) (let W4676 (if (shen.unlocked? V4590) (let W4677 (shen.lazyderef V4586 V4589) (if (cons? W4677) (let W4678 (shen.lazyderef (hd W4677) V4589) (if (= W4678 @v) (let W4679 (shen.lazyderef (tl W4677) V4589) (if (cons? W4679) (let W4680 (hd W4679) (let W4681 (shen.lazyderef (tl W4679) V4589) (if (cons? W4681) (let W4682 (hd W4681) (let W4683 (shen.lazyderef (tl W4681) V4589) (if (= W4683 ()) (let W4684 (shen.lazyderef V4587 V4589) (let W4685 (lambda Z4686 (do (shen.incinfs) (shen.system-S-h W4680 Z4686 V4588 V4589 V4590 W4593 (freeze (shen.system-S-h W4682 (cons vector (cons Z4686 ())) V4588 V4589 V4590 W4593 V4592))))) (if (cons? W4684) (let W4687 (shen.lazyderef (hd W4684) V4589) (let W4688 (freeze (let W4689 (shen.lazyderef (tl W4684) V4589) (let W4690 (lambda Z4691 (W4685 Z4691)) (if (cons? W4689) (let W4692 (hd W4689) (let W4693 (shen.lazyderef (tl W4689) V4589) (let W4694 (freeze (W4690 W4692)) (if (= W4693 ()) (thaw W4694) (if (shen.pvar? W4693) (shen.bind! W4693 () V4589 W4694) false))))) (if (shen.pvar? W4689) (let W4695 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4689 (cons W4695 ()) V4589 (freeze (W4690 W4695))))) false))))) (if (= W4687 vector) (thaw W4688) (if (shen.pvar? W4687) (shen.bind! W4687 vector V4589 W4688) false)))) (if (shen.pvar? W4684) (let W4696 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4684 (cons vector (cons W4696 ())) V4589 (freeze (W4685 W4696))))) false)))) false))) false))) false)) false)) false)) false) (if (= W4676 false) (let W4697 (if (shen.unlocked? V4590) (let W4698 (shen.lazyderef V4586 V4589) (if (cons? W4698) (let W4699 (shen.lazyderef (hd W4698) V4589) (if (= W4699 @s) (let W4700 (shen.lazyderef (tl W4698) V4589) (if (cons? W4700) (let W4701 (hd W4700) (let W4702 (shen.lazyderef (tl W4700) V4589) (if (cons? W4702) (let W4703 (hd W4702) (let W4704 (shen.lazyderef (tl W4702) V4589) (if (= W4704 ()) (let W4705 (shen.lazyderef V4587 V4589) (let W4706 (freeze (do (shen.incinfs) (shen.system-S-h W4701 string V4588 V4589 V4590 W4593 (freeze (shen.system-S-h W4703 string V4588 V4589 V4590 W4593 V4592))))) (if (= W4705 string) (thaw W4706) (if (shen.pvar? W4705) (shen.bind! W4705 string V4589 W4706) false)))) false))) false))) false)) false)) false)) false) (if (= W4697 false) (let W4707 (if (shen.unlocked? V4590) (let W4708 (shen.lazyderef V4586 V4589) (if (cons? W4708) (let W4709 (shen.lazyderef (hd W4708) V4589) (if (= W4709 lambda) (let W4710 (shen.lazyderef (tl W4708) V4589) (if (cons? W4710) (let W4711 (hd W4710) (let W4712 (shen.lazyderef (tl W4710) V4589) (if (cons? W4712) (let W4713 (hd W4712) (let W4714 (shen.lazyderef (tl W4712) V4589) (if (= W4714 ()) (let W4715 (shen.lazyderef V4587 V4589) (let W4716 (lambda Z4717 (lambda Z4718 (let W4719 (shen.newpv V4589) (shen.gc V4589 (let W4720 (shen.newpv V4589) (shen.gc V4589 (do (shen.incinfs) (bind W4720 (shen.freshterm (shen.lazyderef W4711 V4589)) V4589 V4590 W4593 (freeze (bind W4719 (shen.beta (shen.lazyderef W4711 V4589) (shen.deref W4720 V4589) (shen.deref W4713 V4589)) V4589 V4590 W4593 (freeze (shen.system-S-h W4719 Z4718 (cons (cons W4720 (cons (intern ":") (cons Z4717 ()))) V4588) V4589 V4590 W4593 V4592)))))))))))) (if (cons? W4715) (let W4721 (hd W4715) (let W4722 (shen.lazyderef (tl W4715) V4589) (let W4723 (lambda Z4724 ((W4716 W4721) Z4724)) (if (cons? W4722) (let W4725 (shen.lazyderef (hd W4722) V4589) (let W4726 (freeze (let W4727 (shen.lazyderef (tl W4722) V4589) (let W4728 (lambda Z4729 (W4723 Z4729)) (if (cons? W4727) (let W4730 (hd W4727) (let W4731 (shen.lazyderef (tl W4727) V4589) (let W4732 (freeze (W4728 W4730)) (if (= W4731 ()) (thaw W4732) (if (shen.pvar? W4731) (shen.bind! W4731 () V4589 W4732) false))))) (if (shen.pvar? W4727) (let W4733 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4727 (cons W4733 ()) V4589 (freeze (W4728 W4733))))) false))))) (if (= W4725 -->) (thaw W4726) (if (shen.pvar? W4725) (shen.bind! W4725 --> V4589 W4726) false)))) (if (shen.pvar? W4722) (let W4734 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4722 (cons --> (cons W4734 ())) V4589 (freeze (W4723 W4734))))) false))))) (if (shen.pvar? W4715) (let W4735 (shen.newpv V4589) (shen.gc V4589 (let W4736 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4715 (cons W4735 (cons --> (cons W4736 ()))) V4589 (freeze ((W4716 W4735) W4736))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W4707 false) (let W4737 (if (shen.unlocked? V4590) (let W4738 (shen.lazyderef V4586 V4589) (if (cons? W4738) (let W4739 (shen.lazyderef (hd W4738) V4589) (if (= W4739 let) (let W4740 (shen.lazyderef (tl W4738) V4589) (if (cons? W4740) (let W4741 (hd W4740) (let W4742 (shen.lazyderef (tl W4740) V4589) (if (cons? W4742) (let W4743 (hd W4742) (let W4744 (shen.lazyderef (tl W4742) V4589) (if (cons? W4744) (let W4745 (hd W4744) (let W4746 (shen.lazyderef (tl W4744) V4589) (if (= W4746 ()) (let W4747 (shen.newpv V4589) (shen.gc V4589 (let W4748 (shen.newpv V4589) (shen.gc V4589 (let W4749 (shen.newpv V4589) (shen.gc V4589 (do (shen.incinfs) (shen.system-S-h W4743 W4749 V4588 V4589 V4590 W4593 (freeze (bind W4748 (shen.freshterm (shen.lazyderef W4741 V4589)) V4589 V4590 W4593 (freeze (bind W4747 (shen.beta (shen.lazyderef W4741 V4589) (shen.lazyderef W4748 V4589) (shen.lazyderef W4745 V4589)) V4589 V4590 W4593 (freeze (shen.system-S-h W4747 V4587 (cons (cons W4748 (cons (intern ":") (cons W4749 ()))) V4588) V4589 V4590 W4593 V4592)))))))))))))) false))) false))) false))) false)) false)) false)) false) (if (= W4737 false) (let W4750 (if (shen.unlocked? V4590) (let W4751 (shen.lazyderef V4586 V4589) (if (cons? W4751) (let W4752 (shen.lazyderef (hd W4751) V4589) (if (= W4752 open) (let W4753 (shen.lazyderef (tl W4751) V4589) (if (cons? W4753) (let W4754 (hd W4753) (let W4755 (shen.lazyderef (tl W4753) V4589) (if (cons? W4755) (let W4756 (hd W4755) (let W4757 (shen.lazyderef (tl W4755) V4589) (if (= W4757 ()) (let W4758 (shen.lazyderef V4587 V4589) (let W4759 (lambda Z4760 (do (shen.incinfs) (is! W4756 Z4760 V4589 V4590 W4593 (freeze (when (element? (shen.lazyderef Z4760 V4589) (cons in (cons out ()))) V4589 V4590 W4593 (freeze (shen.system-S-h W4754 string V4588 V4589 V4590 W4593 V4592))))))) (if (cons? W4758) (let W4761 (shen.lazyderef (hd W4758) V4589) (let W4762 (freeze (let W4763 (shen.lazyderef (tl W4758) V4589) (let W4764 (lambda Z4765 (W4759 Z4765)) (if (cons? W4763) (let W4766 (hd W4763) (let W4767 (shen.lazyderef (tl W4763) V4589) (let W4768 (freeze (W4764 W4766)) (if (= W4767 ()) (thaw W4768) (if (shen.pvar? W4767) (shen.bind! W4767 () V4589 W4768) false))))) (if (shen.pvar? W4763) (let W4769 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4763 (cons W4769 ()) V4589 (freeze (W4764 W4769))))) false))))) (if (= W4761 stream) (thaw W4762) (if (shen.pvar? W4761) (shen.bind! W4761 stream V4589 W4762) false)))) (if (shen.pvar? W4758) (let W4770 (shen.newpv V4589) (shen.gc V4589 (shen.bind! W4758 (cons stream (cons W4770 ())) V4589 (freeze (W4759 W4770))))) false)))) false))) false))) false)) false)) false)) false) (if (= W4750 false) (let W4771 (if (shen.unlocked? V4590) (let W4772 (shen.lazyderef V4586 V4589) (if (cons? W4772) (let W4773 (shen.lazyderef (hd W4772) V4589) (if (= W4773 type) (let W4774 (shen.lazyderef (tl W4772) V4589) (if (cons? W4774) (let W4775 (hd W4774) (let W4776 (shen.lazyderef (tl W4774) V4589) (if (cons? W4776) (let W4777 (hd W4776) (let W4778 (shen.lazyderef (tl W4776) V4589) (if (= W4778 ()) (do (shen.incinfs) (shen.cut V4589 V4590 W4593 (freeze (is! (shen.rectify-type (shen.deref W4777 V4589)) V4587 V4589 V4590 W4593 (freeze (shen.system-S-h W4775 V4587 V4588 V4589 V4590 W4593 V4592)))))) false))) false))) false)) false)) false)) false) (if (= W4771 false) (let W4779 (if (shen.unlocked? V4590) (let W4780 (shen.lazyderef V4586 V4589) (if (cons? W4780) (let W4781 (shen.lazyderef (hd W4780) V4589) (if (= W4781 input+) (let W4782 (shen.lazyderef (tl W4780) V4589) (if (cons? W4782) (let W4783 (hd W4782) (let W4784 (shen.lazyderef (tl W4782) V4589) (if (cons? W4784) (let W4785 (hd W4784) (let W4786 (shen.lazyderef (tl W4784) V4589) (if (= W4786 ()) (do (shen.incinfs) (is! V4587 (shen.rectify-type (shen.deref W4783 V4589)) V4589 V4590 W4593 (freeze (shen.system-S-h W4785 (cons stream (cons in ())) V4588 V4589 V4590 W4593 V4592)))) false))) false))) false)) false)) false)) false) (if (= W4779 false) (let W4787 (if (shen.unlocked? V4590) (let W4788 (shen.lazyderef V4586 V4589) (if (cons? W4788) (let W4789 (shen.lazyderef (hd W4788) V4589) (if (= W4789 set) (let W4790 (shen.lazyderef (tl W4788) V4589) (if (cons? W4790) (let W4791 (hd W4790) (let W4792 (shen.lazyderef (tl W4790) V4589) (if (cons? W4792) (let W4793 (hd W4792) (let W4794 (shen.lazyderef (tl W4792) V4589) (if (= W4794 ()) (do (shen.incinfs) (shen.system-S-h W4791 symbol V4588 V4589 V4590 W4593 (freeze (shen.system-S-h (cons value (cons W4791 ())) V4587 V4588 V4589 V4590 W4593 (freeze (shen.system-S-h W4793 V4587 V4588 V4589 V4590 W4593 V4592)))))) false))) false))) false)) false)) false)) false) (if (= W4787 false) (let W4795 (if (shen.unlocked? V4590) (let W4796 (shen.newpv V4589) (shen.gc V4589 (do (shen.incinfs) (shen.l-rules V4588 W4796 false V4589 V4590 W4593 (freeze (shen.cut V4589 V4590 W4593 (freeze (shen.system-S-h V4586 V4587 W4796 V4589 V4590 W4593 V4592)))))))) false) (if (= W4795 false) (let W4797 (if (shen.unlocked? V4590) (do (shen.incinfs) (shen.search-user-datatypes (cons V4586 (cons (intern ":") (cons V4587 ()))) V4588 (value shen.*datatypes*) V4589 V4590 W4593 V4592)) false) (if (= W4797 false) (shen.unlock V4590 W4593) W4797)) W4795)) W4787)) W4779)) W4771)) W4750)) W4737)) W4707)) W4697)) W4676)) W4648)) W4627)) W4620)) W4613)) W4607)) W4601)) W4597)) W4596)) W4595)) W4594))))

(defun shen.primitive (V4798 V4799 V4800 V4801 V4802 V4803) (let W4804 (if (shen.unlocked? V4801) (let W4805 (shen.lazyderef V4799 V4800) (let W4806 (freeze (do (shen.incinfs) (when (number? (shen.lazyderef V4798 V4800)) V4800 V4801 V4802 V4803))) (if (= W4805 number) (thaw W4806) (if (shen.pvar? W4805) (shen.bind! W4805 number V4800 W4806) false)))) false) (if (= W4804 false) (let W4807 (if (shen.unlocked? V4801) (let W4808 (shen.lazyderef V4799 V4800) (let W4809 (freeze (do (shen.incinfs) (when (boolean? (shen.lazyderef V4798 V4800)) V4800 V4801 V4802 V4803))) (if (= W4808 boolean) (thaw W4809) (if (shen.pvar? W4808) (shen.bind! W4808 boolean V4800 W4809) false)))) false) (if (= W4807 false) (let W4810 (if (shen.unlocked? V4801) (let W4811 (shen.lazyderef V4799 V4800) (let W4812 (freeze (do (shen.incinfs) (when (string? (shen.lazyderef V4798 V4800)) V4800 V4801 V4802 V4803))) (if (= W4811 string) (thaw W4812) (if (shen.pvar? W4811) (shen.bind! W4811 string V4800 W4812) false)))) false) (if (= W4810 false) (let W4813 (if (shen.unlocked? V4801) (let W4814 (shen.lazyderef V4799 V4800) (let W4815 (freeze (do (shen.incinfs) (when (symbol? (shen.lazyderef V4798 V4800)) V4800 V4801 V4802 V4803))) (if (= W4814 symbol) (thaw W4815) (if (shen.pvar? W4814) (shen.bind! W4814 symbol V4800 W4815) false)))) false) (if (= W4813 false) (if (shen.unlocked? V4801) (let W4816 (shen.lazyderef V4798 V4800) (if (= W4816 ()) (let W4817 (shen.lazyderef V4799 V4800) (let W4818 (lambda Z4819 (do (shen.incinfs) (thaw V4803))) (if (cons? W4817) (let W4820 (shen.lazyderef (hd W4817) V4800) (let W4821 (freeze (let W4822 (shen.lazyderef (tl W4817) V4800) (let W4823 (lambda Z4824 (W4818 Z4824)) (if (cons? W4822) (let W4825 (hd W4822) (let W4826 (shen.lazyderef (tl W4822) V4800) (let W4827 (freeze (W4823 W4825)) (if (= W4826 ()) (thaw W4827) (if (shen.pvar? W4826) (shen.bind! W4826 () V4800 W4827) false))))) (if (shen.pvar? W4822) (let W4828 (shen.newpv V4800) (shen.gc V4800 (shen.bind! W4822 (cons W4828 ()) V4800 (freeze (W4823 W4828))))) false))))) (if (= W4820 list) (thaw W4821) (if (shen.pvar? W4820) (shen.bind! W4820 list V4800 W4821) false)))) (if (shen.pvar? W4817) (let W4829 (shen.newpv V4800) (shen.gc V4800 (shen.bind! W4817 (cons list (cons W4829 ())) V4800 (freeze (W4818 W4829))))) false)))) false)) false) W4813)) W4810)) W4807)) W4804)))

(defun shen.by-hypothesis (V4830 V4831 V4832 V4833 V4834 V4835 V4836) (let W4837 (if (shen.unlocked? V4834) (let W4838 (shen.lazyderef V4832 V4833) (if (cons? W4838) (let W4839 (shen.lazyderef (hd W4838) V4833) (if (cons? W4839) (let W4840 (hd W4839) (let W4841 (shen.lazyderef (tl W4839) V4833) (if (cons? W4841) (let W4842 (hd W4841) (let W4843 (shen.lazyderef (tl W4841) V4833) (if (cons? W4843) (let W4844 (hd W4843) (let W4845 (shen.lazyderef (tl W4843) V4833) (if (= W4845 ()) (do (shen.incinfs) (when (= (shen.deref W4842 V4833) (intern ":")) V4833 V4834 V4835 (freeze (when (= (shen.deref V4830 V4833) (shen.deref W4840 V4833)) V4833 V4834 V4835 (freeze (is! V4831 W4844 V4833 V4834 V4835 V4836)))))) false))) false))) false))) false)) false)) false) (if (= W4837 false) (if (shen.unlocked? V4834) (let W4846 (shen.lazyderef V4832 V4833) (if (cons? W4846) (let W4847 (tl W4846) (do (shen.incinfs) (shen.by-hypothesis V4830 V4831 W4847 V4833 V4834 V4835 V4836))) false)) false) W4837)))

(defun shen.lookupsig (V4848 V4849 V4850 V4851 V4852 V4853) (if (shen.unlocked? V4851) (do (shen.incinfs) (shen.sigf (assoc V4848 (value shen.*sigf*)) V4849 V4850 V4851 V4852 V4853)) false))

(defun shen.sigf (V4868 V4869 V4870 V4871 V4872 V4873) (cond ((cons? V4868) ((((((tl V4868) V4869) V4870) V4871) V4872) V4873)) (true false)))

(defun shen.freshterm (V4874) (let W4875 (absvector 3) (let W4876 (address-> W4875 0 shen.print-freshterm) (let W4877 (address-> W4876 1 V4874) (let W4878 (address-> W4877 2 (set shen.*gensym* (+ 1 (value shen.*gensym*)))) W4878)))))

(defun shen.print-freshterm (V4879) (cn "&&" (str (<-address V4879 1))))

(defun shen.search-user-datatypes (V4880 V4881 V4882 V4883 V4884 V4885 V4886) (let W4887 (if (shen.unlocked? V4884) (let W4888 (shen.lazyderef V4882 V4883) (if (cons? W4888) (let W4889 (shen.lazyderef (hd W4888) V4883) (if (cons? W4889) (let W4890 (tl W4889) (do (shen.incinfs) (call (((shen.deref W4890 V4883) (shen.deref V4880 V4883)) (shen.deref V4881 V4883)) V4883 V4884 V4885 V4886))) false)) false)) false) (if (= W4887 false) (if (shen.unlocked? V4884) (let W4891 (shen.lazyderef V4882 V4883) (if (cons? W4891) (let W4892 (tl W4891) (do (shen.incinfs) (shen.search-user-datatypes V4880 V4881 W4892 V4883 V4884 V4885 V4886))) false)) false) W4887)))

(defun shen.l-rules (V4893 V4894 V4895 V4896 V4897 V4898 V4899) (let W4900 (+ V4898 1) (let W4901 (if (shen.unlocked? V4897) (let W4902 (shen.lazyderef V4893 V4896) (if (= W4902 ()) (let W4903 (shen.lazyderef V4895 V4896) (if (= W4903 true) (do (shen.incinfs) (shen.cut V4896 V4897 W4900 (freeze (bind V4894 () V4896 V4897 W4900 V4899)))) false)) false)) false) (if (= W4901 false) (let W4904 (if (shen.unlocked? V4897) (let W4905 (shen.lazyderef V4893 V4896) (if (cons? W4905) (let W4906 (shen.lazyderef (hd W4905) V4896) (if (cons? W4906) (let W4907 (shen.lazyderef (hd W4906) V4896) (if (cons? W4907) (let W4908 (shen.lazyderef (hd W4907) V4896) (if (= W4908 cons) (let W4909 (shen.lazyderef (tl W4907) V4896) (if (cons? W4909) (let W4910 (hd W4909) (let W4911 (shen.lazyderef (tl W4909) V4896) (if (cons? W4911) (let W4912 (hd W4911) (let W4913 (shen.lazyderef (tl W4911) V4896) (if (= W4913 ()) (let W4914 (shen.lazyderef (tl W4906) V4896) (if (cons? W4914) (let W4915 (hd W4914) (let W4916 (shen.lazyderef (tl W4914) V4896) (if (cons? W4916) (let W4917 (shen.lazyderef (hd W4916) V4896) (if (cons? W4917) (let W4918 (shen.lazyderef (hd W4917) V4896) (if (= W4918 list) (let W4919 (shen.lazyderef (tl W4917) V4896) (if (cons? W4919) (let W4920 (hd W4919) (let W4921 (shen.lazyderef (tl W4919) V4896) (if (= W4921 ()) (let W4922 (shen.lazyderef (tl W4916) V4896) (if (= W4922 ()) (let W4923 (tl W4905) (do (shen.incinfs) (when (= (shen.deref W4915 V4896) (intern ":")) V4896 V4897 W4900 (freeze (shen.cut V4896 V4897 W4900 (freeze (shen.l-rules (cons (cons W4910 (cons W4915 (cons W4920 ()))) (cons (cons W4912 (cons W4915 (cons (cons list (cons W4920 ())) ()))) W4923)) V4894 true V4896 V4897 W4900 V4899))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W4904 false) (let W4924 (if (shen.unlocked? V4897) (let W4925 (shen.lazyderef V4893 V4896) (if (cons? W4925) (let W4926 (shen.lazyderef (hd W4925) V4896) (if (cons? W4926) (let W4927 (shen.lazyderef (hd W4926) V4896) (if (cons? W4927) (let W4928 (shen.lazyderef (hd W4927) V4896) (if (= W4928 @p) (let W4929 (shen.lazyderef (tl W4927) V4896) (if (cons? W4929) (let W4930 (hd W4929) (let W4931 (shen.lazyderef (tl W4929) V4896) (if (cons? W4931) (let W4932 (hd W4931) (let W4933 (shen.lazyderef (tl W4931) V4896) (if (= W4933 ()) (let W4934 (shen.lazyderef (tl W4926) V4896) (if (cons? W4934) (let W4935 (hd W4934) (let W4936 (shen.lazyderef (tl W4934) V4896) (if (cons? W4936) (let W4937 (shen.lazyderef (hd W4936) V4896) (if (cons? W4937) (let W4938 (hd W4937) (let W4939 (shen.lazyderef (tl W4937) V4896) (if (cons? W4939) (let W4940 (shen.lazyderef (hd W4939) V4896) (if (= W4940 *) (let W4941 (shen.lazyderef (tl W4939) V4896) (if (cons? W4941) (let W4942 (hd W4941) (let W4943 (shen.lazyderef (tl W4941) V4896) (if (= W4943 ()) (let W4944 (shen.lazyderef (tl W4936) V4896) (if (= W4944 ()) (let W4945 (tl W4925) (do (shen.incinfs) (when (= (shen.deref W4935 V4896) (intern ":")) V4896 V4897 W4900 (freeze (shen.cut V4896 V4897 W4900 (freeze (shen.l-rules (cons (cons W4930 (cons W4935 (cons W4938 ()))) (cons (cons W4932 (cons W4935 (cons W4942 ()))) W4945)) V4894 true V4896 V4897 W4900 V4899))))))) false)) false))) false)) false)) false))) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W4924 false) (let W4946 (if (shen.unlocked? V4897) (let W4947 (shen.lazyderef V4893 V4896) (if (cons? W4947) (let W4948 (shen.lazyderef (hd W4947) V4896) (if (cons? W4948) (let W4949 (shen.lazyderef (hd W4948) V4896) (if (cons? W4949) (let W4950 (shen.lazyderef (hd W4949) V4896) (if (= W4950 @s) (let W4951 (shen.lazyderef (tl W4949) V4896) (if (cons? W4951) (let W4952 (hd W4951) (let W4953 (shen.lazyderef (tl W4951) V4896) (if (cons? W4953) (let W4954 (hd W4953) (let W4955 (shen.lazyderef (tl W4953) V4896) (if (= W4955 ()) (let W4956 (shen.lazyderef (tl W4948) V4896) (if (cons? W4956) (let W4957 (hd W4956) (let W4958 (shen.lazyderef (tl W4956) V4896) (if (cons? W4958) (let W4959 (shen.lazyderef (hd W4958) V4896) (if (= W4959 string) (let W4960 (shen.lazyderef (tl W4958) V4896) (if (= W4960 ()) (let W4961 (tl W4947) (do (shen.incinfs) (when (= (shen.deref W4957 V4896) (intern ":")) V4896 V4897 W4900 (freeze (shen.cut V4896 V4897 W4900 (freeze (shen.l-rules (cons (cons W4952 (cons W4957 (cons string ()))) (cons (cons W4954 (cons W4957 (cons string ()))) W4961)) V4894 true V4896 V4897 W4900 V4899))))))) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W4946 false) (let W4962 (if (shen.unlocked? V4897) (let W4963 (shen.lazyderef V4893 V4896) (if (cons? W4963) (let W4964 (shen.lazyderef (hd W4963) V4896) (if (cons? W4964) (let W4965 (shen.lazyderef (hd W4964) V4896) (if (cons? W4965) (let W4966 (shen.lazyderef (hd W4965) V4896) (if (= W4966 @v) (let W4967 (shen.lazyderef (tl W4965) V4896) (if (cons? W4967) (let W4968 (hd W4967) (let W4969 (shen.lazyderef (tl W4967) V4896) (if (cons? W4969) (let W4970 (hd W4969) (let W4971 (shen.lazyderef (tl W4969) V4896) (if (= W4971 ()) (let W4972 (shen.lazyderef (tl W4964) V4896) (if (cons? W4972) (let W4973 (hd W4972) (let W4974 (shen.lazyderef (tl W4972) V4896) (if (cons? W4974) (let W4975 (shen.lazyderef (hd W4974) V4896) (if (cons? W4975) (let W4976 (shen.lazyderef (hd W4975) V4896) (if (= W4976 vector) (let W4977 (shen.lazyderef (tl W4975) V4896) (if (cons? W4977) (let W4978 (hd W4977) (let W4979 (shen.lazyderef (tl W4977) V4896) (if (= W4979 ()) (let W4980 (shen.lazyderef (tl W4974) V4896) (if (= W4980 ()) (let W4981 (tl W4963) (do (shen.incinfs) (when (= (shen.deref W4973 V4896) (intern ":")) V4896 V4897 W4900 (freeze (shen.cut V4896 V4897 W4900 (freeze (shen.l-rules (cons (cons W4968 (cons W4973 (cons W4978 ()))) (cons (cons W4970 (cons W4973 (cons (cons vector (cons W4978 ())) ()))) W4981)) V4894 true V4896 V4897 W4900 V4899))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W4962 false) (let W4982 (if (shen.unlocked? V4897) (let W4983 (shen.lazyderef V4893 V4896) (if (cons? W4983) (let W4984 (hd W4983) (let W4985 (tl W4983) (let W4986 (shen.lazyderef V4894 V4896) (let W4987 (lambda Z4988 (lambda Z4989 (do (shen.incinfs) (bind Z4988 W4984 V4896 V4897 W4900 (freeze (shen.l-rules W4985 Z4989 V4895 V4896 V4897 W4900 V4899)))))) (if (cons? W4986) (let W4990 (hd W4986) (let W4991 (tl W4986) ((W4987 W4990) W4991))) (if (shen.pvar? W4986) (let W4992 (shen.newpv V4896) (shen.gc V4896 (let W4993 (shen.newpv V4896) (shen.gc V4896 (shen.bind! W4986 (cons W4992 W4993) V4896 (freeze ((W4987 W4992) W4993))))))) false)))))) false)) false) (if (= W4982 false) (shen.unlock V4897 W4900) W4982)) W4962)) W4946)) W4924)) W4904)) W4901))))

(defun shen.t* (V4994 V4995 V4996 V4997 V4998 V4999) (let W5000 (+ V4998 1) (let W5001 (if (shen.unlocked? V4997) (let W5002 (shen.lazyderef V4994 V4996) (if (cons? W5002) (let W5003 (shen.lazyderef (hd W5002) V4996) (if (= W5003 define) (let W5004 (shen.lazyderef (tl W5002) V4996) (if (cons? W5004) (let W5005 (hd W5004) (let W5006 (tl W5004) (let W5007 (shen.newpv V4996) (shen.gc V4996 (let W5008 (shen.newpv V4996) (shen.gc V4996 (let W5009 (shen.newpv V4996) (shen.gc V4996 (let W5010 (shen.newpv V4996) (shen.gc V4996 (do (shen.incinfs) (shen.cut V4996 V4997 W5000 (freeze (bind W5007 (shen.sigxrules (cons W5005 W5006)) V4996 V4997 W5000 (freeze (bind W5010 (fst (shen.lazyderef W5007 V4996)) V4996 V4997 W5000 (freeze (bind W5008 (snd (shen.lazyderef W5007 V4996)) V4996 V4997 W5000 (freeze (bind W5009 (shen.freshen-sig (shen.deref W5010 V4996)) V4996 V4997 W5000 (freeze (shen.t*-rules W5005 W5008 W5009 1 V4996 V4997 W5000 (freeze (is W5010 V4995 V4996 V4997 W5000 V4999)))))))))))))))))))))))) false)) false)) false)) false) (if (= W5001 false) (shen.unlock V4997 W5000) W5001))))

(defun shen.sigxrules (V5011) (compile (lambda Z5012 (shen.<sig*rules> Z5012)) V5011))

(defun shen.<sig*rules> (V5013) (let W5014 (if (cons? V5013) (let W5015 (tail V5013) (if (shen.hds=? W5015 {) (let W5016 (tail W5015) (let W5017 (shen.<signature> W5016) (if (shen.parse-failure? W5017) (shen.parse-failure) (let W5018 (shen.<-out W5017) (let W5019 (shen.in-> W5017) (if (shen.hds=? W5019 }) (let W5020 (tail W5019) (let W5021 (shen.<rules*> W5020) (if (shen.parse-failure? W5021) (shen.parse-failure) (let W5022 (shen.<-out W5021) (let W5023 (shen.in-> W5021) (shen.comb W5023 (let W5024 (shen.rectify-type W5018) (@p W5024 W5022)))))))) (shen.parse-failure))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W5014) (shen.parse-failure) W5014)))

(defun shen.freshen-sig (V5025) (let W5026 (shen.extract-vars V5025) (let W5027 (map (lambda Z5028 (cons Z5028 (shen.freshterm (concat & Z5028)))) W5026) (shen.freshen-type W5027 V5025))))

(defun shen.freshen-type (V5029 V5030) (cond ((= () V5029) V5030) ((and (cons? V5029) (cons? (hd V5029))) (shen.freshen-type (tl V5029) (subst (tl (hd V5029)) (hd (hd V5029)) V5030))) (true (simple-error "partial function shen.freshen-type"))))

(defun shen.<rules*> (V5031) (let W5032 (let W5033 (shen.<rule*> V5031) (if (shen.parse-failure? W5033) (shen.parse-failure) (let W5034 (shen.<-out W5033) (let W5035 (shen.in-> W5033) (let W5036 (shen.<rules*> W5035) (if (shen.parse-failure? W5036) (shen.parse-failure) (let W5037 (shen.<-out W5036) (let W5038 (shen.in-> W5036) (shen.comb W5038 (cons W5034 W5037)))))))))) (if (shen.parse-failure? W5032) (let W5039 (let W5040 (shen.<rule*> V5031) (if (shen.parse-failure? W5040) (shen.parse-failure) (let W5041 (shen.<-out W5040) (let W5042 (shen.in-> W5040) (shen.comb W5042 (cons W5041 ())))))) (if (shen.parse-failure? W5039) (shen.parse-failure) W5039)) W5032)))

(defun shen.<rule*> (V5043) (let W5044 (let W5045 (shen.<patterns> V5043) (if (shen.parse-failure? W5045) (shen.parse-failure) (let W5046 (shen.<-out W5045) (let W5047 (shen.in-> W5045) (if (shen.hds=? W5047 ->) (let W5048 (tail W5047) (if (cons? W5048) (let W5049 (head W5048) (let W5050 (tail W5048) (if (shen.hds=? W5050 where) (let W5051 (tail W5050) (if (cons? W5051) (let W5052 (head W5051) (let W5053 (tail W5051) (shen.comb W5053 (@p W5046 (cons where (cons W5052 (cons W5049 ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5044) (let W5054 (let W5055 (shen.<patterns> V5043) (if (shen.parse-failure? W5055) (shen.parse-failure) (let W5056 (shen.<-out W5055) (let W5057 (shen.in-> W5055) (if (shen.hds=? W5057 <-) (let W5058 (tail W5057) (if (cons? W5058) (let W5059 (head W5058) (let W5060 (tail W5058) (if (shen.hds=? W5060 where) (let W5061 (tail W5060) (if (cons? W5061) (let W5062 (head W5061) (let W5063 (tail W5061) (shen.comb W5063 (@p W5056 (shen.correct (cons where (cons W5062 (cons W5059 ())))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5054) (let W5064 (let W5065 (shen.<patterns> V5043) (if (shen.parse-failure? W5065) (shen.parse-failure) (let W5066 (shen.<-out W5065) (let W5067 (shen.in-> W5065) (if (shen.hds=? W5067 <-) (let W5068 (tail W5067) (if (cons? W5068) (let W5069 (head W5068) (let W5070 (tail W5068) (shen.comb W5070 (@p W5066 (shen.correct W5069))))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5064) (let W5071 (let W5072 (shen.<patterns> V5043) (if (shen.parse-failure? W5072) (shen.parse-failure) (let W5073 (shen.<-out W5072) (let W5074 (shen.in-> W5072) (if (shen.hds=? W5074 ->) (let W5075 (tail W5074) (if (cons? W5075) (let W5076 (head W5075) (let W5077 (tail W5075) (shen.comb W5077 (@p W5073 W5076)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5071) (shen.parse-failure) W5071)) W5064)) W5054)) W5044)))

(defun shen.correct (V5078) (cond ((and (cons? V5078) (and (= where (hd V5078)) (and (cons? (tl V5078)) (and (cons? (tl (tl V5078))) (and (cons? (hd (tl (tl V5078)))) (and (= fail-if (hd (hd (tl (tl V5078))))) (and (cons? (tl (hd (tl (tl V5078))))) (and (cons? (tl (tl (hd (tl (tl V5078)))))) (and (= () (tl (tl (tl (hd (tl (tl V5078))))))) (= () (tl (tl (tl V5078))))))))))))) (cons where (cons (cons and (cons (hd (tl V5078)) (cons (cons not (cons (tl (hd (tl (tl V5078)))) ())) ()))) (tl (tl (hd (tl (tl V5078)))))))) ((and (cons? V5078) (and (= where (hd V5078)) (and (cons? (tl V5078)) (and (cons? (tl (tl V5078))) (= () (tl (tl (tl V5078)))))))) (cons where (cons (cons and (cons (hd (tl V5078)) (cons (cons not (cons (cons = (cons (hd (tl (tl V5078))) (cons (cons fail ()) ()))) ())) ()))) (tl (tl V5078))))) ((and (cons? V5078) (and (= fail-if (hd V5078)) (and (cons? (tl V5078)) (and (cons? (tl (tl V5078))) (= () (tl (tl (tl V5078)))))))) (cons where (cons (cons not (cons (tl V5078) ())) (tl (tl V5078))))) (true (cons where (cons (cons not (cons (cons = (cons V5078 (cons (cons fail ()) ()))) ())) (cons V5078 ()))))))

(defun shen.t*-rules (V5079 V5080 V5081 V5082 V5083 V5084 V5085 V5086) (let W5087 (+ V5085 1) (let W5088 (if (shen.unlocked? V5084) (let W5089 (shen.lazyderef V5080 V5083) (if (= W5089 ()) (do (shen.incinfs) (thaw V5086)) false)) false) (if (= W5088 false) (let W5090 (if (shen.unlocked? V5084) (let W5091 (shen.lazyderef V5080 V5083) (if (cons? W5091) (let W5092 (hd W5091) (let W5093 (tl W5091) (let W5094 (shen.newpv V5083) (shen.gc V5083 (do (shen.incinfs) (bind W5094 (shen.freshen-rule (shen.deref W5092 V5083)) V5083 V5084 W5087 (freeze (shen.t*-rule V5079 V5082 (fst (shen.lazyderef W5094 V5083)) (snd (shen.lazyderef W5094 V5083)) V5081 V5083 V5084 W5087 (freeze (shen.cut V5083 V5084 W5087 (freeze (shen.t*-rules V5079 W5093 V5081 (+ V5082 1) V5083 V5084 W5087 V5086)))))))))))) false)) false) (if (= W5090 false) (shen.unlock V5084 W5087) W5090)) W5088))))

(defun shen.freshen-rule (V5095) (cond ((tuple? V5095) (let W5096 (shen.extract-vars (fst V5095)) (let W5097 (map (lambda Z5098 (cons Z5098 (shen.freshterm Z5098))) W5096) (@p (shen.freshen W5097 (fst V5095)) (shen.freshen W5097 (snd V5095)))))) (true (simple-error "partial function shen.freshen-rule"))))

(defun shen.freshen (V5099 V5100) (cond ((= () V5099) V5100) ((and (cons? V5099) (cons? (hd V5099))) (shen.freshen (tl V5099) (shen.beta (hd (hd V5099)) (tl (hd V5099)) V5100))) (true (simple-error "partial function shen.freshen"))))

(defun shen.t*-rule (V5101 V5102 V5103 V5104 V5105 V5106 V5107 V5108 V5109) (let W5110 (if (shen.unlocked? V5107) (do (shen.incinfs) (shen.t*-rule-h V5103 V5104 V5105 V5106 V5107 V5108 V5109)) false) (if (= W5110 false) (if (shen.unlocked? V5107) (let W5111 (shen.newpv V5106) (shen.gc V5106 (do (shen.incinfs) (bind W5111 (simple-error (cn "type error in rule " (shen.app V5102 (cn " of " (shen.app V5101 "
" shen.a)) shen.a))) V5106 V5107 V5108 V5109)))) false) W5110)))

(defun shen.t*-rule-h (V5112 V5113 V5114 V5115 V5116 V5117 V5118) (let W5119 (+ V5117 1) (let W5120 (if (shen.unlocked? V5116) (let W5121 (shen.lazyderef V5112 V5115) (if (= W5121 ()) (let W5122 (shen.lazyderef V5114 V5115) (if (cons? W5122) (let W5123 (shen.lazyderef (hd W5122) V5115) (if (= W5123 -->) (let W5124 (shen.lazyderef (tl W5122) V5115) (if (cons? W5124) (let W5125 (hd W5124) (let W5126 (shen.lazyderef (tl W5124) V5115) (if (= W5126 ()) (do (shen.incinfs) (shen.cut V5115 V5116 W5119 (freeze (shen.t*-correct V5113 W5125 () V5115 V5116 W5119 V5118)))) false))) false)) false)) false)) false)) false) (if (= W5120 false) (let W5127 (if (shen.unlocked? V5116) (let W5128 (shen.newpv V5115) (shen.gc V5115 (let W5129 (shen.newpv V5115) (shen.gc V5115 (let W5130 (shen.newpv V5115) (shen.gc V5115 (do (shen.incinfs) (shen.p-hyps (shen.freshterms V5112) W5128 V5115 V5116 W5119 (freeze (shen.t*-integrity V5112 V5114 W5128 W5129 V5115 V5116 W5119 (freeze (shen.cut V5115 V5116 W5119 (freeze (shen.myassume V5112 V5114 W5130 V5115 V5116 W5119 (freeze (shen.t*-correct V5113 W5129 W5130 V5115 V5116 W5119 V5118)))))))))))))))) false) (if (= W5127 false) (shen.unlock V5116 W5119) W5127)) W5120))))

(defun shen.myassume (V5131 V5132 V5133 V5134 V5135 V5136 V5137) (let W5138 (if (shen.unlocked? V5135) (let W5139 (shen.lazyderef V5131 V5134) (if (= W5139 ()) (let W5140 (shen.lazyderef V5133 V5134) (let W5141 (freeze (do (shen.incinfs) (thaw V5137))) (if (= W5140 ()) (thaw W5141) (if (shen.pvar? W5140) (shen.bind! W5140 () V5134 W5141) false)))) false)) false) (if (= W5138 false) (if (shen.unlocked? V5135) (let W5142 (shen.lazyderef V5131 V5134) (if (cons? W5142) (let W5143 (hd W5142) (let W5144 (tl W5142) (let W5145 (shen.lazyderef V5132 V5134) (if (cons? W5145) (let W5146 (hd W5145) (let W5147 (shen.lazyderef (tl W5145) V5134) (if (cons? W5147) (let W5148 (shen.lazyderef (hd W5147) V5134) (if (= W5148 -->) (let W5149 (shen.lazyderef (tl W5147) V5134) (if (cons? W5149) (let W5150 (hd W5149) (let W5151 (shen.lazyderef (tl W5149) V5134) (if (= W5151 ()) (let W5152 (shen.lazyderef V5133 V5134) (let W5153 (lambda Z5154 (lambda Z5155 (lambda Z5156 (lambda Z5157 (do (shen.incinfs) (is! W5146 Z5156 V5134 V5135 V5136 (freeze (is! W5143 Z5154 V5134 V5135 V5136 (freeze (bind Z5155 (intern ":") V5134 V5135 V5136 (freeze (shen.myassume W5144 W5150 Z5157 V5134 V5135 V5136 V5137)))))))))))) (if (cons? W5152) (let W5158 (shen.lazyderef (hd W5152) V5134) (let W5159 (lambda Z5160 (lambda Z5161 (lambda Z5162 (let W5163 (tl W5152) ((((W5153 Z5160) Z5161) Z5162) W5163))))) (if (cons? W5158) (let W5164 (hd W5158) (let W5165 (shen.lazyderef (tl W5158) V5134) (let W5166 (lambda Z5167 (lambda Z5168 (((W5159 W5164) Z5167) Z5168))) (if (cons? W5165) (let W5169 (hd W5165) (let W5170 (shen.lazyderef (tl W5165) V5134) (let W5171 (lambda Z5172 ((W5166 W5169) Z5172)) (if (cons? W5170) (let W5173 (hd W5170) (let W5174 (shen.lazyderef (tl W5170) V5134) (let W5175 (freeze (W5171 W5173)) (if (= W5174 ()) (thaw W5175) (if (shen.pvar? W5174) (shen.bind! W5174 () V5134 W5175) false))))) (if (shen.pvar? W5170) (let W5176 (shen.newpv V5134) (shen.gc V5134 (shen.bind! W5170 (cons W5176 ()) V5134 (freeze (W5171 W5176))))) false))))) (if (shen.pvar? W5165) (let W5177 (shen.newpv V5134) (shen.gc V5134 (let W5178 (shen.newpv V5134) (shen.gc V5134 (shen.bind! W5165 (cons W5177 (cons W5178 ())) V5134 (freeze ((W5166 W5177) W5178))))))) false))))) (if (shen.pvar? W5158) (let W5179 (shen.newpv V5134) (shen.gc V5134 (let W5180 (shen.newpv V5134) (shen.gc V5134 (let W5181 (shen.newpv V5134) (shen.gc V5134 (shen.bind! W5158 (cons W5179 (cons W5180 (cons W5181 ()))) V5134 (freeze (((W5159 W5179) W5180) W5181))))))))) false)))) (if (shen.pvar? W5152) (let W5182 (shen.newpv V5134) (shen.gc V5134 (let W5183 (shen.newpv V5134) (shen.gc V5134 (let W5184 (shen.newpv V5134) (shen.gc V5134 (let W5185 (shen.newpv V5134) (shen.gc V5134 (shen.bind! W5152 (cons (cons W5182 (cons W5183 (cons W5184 ()))) W5185) V5134 (freeze ((((W5153 W5182) W5183) W5184) W5185))))))))))) false)))) false))) false)) false)) false))) false)))) false)) false) W5138)))

(defun shen.freshterms (V5188) (cond ((= () V5188) ()) ((and (cons? V5188) (cons? (hd V5188))) (shen.freshterms (append (hd V5188) (tl V5188)))) ((and (cons? V5188) (shen.freshterm? (hd V5188))) (adjoin (hd V5188) (shen.freshterms (tl V5188)))) ((cons? V5188) (shen.freshterms (tl V5188))) (true (simple-error "partial function shen.freshterms"))))

(defun shen.p-hyps (V5189 V5190 V5191 V5192 V5193 V5194) (let W5195 (if (shen.unlocked? V5192) (let W5196 (shen.lazyderef V5189 V5191) (if (= W5196 ()) (let W5197 (shen.lazyderef V5190 V5191) (let W5198 (freeze (do (shen.incinfs) (thaw V5194))) (if (= W5197 ()) (thaw W5198) (if (shen.pvar? W5197) (shen.bind! W5197 () V5191 W5198) false)))) false)) false) (if (= W5195 false) (if (shen.unlocked? V5192) (let W5199 (shen.lazyderef V5189 V5191) (if (cons? W5199) (let W5200 (hd W5199) (let W5201 (tl W5199) (let W5202 (shen.lazyderef V5190 V5191) (let W5203 (lambda Z5204 (lambda Z5205 (lambda Z5206 (lambda Z5207 (do (shen.incinfs) (bind Z5204 W5200 V5191 V5192 V5193 (freeze (bind Z5205 (intern ":") V5191 V5192 V5193 (freeze (shen.p-hyps W5201 Z5207 V5191 V5192 V5193 V5194)))))))))) (if (cons? W5202) (let W5208 (shen.lazyderef (hd W5202) V5191) (let W5209 (lambda Z5210 (lambda Z5211 (lambda Z5212 (let W5213 (tl W5202) ((((W5203 Z5210) Z5211) Z5212) W5213))))) (if (cons? W5208) (let W5214 (hd W5208) (let W5215 (shen.lazyderef (tl W5208) V5191) (let W5216 (lambda Z5217 (lambda Z5218 (((W5209 W5214) Z5217) Z5218))) (if (cons? W5215) (let W5219 (hd W5215) (let W5220 (shen.lazyderef (tl W5215) V5191) (let W5221 (lambda Z5222 ((W5216 W5219) Z5222)) (if (cons? W5220) (let W5223 (hd W5220) (let W5224 (shen.lazyderef (tl W5220) V5191) (let W5225 (freeze (W5221 W5223)) (if (= W5224 ()) (thaw W5225) (if (shen.pvar? W5224) (shen.bind! W5224 () V5191 W5225) false))))) (if (shen.pvar? W5220) (let W5226 (shen.newpv V5191) (shen.gc V5191 (shen.bind! W5220 (cons W5226 ()) V5191 (freeze (W5221 W5226))))) false))))) (if (shen.pvar? W5215) (let W5227 (shen.newpv V5191) (shen.gc V5191 (let W5228 (shen.newpv V5191) (shen.gc V5191 (shen.bind! W5215 (cons W5227 (cons W5228 ())) V5191 (freeze ((W5216 W5227) W5228))))))) false))))) (if (shen.pvar? W5208) (let W5229 (shen.newpv V5191) (shen.gc V5191 (let W5230 (shen.newpv V5191) (shen.gc V5191 (let W5231 (shen.newpv V5191) (shen.gc V5191 (shen.bind! W5208 (cons W5229 (cons W5230 (cons W5231 ()))) V5191 (freeze (((W5209 W5229) W5230) W5231))))))))) false)))) (if (shen.pvar? W5202) (let W5232 (shen.newpv V5191) (shen.gc V5191 (let W5233 (shen.newpv V5191) (shen.gc V5191 (let W5234 (shen.newpv V5191) (shen.gc V5191 (let W5235 (shen.newpv V5191) (shen.gc V5191 (shen.bind! W5202 (cons (cons W5232 (cons W5233 (cons W5234 ()))) W5235) V5191 (freeze ((((W5203 W5232) W5233) W5234) W5235))))))))))) false)))))) false)) false) W5195)))

(defun shen.t*-correct (V5236 V5237 V5238 V5239 V5240 V5241 V5242) (let W5243 (+ V5241 1) (let W5244 (if (shen.unlocked? V5240) (let W5245 (shen.lazyderef V5236 V5239) (if (cons? W5245) (let W5246 (shen.lazyderef (hd W5245) V5239) (if (= W5246 where) (let W5247 (shen.lazyderef (tl W5245) V5239) (if (cons? W5247) (let W5248 (hd W5247) (let W5249 (shen.lazyderef (tl W5247) V5239) (if (cons? W5249) (let W5250 (hd W5249) (let W5251 (shen.lazyderef (tl W5249) V5239) (if (= W5251 ()) (let W5252 (shen.newpv V5239) (shen.gc V5239 (do (shen.incinfs) (shen.cut V5239 V5240 W5243 (freeze (bind W5252 (shen.curry W5248) V5239 V5240 W5243 (freeze (shen.system-S-h W5252 boolean V5238 V5239 V5240 W5243 (freeze (shen.cut V5239 V5240 W5243 (freeze (shen.t*-correct W5250 V5237 (cons (cons W5252 (cons (intern ":") (cons verified ()))) V5238) V5239 V5240 W5243 V5242)))))))))))) false))) false))) false)) false)) false)) false) (if (= W5244 false) (let W5253 (if (shen.unlocked? V5240) (do (shen.incinfs) (shen.system-S-h (shen.curry V5236) V5237 V5238 V5239 V5240 W5243 V5242)) false) (if (= W5253 false) (shen.unlock V5240 W5243) W5253)) W5244))))

(defun shen.t*-integrity (V5254 V5255 V5256 V5257 V5258 V5259 V5260 V5261) (let W5262 (if (shen.unlocked? V5259) (let W5263 (shen.lazyderef V5254 V5258) (if (= W5263 ()) (do (shen.incinfs) (is! V5255 V5257 V5258 V5259 V5260 V5261)) false)) false) (if (= W5262 false) (if (shen.unlocked? V5259) (let W5264 (shen.lazyderef V5254 V5258) (if (cons? W5264) (let W5265 (hd W5264) (let W5266 (tl W5264) (let W5267 (shen.lazyderef V5255 V5258) (if (cons? W5267) (let W5268 (hd W5267) (let W5269 (shen.lazyderef (tl W5267) V5258) (if (cons? W5269) (let W5270 (shen.lazyderef (hd W5269) V5258) (if (= W5270 -->) (let W5271 (shen.lazyderef (tl W5269) V5258) (if (cons? W5271) (let W5272 (hd W5271) (let W5273 (shen.lazyderef (tl W5271) V5258) (if (= W5273 ()) (do (shen.incinfs) (shen.system-S-h W5265 W5268 V5256 V5258 V5259 V5260 (freeze (shen.t*-integrity W5266 W5272 V5256 V5257 V5258 V5259 V5260 V5261)))) false))) false)) false)) false))) false)))) false)) false) W5262)))

(defun shen.freshterm? (V5274) (and (absvector? V5274) (and (not (string? V5274)) (= (<-address V5274 0) shen.print-freshterm))))

