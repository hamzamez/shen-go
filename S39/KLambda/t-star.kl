(defun shen.typecheck (V4488 V4489) (let W4490 (shen.extract-vars V4489) (let W4491 (shen.rectify-type V4489) (let W4492 (shen.curry V4488) (((((lambda Z4493 (lambda Z4494 (lambda Z4495 (lambda Z4496 (let W4497 (shen.newpv Z4493) (shen.gc Z4493 (do (shen.incinfs) (shen.insert-prolog-variables (receive (shen.deref W4490 Z4493)) (receive (shen.deref W4491 Z4493)) W4497 Z4493 Z4494 Z4495 (freeze (shen.toplevel-forms (receive (shen.deref W4492 Z4493)) W4497 Z4493 Z4494 Z4495 (freeze (return W4497 Z4493 Z4494 Z4495 Z4496)))))))))))) (shen.prolog-vector)) (@v true (@v 0 (vector 0)))) 0) (freeze true))))))

(defun shen.insert-prolog-variables (V4498 V4499 V4500 V4501 V4502 V4503 V4504) (let W4505 (if (shen.unlocked? V4502) (let W4506 (shen.lazyderef V4498 V4501) (if (= W4506 ()) (do (shen.incinfs) (is! V4499 V4500 V4501 V4502 V4503 V4504)) false)) false) (if (= W4505 false) (if (shen.unlocked? V4502) (let W4507 (shen.lazyderef V4498 V4501) (if (cons? W4507) (let W4508 (hd W4507) (let W4509 (tl W4507) (let W4510 (shen.newpv V4501) (shen.gc V4501 (do (shen.incinfs) (shen.insert-prolog-variables W4509 (subst (shen.deref W4510 V4501) W4508 V4499) V4500 V4501 V4502 V4503 V4504)))))) false)) false) W4505)))

(defun shen.toplevel-forms (V4511 V4512 V4513 V4514 V4515 V4516) (let W4517 (+ V4515 1) (let W4518 (if (shen.unlocked? V4514) (let W4519 (shen.lazyderef V4511 V4513) (if (cons? W4519) (let W4520 (shen.lazyderef (hd W4519) V4513) (if (= W4520 define) (let W4521 (shen.lazyderef (tl W4519) V4513) (if (cons? W4521) (let W4522 (hd W4521) (let W4523 (tl W4521) (do (shen.incinfs) (when (shen.type-theory-enabled?) V4513 V4514 W4517 (freeze (shen.cut V4513 V4514 W4517 (freeze (shen.signal-def (value shen.*spy*) W4522 V4513 V4514 W4517 (freeze (shen.t* (cons define (cons W4522 W4523)) V4512 V4513 V4514 W4517 V4516)))))))))) false)) false)) false)) false) (if (= W4518 false) (let W4524 (if (shen.unlocked? V4514) (do (shen.incinfs) (shen.system-S (cons V4511 (cons (intern ":") (cons V4512 ()))) () V4513 V4514 W4517 V4516)) false) (if (= W4524 false) (shen.unlock V4514 W4517) W4524)) W4518))))

(defun shen.signal-def (V4525 V4526 V4527 V4528 V4529 V4530) (let W4531 (if (shen.unlocked? V4528) (let W4532 (shen.lazyderef V4525 V4527) (if (= W4532 false) (do (shen.incinfs) (thaw V4530)) false)) false) (if (= W4531 false) (if (shen.unlocked? V4528) (let W4533 (shen.lazyderef V4525 V4527) (if (= W4533 true) (let W4534 (shen.newpv V4527) (shen.gc V4527 (do (shen.incinfs) (is W4534 (pr (cn "
typechecking (fn " (shen.app (shen.deref V4526 V4527) ")
" shen.a)) (stoutput)) V4527 V4528 V4529 V4530)))) false)) false) W4531)))

(defun shen.rectify-type (V4535) (shen.demodulate (shen.curry-type V4535)))

(defun shen.demodulate (V4536) (trap-error (let W4537 (shen.walk (lambda Z4538 (shen.demod Z4538)) V4536) (if (= W4537 V4536) V4536 (shen.demodulate W4537))) (lambda Z4539 V4536)))

(defun shen.curry-type (V4540) (cond ((and (cons? V4540) (and (cons? (tl V4540)) (and (= --> (hd (tl V4540))) (and (cons? (tl (tl V4540))) (and (cons? (tl (tl (tl V4540)))) (= --> (hd (tl (tl (tl V4540)))))))))) (shen.curry-type (cons (hd V4540) (cons --> (cons (tl (tl V4540)) ()))))) ((and (cons? V4540) (and (cons? (hd V4540)) (and (= list (hd (hd V4540))) (and (cons? (tl (hd V4540))) (and (= () (tl (tl (hd V4540)))) (and (cons? (tl V4540)) (and (= ==> (hd (tl V4540))) (and (cons? (tl (tl V4540))) (= () (tl (tl (tl V4540)))))))))))) (shen.curry-type (cons (hd V4540) (cons --> (cons (cons str (cons (hd V4540) (tl (tl V4540)))) ()))))) ((and (cons? V4540) (and (cons? (tl V4540)) (and (= * (hd (tl V4540))) (and (cons? (tl (tl V4540))) (and (cons? (tl (tl (tl V4540)))) (= * (hd (tl (tl (tl V4540)))))))))) (shen.curry-type (cons (hd V4540) (cons * (cons (tl (tl V4540)) ()))))) ((cons? V4540) (map (lambda Z4541 (shen.curry-type Z4541)) V4540)) (true V4540)))

(defun shen.curry (V4542) (cond ((and (cons? V4542) (and (= define (hd V4542)) (cons? (tl V4542)))) V4542) ((and (cons? V4542) (and (= type (hd V4542)) (and (cons? (tl V4542)) (and (cons? (tl (tl V4542))) (= () (tl (tl (tl V4542)))))))) (cons type (cons (shen.curry (hd (tl V4542))) (tl (tl V4542))))) ((and (cons? V4542) (and (= input+ (hd V4542)) (and (cons? (tl V4542)) (and (cons? (tl (tl V4542))) (= () (tl (tl (tl V4542)))))))) (cons input+ (cons (hd (tl V4542)) (cons (shen.curry (hd (tl (tl V4542)))) ())))) ((and (cons? V4542) (shen.special? (hd V4542))) (cons (hd V4542) (map (lambda Z4543 (shen.curry Z4543)) (tl V4542)))) ((and (cons? V4542) (shen.extraspecial? (hd V4542))) V4542) ((and (cons? V4542) (and (cons? (tl V4542)) (cons? (tl (tl V4542))))) (shen.curry (cons (cons (hd V4542) (cons (hd (tl V4542)) ())) (tl (tl V4542))))) ((and (cons? V4542) (and (cons? (tl V4542)) (= () (tl (tl V4542))))) (cons (shen.curry (hd V4542)) (cons (shen.curry (hd (tl V4542))) ()))) (true V4542)))

(defun shen.special? (V4544) (element? V4544 (value shen.*special*)))

(defun shen.extraspecial? (V4545) (element? V4545 (value shen.*extraspecial*)))

(defun shen.system-S (V4546 V4547 V4548 V4549 V4550 V4551) (let W4552 (+ V4550 1) (let W4553 (if (shen.unlocked? V4549) (do (shen.incinfs) (when (shen.maxinfexceeded?) V4548 V4549 W4552 V4551)) false) (if (= W4553 false) (let W4554 (if (shen.unlocked? V4549) (let W4555 (shen.lazyderef V4546 V4548) (if (cons? W4555) (let W4556 (hd W4555) (let W4557 (shen.lazyderef (tl W4555) V4548) (if (cons? W4557) (let W4558 (hd W4557) (let W4559 (shen.lazyderef (tl W4557) V4548) (if (cons? W4559) (let W4560 (hd W4559) (let W4561 (shen.lazyderef (tl W4559) V4548) (if (= W4561 ()) (do (shen.incinfs) (when (= (shen.deref W4558 V4548) (intern ":")) V4548 V4549 W4552 (freeze (when (shen.type-theory-enabled?) V4548 V4549 W4552 (freeze (shen.cut V4548 V4549 W4552 (freeze (shen.system-S-h W4556 W4560 V4547 V4548 V4549 W4552 V4551)))))))) false))) false))) false))) false)) false) (if (= W4554 false) (let W4562 (if (shen.unlocked? V4549) (do (shen.incinfs) (when (value shen.*spy*) V4548 V4549 W4552 (freeze (shen.show V4546 V4547 V4548 V4549 W4552 V4551)))) false) (if (= W4562 false) (let W4563 (if (shen.unlocked? V4549) (do (shen.incinfs) (shen.search-user-datatypes V4546 V4547 (value shen.*datatypes*) V4548 V4549 W4552 V4551)) false) (if (= W4563 false) (shen.unlock V4549 W4552) W4563)) W4562)) W4554)) W4553))))

(defun shen.show (V4570 V4571 V4572 V4573 V4574 V4575) (do (shen.line) (do (shen.show-p (shen.deref V4570 V4572)) (do (nl 2) (do (shen.show-assumptions (shen.deref V4571 V4572) 1) (do (shen.pause-for-user) false))))))

(defun shen.line () (let W4576 (inferences) (pr (cn "____________________________________________________________ " (shen.app W4576 (cn " inference" (shen.app (if (= 1 W4576) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))

(defun shen.show-p (V4577) (cond ((and (cons? V4577) (and (cons? (tl V4577)) (and (cons? (tl (tl V4577))) (and (= () (tl (tl (tl V4577)))) (= (hd (tl V4577)) (intern ":")))))) (do (shen.prterm (hd V4577)) (do (pr " : " (stoutput)) (pr (shen.app (hd (tl (tl V4577))) "" shen.r) (stoutput))))) (true (shen.prterm V4577))))

(defun shen.prterm (V4578) (cond ((and (cons? V4578) (and (= cons (hd V4578)) (and (cons? (tl V4578)) (and (cons? (tl (tl V4578))) (= () (tl (tl (tl V4578)))))))) (do (pr "[" (stoutput)) (do (shen.prterm (hd (tl V4578))) (do (shen.prtl (hd (tl (tl V4578)))) (pr "]" (stoutput)))))) ((cons? V4578) (do (pr "(" (stoutput)) (do (shen.prterm (hd V4578)) (do (map (lambda Z4579 (do (pr " " (stoutput)) (shen.prterm Z4579))) (tl V4578)) (pr ")" (stoutput)))))) (true (print V4578))))

(defun shen.prtl (V4580) (cond ((= () V4580) "") ((and (cons? V4580) (and (= cons (hd V4580)) (and (cons? (tl V4580)) (and (cons? (tl (tl V4580))) (= () (tl (tl (tl V4580)))))))) (do (pr " " (stoutput)) (do (shen.prterm (hd (tl V4580))) (shen.prtl (hd (tl (tl V4580))))))) (true (do (pr " | " (stoutput)) (shen.prterm V4580)))))

(defun shen.show-assumptions (V4587 V4588) (cond ((= () V4587) (pr "
> " (stoutput))) ((cons? V4587) (do (pr (shen.app V4588 ". " shen.a) (stoutput)) (do (shen.show-p (hd V4587)) (do (nl 1) (shen.show-assumptions (tl V4587) (+ V4588 1)))))) (true (simple-error "implementation error in shen.show-assumptions"))))

(defun shen.pause-for-user () (let W4589 (read-byte (stinput)) (if (= W4589 94) (simple-error "input aborted
") (nl 1))))

(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))

(defun shen.maxinfexceeded? () (if (> (inferences) (value shen.*maxinferences*)) (simple-error "maximum inferences exceeded") false))

(defun shen.system-S-h (V4590 V4591 V4592 V4593 V4594 V4595 V4596) (let W4597 (+ V4595 1) (let W4598 (if (shen.unlocked? V4594) (do (shen.incinfs) (when (value shen.*spy*) V4593 V4594 W4597 (freeze (shen.show (cons V4590 (cons (intern ":") (cons V4591 ()))) V4592 V4593 V4594 W4597 V4596)))) false) (if (= W4598 false) (let W4599 (if (shen.unlocked? V4594) (do (shen.incinfs) (when (not (cons? (shen.lazyderef V4590 V4593))) V4593 V4594 W4597 (freeze (shen.primitive V4590 V4591 V4593 V4594 W4597 V4596)))) false) (if (= W4599 false) (let W4600 (if (shen.unlocked? V4594) (do (shen.incinfs) (shen.by-hypothesis V4590 V4591 V4592 V4593 V4594 W4597 V4596)) false) (if (= W4600 false) (let W4601 (if (shen.unlocked? V4594) (let W4602 (shen.lazyderef V4590 V4593) (if (cons? W4602) (let W4603 (hd W4602) (let W4604 (shen.lazyderef (tl W4602) V4593) (if (= W4604 ()) (do (shen.incinfs) (shen.lookupsig W4603 (cons --> (cons V4591 ())) V4593 V4594 W4597 V4596)) false))) false)) false) (if (= W4601 false) (let W4605 (if (shen.unlocked? V4594) (let W4606 (shen.lazyderef V4590 V4593) (if (cons? W4606) (let W4607 (shen.lazyderef (hd W4606) V4593) (if (= W4607 fn) (let W4608 (shen.lazyderef (tl W4606) V4593) (if (cons? W4608) (let W4609 (hd W4608) (let W4610 (shen.lazyderef (tl W4608) V4593) (if (= W4610 ()) (do (shen.incinfs) (when (= (arity (shen.deref W4609 V4593)) 0) V4593 V4594 W4597 (freeze (shen.cut V4593 V4594 W4597 (freeze (shen.system-S-h (cons W4609 ()) V4591 V4592 V4593 V4594 W4597 V4596)))))) false))) false)) false)) false)) false) (if (= W4605 false) (let W4611 (if (shen.unlocked? V4594) (let W4612 (shen.lazyderef V4590 V4593) (if (cons? W4612) (let W4613 (shen.lazyderef (hd W4612) V4593) (if (= W4613 fn) (let W4614 (shen.lazyderef (tl W4612) V4593) (if (cons? W4614) (let W4615 (hd W4614) (let W4616 (shen.lazyderef (tl W4614) V4593) (if (= W4616 ()) (do (shen.incinfs) (shen.lookupsig W4615 V4591 V4593 V4594 W4597 V4596)) false))) false)) false)) false)) false) (if (= W4611 false) (let W4617 (if (shen.unlocked? V4594) (let W4618 (shen.lazyderef V4590 V4593) (if (cons? W4618) (let W4619 (hd W4618) (let W4620 (shen.lazyderef (tl W4618) V4593) (if (cons? W4620) (let W4621 (hd W4620) (let W4622 (shen.lazyderef (tl W4620) V4593) (if (= W4622 ()) (let W4623 (shen.newpv V4593) (shen.gc V4593 (do (shen.incinfs) (when (not (cons? (shen.lazyderef W4619 V4593))) V4593 V4594 W4597 (freeze (shen.lookupsig W4619 (cons W4623 (cons --> (cons V4591 ()))) V4593 V4594 W4597 (freeze (shen.system-S-h W4621 W4623 V4592 V4593 V4594 W4597 V4596)))))))) false))) false))) false)) false) (if (= W4617 false) (let W4624 (if (shen.unlocked? V4594) (let W4625 (shen.lazyderef V4590 V4593) (if (cons? W4625) (let W4626 (hd W4625) (let W4627 (shen.lazyderef (tl W4625) V4593) (if (cons? W4627) (let W4628 (hd W4627) (let W4629 (shen.lazyderef (tl W4627) V4593) (if (= W4629 ()) (let W4630 (shen.newpv V4593) (shen.gc V4593 (do (shen.incinfs) (shen.system-S-h W4626 (cons W4630 (cons --> (cons V4591 ()))) V4592 V4593 V4594 W4597 (freeze (shen.system-S-h W4628 W4630 V4592 V4593 V4594 W4597 V4596)))))) false))) false))) false)) false) (if (= W4624 false) (let W4631 (if (shen.unlocked? V4594) (let W4632 (shen.lazyderef V4590 V4593) (if (cons? W4632) (let W4633 (shen.lazyderef (hd W4632) V4593) (if (= W4633 cons) (let W4634 (shen.lazyderef (tl W4632) V4593) (if (cons? W4634) (let W4635 (hd W4634) (let W4636 (shen.lazyderef (tl W4634) V4593) (if (cons? W4636) (let W4637 (hd W4636) (let W4638 (shen.lazyderef (tl W4636) V4593) (if (= W4638 ()) (let W4639 (shen.lazyderef V4591 V4593) (let W4640 (lambda Z4641 (do (shen.incinfs) (shen.system-S-h W4635 Z4641 V4592 V4593 V4594 W4597 (freeze (shen.system-S-h W4637 (cons list (cons Z4641 ())) V4592 V4593 V4594 W4597 V4596))))) (if (cons? W4639) (let W4642 (shen.lazyderef (hd W4639) V4593) (let W4643 (freeze (let W4644 (shen.lazyderef (tl W4639) V4593) (let W4645 (lambda Z4646 (W4640 Z4646)) (if (cons? W4644) (let W4647 (hd W4644) (let W4648 (shen.lazyderef (tl W4644) V4593) (let W4649 (freeze (W4645 W4647)) (if (= W4648 ()) (thaw W4649) (if (shen.pvar? W4648) (shen.bind! W4648 () V4593 W4649) false))))) (if (shen.pvar? W4644) (let W4650 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4644 (cons W4650 ()) V4593 (freeze (W4645 W4650))))) false))))) (if (= W4642 list) (thaw W4643) (if (shen.pvar? W4642) (shen.bind! W4642 list V4593 W4643) false)))) (if (shen.pvar? W4639) (let W4651 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4639 (cons list (cons W4651 ())) V4593 (freeze (W4640 W4651))))) false)))) false))) false))) false)) false)) false)) false) (if (= W4631 false) (let W4652 (if (shen.unlocked? V4594) (let W4653 (shen.lazyderef V4590 V4593) (if (cons? W4653) (let W4654 (shen.lazyderef (hd W4653) V4593) (if (= W4654 @p) (let W4655 (shen.lazyderef (tl W4653) V4593) (if (cons? W4655) (let W4656 (hd W4655) (let W4657 (shen.lazyderef (tl W4655) V4593) (if (cons? W4657) (let W4658 (hd W4657) (let W4659 (shen.lazyderef (tl W4657) V4593) (if (= W4659 ()) (let W4660 (shen.lazyderef V4591 V4593) (let W4661 (lambda Z4662 (lambda Z4663 (do (shen.incinfs) (shen.system-S-h W4656 Z4662 V4592 V4593 V4594 W4597 (freeze (shen.system-S-h W4658 Z4663 V4592 V4593 V4594 W4597 V4596)))))) (if (cons? W4660) (let W4664 (hd W4660) (let W4665 (shen.lazyderef (tl W4660) V4593) (let W4666 (lambda Z4667 ((W4661 W4664) Z4667)) (if (cons? W4665) (let W4668 (shen.lazyderef (hd W4665) V4593) (let W4669 (freeze (let W4670 (shen.lazyderef (tl W4665) V4593) (let W4671 (lambda Z4672 (W4666 Z4672)) (if (cons? W4670) (let W4673 (hd W4670) (let W4674 (shen.lazyderef (tl W4670) V4593) (let W4675 (freeze (W4671 W4673)) (if (= W4674 ()) (thaw W4675) (if (shen.pvar? W4674) (shen.bind! W4674 () V4593 W4675) false))))) (if (shen.pvar? W4670) (let W4676 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4670 (cons W4676 ()) V4593 (freeze (W4671 W4676))))) false))))) (if (= W4668 *) (thaw W4669) (if (shen.pvar? W4668) (shen.bind! W4668 * V4593 W4669) false)))) (if (shen.pvar? W4665) (let W4677 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4665 (cons * (cons W4677 ())) V4593 (freeze (W4666 W4677))))) false))))) (if (shen.pvar? W4660) (let W4678 (shen.newpv V4593) (shen.gc V4593 (let W4679 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4660 (cons W4678 (cons * (cons W4679 ()))) V4593 (freeze ((W4661 W4678) W4679))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W4652 false) (let W4680 (if (shen.unlocked? V4594) (let W4681 (shen.lazyderef V4590 V4593) (if (cons? W4681) (let W4682 (shen.lazyderef (hd W4681) V4593) (if (= W4682 @v) (let W4683 (shen.lazyderef (tl W4681) V4593) (if (cons? W4683) (let W4684 (hd W4683) (let W4685 (shen.lazyderef (tl W4683) V4593) (if (cons? W4685) (let W4686 (hd W4685) (let W4687 (shen.lazyderef (tl W4685) V4593) (if (= W4687 ()) (let W4688 (shen.lazyderef V4591 V4593) (let W4689 (lambda Z4690 (do (shen.incinfs) (shen.system-S-h W4684 Z4690 V4592 V4593 V4594 W4597 (freeze (shen.system-S-h W4686 (cons vector (cons Z4690 ())) V4592 V4593 V4594 W4597 V4596))))) (if (cons? W4688) (let W4691 (shen.lazyderef (hd W4688) V4593) (let W4692 (freeze (let W4693 (shen.lazyderef (tl W4688) V4593) (let W4694 (lambda Z4695 (W4689 Z4695)) (if (cons? W4693) (let W4696 (hd W4693) (let W4697 (shen.lazyderef (tl W4693) V4593) (let W4698 (freeze (W4694 W4696)) (if (= W4697 ()) (thaw W4698) (if (shen.pvar? W4697) (shen.bind! W4697 () V4593 W4698) false))))) (if (shen.pvar? W4693) (let W4699 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4693 (cons W4699 ()) V4593 (freeze (W4694 W4699))))) false))))) (if (= W4691 vector) (thaw W4692) (if (shen.pvar? W4691) (shen.bind! W4691 vector V4593 W4692) false)))) (if (shen.pvar? W4688) (let W4700 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4688 (cons vector (cons W4700 ())) V4593 (freeze (W4689 W4700))))) false)))) false))) false))) false)) false)) false)) false) (if (= W4680 false) (let W4701 (if (shen.unlocked? V4594) (let W4702 (shen.lazyderef V4590 V4593) (if (cons? W4702) (let W4703 (shen.lazyderef (hd W4702) V4593) (if (= W4703 @s) (let W4704 (shen.lazyderef (tl W4702) V4593) (if (cons? W4704) (let W4705 (hd W4704) (let W4706 (shen.lazyderef (tl W4704) V4593) (if (cons? W4706) (let W4707 (hd W4706) (let W4708 (shen.lazyderef (tl W4706) V4593) (if (= W4708 ()) (let W4709 (shen.lazyderef V4591 V4593) (let W4710 (freeze (do (shen.incinfs) (shen.system-S-h W4705 string V4592 V4593 V4594 W4597 (freeze (shen.system-S-h W4707 string V4592 V4593 V4594 W4597 V4596))))) (if (= W4709 string) (thaw W4710) (if (shen.pvar? W4709) (shen.bind! W4709 string V4593 W4710) false)))) false))) false))) false)) false)) false)) false) (if (= W4701 false) (let W4711 (if (shen.unlocked? V4594) (let W4712 (shen.lazyderef V4590 V4593) (if (cons? W4712) (let W4713 (shen.lazyderef (hd W4712) V4593) (if (= W4713 lambda) (let W4714 (shen.lazyderef (tl W4712) V4593) (if (cons? W4714) (let W4715 (hd W4714) (let W4716 (shen.lazyderef (tl W4714) V4593) (if (cons? W4716) (let W4717 (hd W4716) (let W4718 (shen.lazyderef (tl W4716) V4593) (if (= W4718 ()) (let W4719 (shen.lazyderef V4591 V4593) (let W4720 (lambda Z4721 (lambda Z4722 (let W4723 (shen.newpv V4593) (shen.gc V4593 (let W4724 (shen.newpv V4593) (shen.gc V4593 (do (shen.incinfs) (bind W4724 (shen.freshterm (shen.lazyderef W4715 V4593)) V4593 V4594 W4597 (freeze (bind W4723 (shen.beta (shen.lazyderef W4715 V4593) (shen.deref W4724 V4593) (shen.deref W4717 V4593)) V4593 V4594 W4597 (freeze (shen.system-S-h W4723 Z4722 (cons (cons W4724 (cons (intern ":") (cons Z4721 ()))) V4592) V4593 V4594 W4597 V4596)))))))))))) (if (cons? W4719) (let W4725 (hd W4719) (let W4726 (shen.lazyderef (tl W4719) V4593) (let W4727 (lambda Z4728 ((W4720 W4725) Z4728)) (if (cons? W4726) (let W4729 (shen.lazyderef (hd W4726) V4593) (let W4730 (freeze (let W4731 (shen.lazyderef (tl W4726) V4593) (let W4732 (lambda Z4733 (W4727 Z4733)) (if (cons? W4731) (let W4734 (hd W4731) (let W4735 (shen.lazyderef (tl W4731) V4593) (let W4736 (freeze (W4732 W4734)) (if (= W4735 ()) (thaw W4736) (if (shen.pvar? W4735) (shen.bind! W4735 () V4593 W4736) false))))) (if (shen.pvar? W4731) (let W4737 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4731 (cons W4737 ()) V4593 (freeze (W4732 W4737))))) false))))) (if (= W4729 -->) (thaw W4730) (if (shen.pvar? W4729) (shen.bind! W4729 --> V4593 W4730) false)))) (if (shen.pvar? W4726) (let W4738 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4726 (cons --> (cons W4738 ())) V4593 (freeze (W4727 W4738))))) false))))) (if (shen.pvar? W4719) (let W4739 (shen.newpv V4593) (shen.gc V4593 (let W4740 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4719 (cons W4739 (cons --> (cons W4740 ()))) V4593 (freeze ((W4720 W4739) W4740))))))) false)))) false))) false))) false)) false)) false)) false) (if (= W4711 false) (let W4741 (if (shen.unlocked? V4594) (let W4742 (shen.lazyderef V4590 V4593) (if (cons? W4742) (let W4743 (shen.lazyderef (hd W4742) V4593) (if (= W4743 let) (let W4744 (shen.lazyderef (tl W4742) V4593) (if (cons? W4744) (let W4745 (hd W4744) (let W4746 (shen.lazyderef (tl W4744) V4593) (if (cons? W4746) (let W4747 (hd W4746) (let W4748 (shen.lazyderef (tl W4746) V4593) (if (cons? W4748) (let W4749 (hd W4748) (let W4750 (shen.lazyderef (tl W4748) V4593) (if (= W4750 ()) (let W4751 (shen.newpv V4593) (shen.gc V4593 (let W4752 (shen.newpv V4593) (shen.gc V4593 (let W4753 (shen.newpv V4593) (shen.gc V4593 (do (shen.incinfs) (shen.system-S-h W4747 W4753 V4592 V4593 V4594 W4597 (freeze (bind W4752 (shen.freshterm (shen.lazyderef W4745 V4593)) V4593 V4594 W4597 (freeze (bind W4751 (shen.beta (shen.lazyderef W4745 V4593) (shen.lazyderef W4752 V4593) (shen.lazyderef W4749 V4593)) V4593 V4594 W4597 (freeze (shen.system-S-h W4751 V4591 (cons (cons W4752 (cons (intern ":") (cons W4753 ()))) V4592) V4593 V4594 W4597 V4596)))))))))))))) false))) false))) false))) false)) false)) false)) false) (if (= W4741 false) (let W4754 (if (shen.unlocked? V4594) (let W4755 (shen.lazyderef V4590 V4593) (if (cons? W4755) (let W4756 (shen.lazyderef (hd W4755) V4593) (if (= W4756 open) (let W4757 (shen.lazyderef (tl W4755) V4593) (if (cons? W4757) (let W4758 (hd W4757) (let W4759 (shen.lazyderef (tl W4757) V4593) (if (cons? W4759) (let W4760 (hd W4759) (let W4761 (shen.lazyderef (tl W4759) V4593) (if (= W4761 ()) (let W4762 (shen.lazyderef V4591 V4593) (let W4763 (lambda Z4764 (do (shen.incinfs) (is! W4760 Z4764 V4593 V4594 W4597 (freeze (when (element? (shen.lazyderef Z4764 V4593) (cons in (cons out ()))) V4593 V4594 W4597 (freeze (shen.system-S-h W4758 string V4592 V4593 V4594 W4597 V4596))))))) (if (cons? W4762) (let W4765 (shen.lazyderef (hd W4762) V4593) (let W4766 (freeze (let W4767 (shen.lazyderef (tl W4762) V4593) (let W4768 (lambda Z4769 (W4763 Z4769)) (if (cons? W4767) (let W4770 (hd W4767) (let W4771 (shen.lazyderef (tl W4767) V4593) (let W4772 (freeze (W4768 W4770)) (if (= W4771 ()) (thaw W4772) (if (shen.pvar? W4771) (shen.bind! W4771 () V4593 W4772) false))))) (if (shen.pvar? W4767) (let W4773 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4767 (cons W4773 ()) V4593 (freeze (W4768 W4773))))) false))))) (if (= W4765 stream) (thaw W4766) (if (shen.pvar? W4765) (shen.bind! W4765 stream V4593 W4766) false)))) (if (shen.pvar? W4762) (let W4774 (shen.newpv V4593) (shen.gc V4593 (shen.bind! W4762 (cons stream (cons W4774 ())) V4593 (freeze (W4763 W4774))))) false)))) false))) false))) false)) false)) false)) false) (if (= W4754 false) (let W4775 (if (shen.unlocked? V4594) (let W4776 (shen.lazyderef V4590 V4593) (if (cons? W4776) (let W4777 (shen.lazyderef (hd W4776) V4593) (if (= W4777 type) (let W4778 (shen.lazyderef (tl W4776) V4593) (if (cons? W4778) (let W4779 (hd W4778) (let W4780 (shen.lazyderef (tl W4778) V4593) (if (cons? W4780) (let W4781 (hd W4780) (let W4782 (shen.lazyderef (tl W4780) V4593) (if (= W4782 ()) (do (shen.incinfs) (shen.cut V4593 V4594 W4597 (freeze (is! (shen.rectify-type (shen.deref W4781 V4593)) V4591 V4593 V4594 W4597 (freeze (shen.system-S-h W4779 V4591 V4592 V4593 V4594 W4597 V4596)))))) false))) false))) false)) false)) false)) false) (if (= W4775 false) (let W4783 (if (shen.unlocked? V4594) (let W4784 (shen.lazyderef V4590 V4593) (if (cons? W4784) (let W4785 (shen.lazyderef (hd W4784) V4593) (if (= W4785 input+) (let W4786 (shen.lazyderef (tl W4784) V4593) (if (cons? W4786) (let W4787 (hd W4786) (let W4788 (shen.lazyderef (tl W4786) V4593) (if (cons? W4788) (let W4789 (hd W4788) (let W4790 (shen.lazyderef (tl W4788) V4593) (if (= W4790 ()) (do (shen.incinfs) (is! V4591 (shen.rectify-type (shen.deref W4787 V4593)) V4593 V4594 W4597 (freeze (shen.system-S-h W4789 (cons stream (cons in ())) V4592 V4593 V4594 W4597 V4596)))) false))) false))) false)) false)) false)) false) (if (= W4783 false) (let W4791 (if (shen.unlocked? V4594) (let W4792 (shen.lazyderef V4590 V4593) (if (cons? W4792) (let W4793 (shen.lazyderef (hd W4792) V4593) (if (= W4793 set) (let W4794 (shen.lazyderef (tl W4792) V4593) (if (cons? W4794) (let W4795 (hd W4794) (let W4796 (shen.lazyderef (tl W4794) V4593) (if (cons? W4796) (let W4797 (hd W4796) (let W4798 (shen.lazyderef (tl W4796) V4593) (if (= W4798 ()) (do (shen.incinfs) (shen.system-S-h W4795 symbol V4592 V4593 V4594 W4597 (freeze (shen.system-S-h (cons value (cons W4795 ())) V4591 V4592 V4593 V4594 W4597 (freeze (shen.system-S-h W4797 V4591 V4592 V4593 V4594 W4597 V4596)))))) false))) false))) false)) false)) false)) false) (if (= W4791 false) (let W4799 (if (shen.unlocked? V4594) (let W4800 (shen.newpv V4593) (shen.gc V4593 (do (shen.incinfs) (shen.l-rules V4592 W4800 false V4593 V4594 W4597 (freeze (shen.cut V4593 V4594 W4597 (freeze (shen.system-S-h V4590 V4591 W4800 V4593 V4594 W4597 V4596)))))))) false) (if (= W4799 false) (let W4801 (if (shen.unlocked? V4594) (do (shen.incinfs) (shen.search-user-datatypes (cons V4590 (cons (intern ":") (cons V4591 ()))) V4592 (value shen.*datatypes*) V4593 V4594 W4597 V4596)) false) (if (= W4801 false) (shen.unlock V4594 W4597) W4801)) W4799)) W4791)) W4783)) W4775)) W4754)) W4741)) W4711)) W4701)) W4680)) W4652)) W4631)) W4624)) W4617)) W4611)) W4605)) W4601)) W4600)) W4599)) W4598))))

(defun shen.primitive (V4802 V4803 V4804 V4805 V4806 V4807) (let W4808 (if (shen.unlocked? V4805) (let W4809 (shen.lazyderef V4803 V4804) (let W4810 (freeze (do (shen.incinfs) (when (number? (shen.lazyderef V4802 V4804)) V4804 V4805 V4806 V4807))) (if (= W4809 number) (thaw W4810) (if (shen.pvar? W4809) (shen.bind! W4809 number V4804 W4810) false)))) false) (if (= W4808 false) (let W4811 (if (shen.unlocked? V4805) (let W4812 (shen.lazyderef V4803 V4804) (let W4813 (freeze (do (shen.incinfs) (when (boolean? (shen.lazyderef V4802 V4804)) V4804 V4805 V4806 V4807))) (if (= W4812 boolean) (thaw W4813) (if (shen.pvar? W4812) (shen.bind! W4812 boolean V4804 W4813) false)))) false) (if (= W4811 false) (let W4814 (if (shen.unlocked? V4805) (let W4815 (shen.lazyderef V4803 V4804) (let W4816 (freeze (do (shen.incinfs) (when (string? (shen.lazyderef V4802 V4804)) V4804 V4805 V4806 V4807))) (if (= W4815 string) (thaw W4816) (if (shen.pvar? W4815) (shen.bind! W4815 string V4804 W4816) false)))) false) (if (= W4814 false) (let W4817 (if (shen.unlocked? V4805) (let W4818 (shen.lazyderef V4803 V4804) (let W4819 (freeze (do (shen.incinfs) (when (symbol? (shen.lazyderef V4802 V4804)) V4804 V4805 V4806 V4807))) (if (= W4818 symbol) (thaw W4819) (if (shen.pvar? W4818) (shen.bind! W4818 symbol V4804 W4819) false)))) false) (if (= W4817 false) (if (shen.unlocked? V4805) (let W4820 (shen.lazyderef V4802 V4804) (if (= W4820 ()) (let W4821 (shen.lazyderef V4803 V4804) (let W4822 (lambda Z4823 (do (shen.incinfs) (thaw V4807))) (if (cons? W4821) (let W4824 (shen.lazyderef (hd W4821) V4804) (let W4825 (freeze (let W4826 (shen.lazyderef (tl W4821) V4804) (let W4827 (lambda Z4828 (W4822 Z4828)) (if (cons? W4826) (let W4829 (hd W4826) (let W4830 (shen.lazyderef (tl W4826) V4804) (let W4831 (freeze (W4827 W4829)) (if (= W4830 ()) (thaw W4831) (if (shen.pvar? W4830) (shen.bind! W4830 () V4804 W4831) false))))) (if (shen.pvar? W4826) (let W4832 (shen.newpv V4804) (shen.gc V4804 (shen.bind! W4826 (cons W4832 ()) V4804 (freeze (W4827 W4832))))) false))))) (if (= W4824 list) (thaw W4825) (if (shen.pvar? W4824) (shen.bind! W4824 list V4804 W4825) false)))) (if (shen.pvar? W4821) (let W4833 (shen.newpv V4804) (shen.gc V4804 (shen.bind! W4821 (cons list (cons W4833 ())) V4804 (freeze (W4822 W4833))))) false)))) false)) false) W4817)) W4814)) W4811)) W4808)))

(defun shen.by-hypothesis (V4834 V4835 V4836 V4837 V4838 V4839 V4840) (let W4841 (if (shen.unlocked? V4838) (let W4842 (shen.lazyderef V4836 V4837) (if (cons? W4842) (let W4843 (shen.lazyderef (hd W4842) V4837) (if (cons? W4843) (let W4844 (hd W4843) (let W4845 (shen.lazyderef (tl W4843) V4837) (if (cons? W4845) (let W4846 (hd W4845) (let W4847 (shen.lazyderef (tl W4845) V4837) (if (cons? W4847) (let W4848 (hd W4847) (let W4849 (shen.lazyderef (tl W4847) V4837) (if (= W4849 ()) (do (shen.incinfs) (when (= (shen.deref W4846 V4837) (intern ":")) V4837 V4838 V4839 (freeze (when (= (shen.deref V4834 V4837) (shen.deref W4844 V4837)) V4837 V4838 V4839 (freeze (is! V4835 W4848 V4837 V4838 V4839 V4840)))))) false))) false))) false))) false)) false)) false) (if (= W4841 false) (if (shen.unlocked? V4838) (let W4850 (shen.lazyderef V4836 V4837) (if (cons? W4850) (let W4851 (tl W4850) (do (shen.incinfs) (shen.by-hypothesis V4834 V4835 W4851 V4837 V4838 V4839 V4840))) false)) false) W4841)))

(defun shen.lookupsig (V4852 V4853 V4854 V4855 V4856 V4857) (if (shen.unlocked? V4855) (do (shen.incinfs) (shen.sigf (assoc V4852 (value shen.*sigf*)) V4853 V4854 V4855 V4856 V4857)) false))

(defun shen.sigf (V4872 V4873 V4874 V4875 V4876 V4877) (cond ((cons? V4872) ((((((tl V4872) V4873) V4874) V4875) V4876) V4877)) (true false)))

(defun shen.freshterm (V4878) (let W4879 (absvector 3) (let W4880 (address-> W4879 0 shen.print-freshterm) (let W4881 (address-> W4880 1 V4878) (let W4882 (address-> W4881 2 (set shen.*gensym* (+ 1 (value shen.*gensym*)))) W4882)))))

(defun shen.print-freshterm (V4883) (cn "&&" (str (<-address V4883 1))))

(defun shen.search-user-datatypes (V4884 V4885 V4886 V4887 V4888 V4889 V4890) (let W4891 (if (shen.unlocked? V4888) (let W4892 (shen.lazyderef V4886 V4887) (if (cons? W4892) (let W4893 (shen.lazyderef (hd W4892) V4887) (if (cons? W4893) (let W4894 (tl W4893) (do (shen.incinfs) (call (((shen.deref W4894 V4887) (shen.deref V4884 V4887)) (shen.deref V4885 V4887)) V4887 V4888 V4889 V4890))) false)) false)) false) (if (= W4891 false) (if (shen.unlocked? V4888) (let W4895 (shen.lazyderef V4886 V4887) (if (cons? W4895) (let W4896 (tl W4895) (do (shen.incinfs) (shen.search-user-datatypes V4884 V4885 W4896 V4887 V4888 V4889 V4890))) false)) false) W4891)))

(defun shen.l-rules (V4897 V4898 V4899 V4900 V4901 V4902 V4903) (let W4904 (+ V4902 1) (let W4905 (if (shen.unlocked? V4901) (let W4906 (shen.lazyderef V4897 V4900) (if (= W4906 ()) (let W4907 (shen.lazyderef V4899 V4900) (if (= W4907 true) (do (shen.incinfs) (shen.cut V4900 V4901 W4904 (freeze (bind V4898 () V4900 V4901 W4904 V4903)))) false)) false)) false) (if (= W4905 false) (let W4908 (if (shen.unlocked? V4901) (let W4909 (shen.lazyderef V4897 V4900) (if (cons? W4909) (let W4910 (shen.lazyderef (hd W4909) V4900) (if (cons? W4910) (let W4911 (shen.lazyderef (hd W4910) V4900) (if (cons? W4911) (let W4912 (shen.lazyderef (hd W4911) V4900) (if (= W4912 cons) (let W4913 (shen.lazyderef (tl W4911) V4900) (if (cons? W4913) (let W4914 (hd W4913) (let W4915 (shen.lazyderef (tl W4913) V4900) (if (cons? W4915) (let W4916 (hd W4915) (let W4917 (shen.lazyderef (tl W4915) V4900) (if (= W4917 ()) (let W4918 (shen.lazyderef (tl W4910) V4900) (if (cons? W4918) (let W4919 (hd W4918) (let W4920 (shen.lazyderef (tl W4918) V4900) (if (cons? W4920) (let W4921 (shen.lazyderef (hd W4920) V4900) (if (cons? W4921) (let W4922 (shen.lazyderef (hd W4921) V4900) (if (= W4922 list) (let W4923 (shen.lazyderef (tl W4921) V4900) (if (cons? W4923) (let W4924 (hd W4923) (let W4925 (shen.lazyderef (tl W4923) V4900) (if (= W4925 ()) (let W4926 (shen.lazyderef (tl W4920) V4900) (if (= W4926 ()) (let W4927 (tl W4909) (do (shen.incinfs) (when (= (shen.deref W4919 V4900) (intern ":")) V4900 V4901 W4904 (freeze (shen.cut V4900 V4901 W4904 (freeze (shen.l-rules (cons (cons W4914 (cons W4919 (cons W4924 ()))) (cons (cons W4916 (cons W4919 (cons (cons list (cons W4924 ())) ()))) W4927)) V4898 true V4900 V4901 W4904 V4903))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W4908 false) (let W4928 (if (shen.unlocked? V4901) (let W4929 (shen.lazyderef V4897 V4900) (if (cons? W4929) (let W4930 (shen.lazyderef (hd W4929) V4900) (if (cons? W4930) (let W4931 (shen.lazyderef (hd W4930) V4900) (if (cons? W4931) (let W4932 (shen.lazyderef (hd W4931) V4900) (if (= W4932 @p) (let W4933 (shen.lazyderef (tl W4931) V4900) (if (cons? W4933) (let W4934 (hd W4933) (let W4935 (shen.lazyderef (tl W4933) V4900) (if (cons? W4935) (let W4936 (hd W4935) (let W4937 (shen.lazyderef (tl W4935) V4900) (if (= W4937 ()) (let W4938 (shen.lazyderef (tl W4930) V4900) (if (cons? W4938) (let W4939 (hd W4938) (let W4940 (shen.lazyderef (tl W4938) V4900) (if (cons? W4940) (let W4941 (shen.lazyderef (hd W4940) V4900) (if (cons? W4941) (let W4942 (hd W4941) (let W4943 (shen.lazyderef (tl W4941) V4900) (if (cons? W4943) (let W4944 (shen.lazyderef (hd W4943) V4900) (if (= W4944 *) (let W4945 (shen.lazyderef (tl W4943) V4900) (if (cons? W4945) (let W4946 (hd W4945) (let W4947 (shen.lazyderef (tl W4945) V4900) (if (= W4947 ()) (let W4948 (shen.lazyderef (tl W4940) V4900) (if (= W4948 ()) (let W4949 (tl W4929) (do (shen.incinfs) (when (= (shen.deref W4939 V4900) (intern ":")) V4900 V4901 W4904 (freeze (shen.cut V4900 V4901 W4904 (freeze (shen.l-rules (cons (cons W4934 (cons W4939 (cons W4942 ()))) (cons (cons W4936 (cons W4939 (cons W4946 ()))) W4949)) V4898 true V4900 V4901 W4904 V4903))))))) false)) false))) false)) false)) false))) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W4928 false) (let W4950 (if (shen.unlocked? V4901) (let W4951 (shen.lazyderef V4897 V4900) (if (cons? W4951) (let W4952 (shen.lazyderef (hd W4951) V4900) (if (cons? W4952) (let W4953 (shen.lazyderef (hd W4952) V4900) (if (cons? W4953) (let W4954 (shen.lazyderef (hd W4953) V4900) (if (= W4954 @s) (let W4955 (shen.lazyderef (tl W4953) V4900) (if (cons? W4955) (let W4956 (hd W4955) (let W4957 (shen.lazyderef (tl W4955) V4900) (if (cons? W4957) (let W4958 (hd W4957) (let W4959 (shen.lazyderef (tl W4957) V4900) (if (= W4959 ()) (let W4960 (shen.lazyderef (tl W4952) V4900) (if (cons? W4960) (let W4961 (hd W4960) (let W4962 (shen.lazyderef (tl W4960) V4900) (if (cons? W4962) (let W4963 (shen.lazyderef (hd W4962) V4900) (if (= W4963 string) (let W4964 (shen.lazyderef (tl W4962) V4900) (if (= W4964 ()) (let W4965 (tl W4951) (do (shen.incinfs) (when (= (shen.deref W4961 V4900) (intern ":")) V4900 V4901 W4904 (freeze (shen.cut V4900 V4901 W4904 (freeze (shen.l-rules (cons (cons W4956 (cons W4961 (cons string ()))) (cons (cons W4958 (cons W4961 (cons string ()))) W4965)) V4898 true V4900 V4901 W4904 V4903))))))) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W4950 false) (let W4966 (if (shen.unlocked? V4901) (let W4967 (shen.lazyderef V4897 V4900) (if (cons? W4967) (let W4968 (shen.lazyderef (hd W4967) V4900) (if (cons? W4968) (let W4969 (shen.lazyderef (hd W4968) V4900) (if (cons? W4969) (let W4970 (shen.lazyderef (hd W4969) V4900) (if (= W4970 @v) (let W4971 (shen.lazyderef (tl W4969) V4900) (if (cons? W4971) (let W4972 (hd W4971) (let W4973 (shen.lazyderef (tl W4971) V4900) (if (cons? W4973) (let W4974 (hd W4973) (let W4975 (shen.lazyderef (tl W4973) V4900) (if (= W4975 ()) (let W4976 (shen.lazyderef (tl W4968) V4900) (if (cons? W4976) (let W4977 (hd W4976) (let W4978 (shen.lazyderef (tl W4976) V4900) (if (cons? W4978) (let W4979 (shen.lazyderef (hd W4978) V4900) (if (cons? W4979) (let W4980 (shen.lazyderef (hd W4979) V4900) (if (= W4980 vector) (let W4981 (shen.lazyderef (tl W4979) V4900) (if (cons? W4981) (let W4982 (hd W4981) (let W4983 (shen.lazyderef (tl W4981) V4900) (if (= W4983 ()) (let W4984 (shen.lazyderef (tl W4978) V4900) (if (= W4984 ()) (let W4985 (tl W4967) (do (shen.incinfs) (when (= (shen.deref W4977 V4900) (intern ":")) V4900 V4901 W4904 (freeze (shen.cut V4900 V4901 W4904 (freeze (shen.l-rules (cons (cons W4972 (cons W4977 (cons W4982 ()))) (cons (cons W4974 (cons W4977 (cons (cons vector (cons W4982 ())) ()))) W4985)) V4898 true V4900 V4901 W4904 V4903))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= W4966 false) (let W4986 (if (shen.unlocked? V4901) (let W4987 (shen.lazyderef V4897 V4900) (if (cons? W4987) (let W4988 (hd W4987) (let W4989 (tl W4987) (let W4990 (shen.lazyderef V4898 V4900) (let W4991 (lambda Z4992 (lambda Z4993 (do (shen.incinfs) (bind Z4992 W4988 V4900 V4901 W4904 (freeze (shen.l-rules W4989 Z4993 V4899 V4900 V4901 W4904 V4903)))))) (if (cons? W4990) (let W4994 (hd W4990) (let W4995 (tl W4990) ((W4991 W4994) W4995))) (if (shen.pvar? W4990) (let W4996 (shen.newpv V4900) (shen.gc V4900 (let W4997 (shen.newpv V4900) (shen.gc V4900 (shen.bind! W4990 (cons W4996 W4997) V4900 (freeze ((W4991 W4996) W4997))))))) false)))))) false)) false) (if (= W4986 false) (shen.unlock V4901 W4904) W4986)) W4966)) W4950)) W4928)) W4908)) W4905))))

(defun shen.t* (V4998 V4999 V5000 V5001 V5002 V5003) (let W5004 (+ V5002 1) (let W5005 (if (shen.unlocked? V5001) (let W5006 (shen.lazyderef V4998 V5000) (if (cons? W5006) (let W5007 (shen.lazyderef (hd W5006) V5000) (if (= W5007 define) (let W5008 (shen.lazyderef (tl W5006) V5000) (if (cons? W5008) (let W5009 (hd W5008) (let W5010 (tl W5008) (let W5011 (shen.newpv V5000) (shen.gc V5000 (let W5012 (shen.newpv V5000) (shen.gc V5000 (let W5013 (shen.newpv V5000) (shen.gc V5000 (let W5014 (shen.newpv V5000) (shen.gc V5000 (do (shen.incinfs) (shen.cut V5000 V5001 W5004 (freeze (bind W5011 (shen.sigxrules (cons W5009 W5010)) V5000 V5001 W5004 (freeze (bind W5014 (fst (shen.lazyderef W5011 V5000)) V5000 V5001 W5004 (freeze (bind W5012 (snd (shen.lazyderef W5011 V5000)) V5000 V5001 W5004 (freeze (bind W5013 (shen.freshen-sig (shen.deref W5014 V5000)) V5000 V5001 W5004 (freeze (shen.t*-rules W5009 W5012 W5013 1 V5000 V5001 W5004 (freeze (is W5014 V4999 V5000 V5001 W5004 V5003)))))))))))))))))))))))) false)) false)) false)) false) (if (= W5005 false) (shen.unlock V5001 W5004) W5005))))

(defun shen.sigxrules (V5015) (compile (lambda Z5016 (shen.<sig*rules> Z5016)) V5015))

(defun shen.<sig*rules> (V5017) (let W5018 (if (cons? V5017) (let W5019 (tail V5017) (if (shen.hds=? W5019 {) (let W5020 (tail W5019) (let W5021 (shen.<signature> W5020) (if (shen.parse-failure? W5021) (shen.parse-failure) (let W5022 (shen.<-out W5021) (let W5023 (shen.in-> W5021) (if (shen.hds=? W5023 }) (let W5024 (tail W5023) (let W5025 (shen.<rules*> W5024) (if (shen.parse-failure? W5025) (shen.parse-failure) (let W5026 (shen.<-out W5025) (let W5027 (shen.in-> W5025) (shen.comb W5027 (let W5028 (shen.rectify-type W5022) (@p W5028 W5026)))))))) (shen.parse-failure))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? W5018) (shen.parse-failure) W5018)))

(defun shen.freshen-sig (V5029) (let W5030 (shen.extract-vars V5029) (let W5031 (map (lambda Z5032 (cons Z5032 (shen.freshterm (concat & Z5032)))) W5030) (shen.freshen-type W5031 V5029))))

(defun shen.freshen-type (V5033 V5034) (cond ((= () V5033) V5034) ((and (cons? V5033) (cons? (hd V5033))) (shen.freshen-type (tl V5033) (subst (tl (hd V5033)) (hd (hd V5033)) V5034))) (true (simple-error "partial function shen.freshen-type"))))

(defun shen.<rules*> (V5035) (let W5036 (let W5037 (shen.<rule*> V5035) (if (shen.parse-failure? W5037) (shen.parse-failure) (let W5038 (shen.<-out W5037) (let W5039 (shen.in-> W5037) (let W5040 (shen.<rules*> W5039) (if (shen.parse-failure? W5040) (shen.parse-failure) (let W5041 (shen.<-out W5040) (let W5042 (shen.in-> W5040) (shen.comb W5042 (cons W5038 W5041)))))))))) (if (shen.parse-failure? W5036) (let W5043 (let W5044 (shen.<rule*> V5035) (if (shen.parse-failure? W5044) (shen.parse-failure) (let W5045 (shen.<-out W5044) (let W5046 (shen.in-> W5044) (shen.comb W5046 (cons W5045 ())))))) (if (shen.parse-failure? W5043) (shen.parse-failure) W5043)) W5036)))

(defun shen.<rule*> (V5047) (let W5048 (let W5049 (shen.<patterns> V5047) (if (shen.parse-failure? W5049) (shen.parse-failure) (let W5050 (shen.<-out W5049) (let W5051 (shen.in-> W5049) (if (shen.hds=? W5051 ->) (let W5052 (tail W5051) (if (cons? W5052) (let W5053 (head W5052) (let W5054 (tail W5052) (if (shen.hds=? W5054 where) (let W5055 (tail W5054) (if (cons? W5055) (let W5056 (head W5055) (let W5057 (tail W5055) (shen.comb W5057 (@p W5050 (cons where (cons W5056 (cons W5053 ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5048) (let W5058 (let W5059 (shen.<patterns> V5047) (if (shen.parse-failure? W5059) (shen.parse-failure) (let W5060 (shen.<-out W5059) (let W5061 (shen.in-> W5059) (if (shen.hds=? W5061 <-) (let W5062 (tail W5061) (if (cons? W5062) (let W5063 (head W5062) (let W5064 (tail W5062) (if (shen.hds=? W5064 where) (let W5065 (tail W5064) (if (cons? W5065) (let W5066 (head W5065) (let W5067 (tail W5065) (shen.comb W5067 (@p W5060 (shen.correct (cons where (cons W5066 (cons W5063 ())))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5058) (let W5068 (let W5069 (shen.<patterns> V5047) (if (shen.parse-failure? W5069) (shen.parse-failure) (let W5070 (shen.<-out W5069) (let W5071 (shen.in-> W5069) (if (shen.hds=? W5071 <-) (let W5072 (tail W5071) (if (cons? W5072) (let W5073 (head W5072) (let W5074 (tail W5072) (shen.comb W5074 (@p W5070 (shen.correct W5073))))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5068) (let W5075 (let W5076 (shen.<patterns> V5047) (if (shen.parse-failure? W5076) (shen.parse-failure) (let W5077 (shen.<-out W5076) (let W5078 (shen.in-> W5076) (if (shen.hds=? W5078 ->) (let W5079 (tail W5078) (if (cons? W5079) (let W5080 (head W5079) (let W5081 (tail W5079) (shen.comb W5081 (@p W5077 W5080)))) (shen.parse-failure))) (shen.parse-failure)))))) (if (shen.parse-failure? W5075) (shen.parse-failure) W5075)) W5068)) W5058)) W5048)))

(defun shen.correct (V5082) (cond ((and (cons? V5082) (and (= where (hd V5082)) (and (cons? (tl V5082)) (and (cons? (tl (tl V5082))) (and (cons? (hd (tl (tl V5082)))) (and (= fail-if (hd (hd (tl (tl V5082))))) (and (cons? (tl (hd (tl (tl V5082))))) (and (cons? (tl (tl (hd (tl (tl V5082)))))) (and (= () (tl (tl (tl (hd (tl (tl V5082))))))) (= () (tl (tl (tl V5082))))))))))))) (cons where (cons (cons and (cons (hd (tl V5082)) (cons (cons not (cons (tl (hd (tl (tl V5082)))) ())) ()))) (tl (tl (hd (tl (tl V5082)))))))) ((and (cons? V5082) (and (= where (hd V5082)) (and (cons? (tl V5082)) (and (cons? (tl (tl V5082))) (= () (tl (tl (tl V5082)))))))) (cons where (cons (cons and (cons (hd (tl V5082)) (cons (cons not (cons (cons = (cons (hd (tl (tl V5082))) (cons (cons fail ()) ()))) ())) ()))) (tl (tl V5082))))) ((and (cons? V5082) (and (= fail-if (hd V5082)) (and (cons? (tl V5082)) (and (cons? (tl (tl V5082))) (= () (tl (tl (tl V5082)))))))) (cons where (cons (cons not (cons (tl V5082) ())) (tl (tl V5082))))) (true (cons where (cons (cons not (cons (cons = (cons V5082 (cons (cons fail ()) ()))) ())) (cons V5082 ()))))))

(defun shen.t*-rules (V5083 V5084 V5085 V5086 V5087 V5088 V5089 V5090) (let W5091 (+ V5089 1) (let W5092 (if (shen.unlocked? V5088) (let W5093 (shen.lazyderef V5084 V5087) (if (= W5093 ()) (do (shen.incinfs) (thaw V5090)) false)) false) (if (= W5092 false) (let W5094 (if (shen.unlocked? V5088) (let W5095 (shen.lazyderef V5084 V5087) (if (cons? W5095) (let W5096 (hd W5095) (let W5097 (tl W5095) (let W5098 (shen.newpv V5087) (shen.gc V5087 (do (shen.incinfs) (bind W5098 (shen.freshen-rule (shen.deref W5096 V5087)) V5087 V5088 W5091 (freeze (shen.t*-rule V5083 V5086 (fst (shen.lazyderef W5098 V5087)) (snd (shen.lazyderef W5098 V5087)) V5085 V5087 V5088 W5091 (freeze (shen.cut V5087 V5088 W5091 (freeze (shen.t*-rules V5083 W5097 V5085 (+ V5086 1) V5087 V5088 W5091 V5090)))))))))))) false)) false) (if (= W5094 false) (shen.unlock V5088 W5091) W5094)) W5092))))

(defun shen.freshen-rule (V5099) (cond ((tuple? V5099) (let W5100 (shen.extract-vars (fst V5099)) (let W5101 (map (lambda Z5102 (cons Z5102 (shen.freshterm Z5102))) W5100) (@p (shen.freshen W5101 (fst V5099)) (shen.freshen W5101 (snd V5099)))))) (true (simple-error "partial function shen.freshen-rule"))))

(defun shen.freshen (V5103 V5104) (cond ((= () V5103) V5104) ((and (cons? V5103) (cons? (hd V5103))) (shen.freshen (tl V5103) (shen.beta (hd (hd V5103)) (tl (hd V5103)) V5104))) (true (simple-error "partial function shen.freshen"))))

(defun shen.t*-rule (V5105 V5106 V5107 V5108 V5109 V5110 V5111 V5112 V5113) (let W5114 (if (shen.unlocked? V5111) (do (shen.incinfs) (shen.t*-rule-h V5107 V5108 V5109 V5110 V5111 V5112 V5113)) false) (if (= W5114 false) (if (shen.unlocked? V5111) (let W5115 (shen.newpv V5110) (shen.gc V5110 (do (shen.incinfs) (bind W5115 (simple-error (cn "type error in rule " (shen.app V5106 (cn " of " (shen.app V5105 "
" shen.a)) shen.a))) V5110 V5111 V5112 V5113)))) false) W5114)))

(defun shen.t*-rule-h (V5116 V5117 V5118 V5119 V5120 V5121 V5122) (let W5123 (+ V5121 1) (let W5124 (if (shen.unlocked? V5120) (let W5125 (shen.lazyderef V5116 V5119) (if (= W5125 ()) (let W5126 (shen.lazyderef V5118 V5119) (if (cons? W5126) (let W5127 (shen.lazyderef (hd W5126) V5119) (if (= W5127 -->) (let W5128 (shen.lazyderef (tl W5126) V5119) (if (cons? W5128) (let W5129 (hd W5128) (let W5130 (shen.lazyderef (tl W5128) V5119) (if (= W5130 ()) (do (shen.incinfs) (shen.cut V5119 V5120 W5123 (freeze (shen.t*-correct V5117 W5129 () V5119 V5120 W5123 V5122)))) false))) false)) false)) false)) false)) false) (if (= W5124 false) (let W5131 (if (shen.unlocked? V5120) (let W5132 (shen.newpv V5119) (shen.gc V5119 (let W5133 (shen.newpv V5119) (shen.gc V5119 (let W5134 (shen.newpv V5119) (shen.gc V5119 (do (shen.incinfs) (shen.p-hyps (shen.freshterms V5116) W5132 V5119 V5120 W5123 (freeze (shen.t*-integrity V5116 V5118 W5132 W5133 V5119 V5120 W5123 (freeze (shen.cut V5119 V5120 W5123 (freeze (shen.myassume V5116 V5118 W5134 V5119 V5120 W5123 (freeze (shen.t*-correct V5117 W5133 W5134 V5119 V5120 W5123 V5122)))))))))))))))) false) (if (= W5131 false) (shen.unlock V5120 W5123) W5131)) W5124))))

(defun shen.myassume (V5135 V5136 V5137 V5138 V5139 V5140 V5141) (let W5142 (if (shen.unlocked? V5139) (let W5143 (shen.lazyderef V5135 V5138) (if (= W5143 ()) (let W5144 (shen.lazyderef V5137 V5138) (let W5145 (freeze (do (shen.incinfs) (thaw V5141))) (if (= W5144 ()) (thaw W5145) (if (shen.pvar? W5144) (shen.bind! W5144 () V5138 W5145) false)))) false)) false) (if (= W5142 false) (if (shen.unlocked? V5139) (let W5146 (shen.lazyderef V5135 V5138) (if (cons? W5146) (let W5147 (hd W5146) (let W5148 (tl W5146) (let W5149 (shen.lazyderef V5136 V5138) (if (cons? W5149) (let W5150 (hd W5149) (let W5151 (shen.lazyderef (tl W5149) V5138) (if (cons? W5151) (let W5152 (shen.lazyderef (hd W5151) V5138) (if (= W5152 -->) (let W5153 (shen.lazyderef (tl W5151) V5138) (if (cons? W5153) (let W5154 (hd W5153) (let W5155 (shen.lazyderef (tl W5153) V5138) (if (= W5155 ()) (let W5156 (shen.lazyderef V5137 V5138) (let W5157 (lambda Z5158 (lambda Z5159 (lambda Z5160 (lambda Z5161 (do (shen.incinfs) (is! W5150 Z5160 V5138 V5139 V5140 (freeze (is! W5147 Z5158 V5138 V5139 V5140 (freeze (bind Z5159 (intern ":") V5138 V5139 V5140 (freeze (shen.myassume W5148 W5154 Z5161 V5138 V5139 V5140 V5141)))))))))))) (if (cons? W5156) (let W5162 (shen.lazyderef (hd W5156) V5138) (let W5163 (lambda Z5164 (lambda Z5165 (lambda Z5166 (let W5167 (tl W5156) ((((W5157 Z5164) Z5165) Z5166) W5167))))) (if (cons? W5162) (let W5168 (hd W5162) (let W5169 (shen.lazyderef (tl W5162) V5138) (let W5170 (lambda Z5171 (lambda Z5172 (((W5163 W5168) Z5171) Z5172))) (if (cons? W5169) (let W5173 (hd W5169) (let W5174 (shen.lazyderef (tl W5169) V5138) (let W5175 (lambda Z5176 ((W5170 W5173) Z5176)) (if (cons? W5174) (let W5177 (hd W5174) (let W5178 (shen.lazyderef (tl W5174) V5138) (let W5179 (freeze (W5175 W5177)) (if (= W5178 ()) (thaw W5179) (if (shen.pvar? W5178) (shen.bind! W5178 () V5138 W5179) false))))) (if (shen.pvar? W5174) (let W5180 (shen.newpv V5138) (shen.gc V5138 (shen.bind! W5174 (cons W5180 ()) V5138 (freeze (W5175 W5180))))) false))))) (if (shen.pvar? W5169) (let W5181 (shen.newpv V5138) (shen.gc V5138 (let W5182 (shen.newpv V5138) (shen.gc V5138 (shen.bind! W5169 (cons W5181 (cons W5182 ())) V5138 (freeze ((W5170 W5181) W5182))))))) false))))) (if (shen.pvar? W5162) (let W5183 (shen.newpv V5138) (shen.gc V5138 (let W5184 (shen.newpv V5138) (shen.gc V5138 (let W5185 (shen.newpv V5138) (shen.gc V5138 (shen.bind! W5162 (cons W5183 (cons W5184 (cons W5185 ()))) V5138 (freeze (((W5163 W5183) W5184) W5185))))))))) false)))) (if (shen.pvar? W5156) (let W5186 (shen.newpv V5138) (shen.gc V5138 (let W5187 (shen.newpv V5138) (shen.gc V5138 (let W5188 (shen.newpv V5138) (shen.gc V5138 (let W5189 (shen.newpv V5138) (shen.gc V5138 (shen.bind! W5156 (cons (cons W5186 (cons W5187 (cons W5188 ()))) W5189) V5138 (freeze ((((W5157 W5186) W5187) W5188) W5189))))))))))) false)))) false))) false)) false)) false))) false)))) false)) false) W5142)))

(defun shen.freshterms (V5192) (cond ((= () V5192) ()) ((and (cons? V5192) (cons? (hd V5192))) (shen.freshterms (append (hd V5192) (tl V5192)))) ((and (cons? V5192) (shen.freshterm? (hd V5192))) (adjoin (hd V5192) (shen.freshterms (tl V5192)))) ((cons? V5192) (shen.freshterms (tl V5192))) (true (simple-error "partial function shen.freshterms"))))

(defun shen.p-hyps (V5193 V5194 V5195 V5196 V5197 V5198) (let W5199 (if (shen.unlocked? V5196) (let W5200 (shen.lazyderef V5193 V5195) (if (= W5200 ()) (let W5201 (shen.lazyderef V5194 V5195) (let W5202 (freeze (do (shen.incinfs) (thaw V5198))) (if (= W5201 ()) (thaw W5202) (if (shen.pvar? W5201) (shen.bind! W5201 () V5195 W5202) false)))) false)) false) (if (= W5199 false) (if (shen.unlocked? V5196) (let W5203 (shen.lazyderef V5193 V5195) (if (cons? W5203) (let W5204 (hd W5203) (let W5205 (tl W5203) (let W5206 (shen.lazyderef V5194 V5195) (let W5207 (lambda Z5208 (lambda Z5209 (lambda Z5210 (lambda Z5211 (do (shen.incinfs) (bind Z5208 W5204 V5195 V5196 V5197 (freeze (bind Z5209 (intern ":") V5195 V5196 V5197 (freeze (shen.p-hyps W5205 Z5211 V5195 V5196 V5197 V5198)))))))))) (if (cons? W5206) (let W5212 (shen.lazyderef (hd W5206) V5195) (let W5213 (lambda Z5214 (lambda Z5215 (lambda Z5216 (let W5217 (tl W5206) ((((W5207 Z5214) Z5215) Z5216) W5217))))) (if (cons? W5212) (let W5218 (hd W5212) (let W5219 (shen.lazyderef (tl W5212) V5195) (let W5220 (lambda Z5221 (lambda Z5222 (((W5213 W5218) Z5221) Z5222))) (if (cons? W5219) (let W5223 (hd W5219) (let W5224 (shen.lazyderef (tl W5219) V5195) (let W5225 (lambda Z5226 ((W5220 W5223) Z5226)) (if (cons? W5224) (let W5227 (hd W5224) (let W5228 (shen.lazyderef (tl W5224) V5195) (let W5229 (freeze (W5225 W5227)) (if (= W5228 ()) (thaw W5229) (if (shen.pvar? W5228) (shen.bind! W5228 () V5195 W5229) false))))) (if (shen.pvar? W5224) (let W5230 (shen.newpv V5195) (shen.gc V5195 (shen.bind! W5224 (cons W5230 ()) V5195 (freeze (W5225 W5230))))) false))))) (if (shen.pvar? W5219) (let W5231 (shen.newpv V5195) (shen.gc V5195 (let W5232 (shen.newpv V5195) (shen.gc V5195 (shen.bind! W5219 (cons W5231 (cons W5232 ())) V5195 (freeze ((W5220 W5231) W5232))))))) false))))) (if (shen.pvar? W5212) (let W5233 (shen.newpv V5195) (shen.gc V5195 (let W5234 (shen.newpv V5195) (shen.gc V5195 (let W5235 (shen.newpv V5195) (shen.gc V5195 (shen.bind! W5212 (cons W5233 (cons W5234 (cons W5235 ()))) V5195 (freeze (((W5213 W5233) W5234) W5235))))))))) false)))) (if (shen.pvar? W5206) (let W5236 (shen.newpv V5195) (shen.gc V5195 (let W5237 (shen.newpv V5195) (shen.gc V5195 (let W5238 (shen.newpv V5195) (shen.gc V5195 (let W5239 (shen.newpv V5195) (shen.gc V5195 (shen.bind! W5206 (cons (cons W5236 (cons W5237 (cons W5238 ()))) W5239) V5195 (freeze ((((W5207 W5236) W5237) W5238) W5239))))))))))) false)))))) false)) false) W5199)))

(defun shen.t*-correct (V5240 V5241 V5242 V5243 V5244 V5245 V5246) (let W5247 (+ V5245 1) (let W5248 (if (shen.unlocked? V5244) (let W5249 (shen.lazyderef V5240 V5243) (if (cons? W5249) (let W5250 (shen.lazyderef (hd W5249) V5243) (if (= W5250 where) (let W5251 (shen.lazyderef (tl W5249) V5243) (if (cons? W5251) (let W5252 (hd W5251) (let W5253 (shen.lazyderef (tl W5251) V5243) (if (cons? W5253) (let W5254 (hd W5253) (let W5255 (shen.lazyderef (tl W5253) V5243) (if (= W5255 ()) (let W5256 (shen.newpv V5243) (shen.gc V5243 (do (shen.incinfs) (shen.cut V5243 V5244 W5247 (freeze (bind W5256 (shen.curry W5252) V5243 V5244 W5247 (freeze (shen.system-S-h W5256 boolean V5242 V5243 V5244 W5247 (freeze (shen.cut V5243 V5244 W5247 (freeze (shen.t*-correct W5254 V5241 (cons (cons W5256 (cons (intern ":") (cons verified ()))) V5242) V5243 V5244 W5247 V5246)))))))))))) false))) false))) false)) false)) false)) false) (if (= W5248 false) (let W5257 (if (shen.unlocked? V5244) (do (shen.incinfs) (shen.system-S-h (shen.curry V5240) V5241 V5242 V5243 V5244 W5247 V5246)) false) (if (= W5257 false) (shen.unlock V5244 W5247) W5257)) W5248))))

(defun shen.t*-integrity (V5258 V5259 V5260 V5261 V5262 V5263 V5264 V5265) (let W5266 (if (shen.unlocked? V5263) (let W5267 (shen.lazyderef V5258 V5262) (if (= W5267 ()) (do (shen.incinfs) (is! V5259 V5261 V5262 V5263 V5264 V5265)) false)) false) (if (= W5266 false) (if (shen.unlocked? V5263) (let W5268 (shen.lazyderef V5258 V5262) (if (cons? W5268) (let W5269 (hd W5268) (let W5270 (tl W5268) (let W5271 (shen.lazyderef V5259 V5262) (if (cons? W5271) (let W5272 (hd W5271) (let W5273 (shen.lazyderef (tl W5271) V5262) (if (cons? W5273) (let W5274 (shen.lazyderef (hd W5273) V5262) (if (= W5274 -->) (let W5275 (shen.lazyderef (tl W5273) V5262) (if (cons? W5275) (let W5276 (hd W5275) (let W5277 (shen.lazyderef (tl W5275) V5262) (if (= W5277 ()) (do (shen.incinfs) (shen.system-S-h W5269 W5272 V5260 V5262 V5263 V5264 (freeze (shen.t*-integrity W5270 W5276 V5260 V5261 V5262 V5263 V5264 V5265)))) false))) false)) false)) false))) false)))) false)) false) W5266)))

(defun shen.freshterm? (V5278) (and (absvector? V5278) (and (not (string? V5278)) (= (<-address V5278 0) shen.print-freshterm))))

