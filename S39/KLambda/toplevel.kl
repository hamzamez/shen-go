(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda Z5301 (do (pr (error-to-string Z5301) (stoutput)) (nl 0)))) (shen.loop)))))

(defun shen.credits () (do (pr "
Shen, www.shenlanguage.org, copyright (C) 2010-2024, Mark Tarver
" (stoutput)) (do (pr (cn "version: S" (shen.app (value *version*) (cn ", language: " (shen.app (value *language*) (cn ", platform: " (shen.app (value *implementation*) (cn " " (shen.app (value *release*) "
" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (pr (cn "port " (shen.app (value *port*) (cn ", ported by " (shen.app (value *porters*) "

" shen.a)) shen.a)) (stoutput)))))

(defun shen.initialise_environment () (do (set shen.*call* 0) (set shen.*infs* 0)))

(defun shen.prompt () (if (value shen.*tc*) (pr (cn "
(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (pr (cn "
(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.read-evaluate-print () (let W5302 (value shen.*package*) (let W5303 (shen.package-user-input W5302 (lineread (stinput))) (let W5304 (shen.update-history) (shen.evaluate-lineread W5303 W5304 (value shen.*tc*))))))

(defun shen.package-user-input (V5305 V5306) (cond ((= null V5305) V5306) (true (let W5307 (str V5305) (let W5308 (external V5305) (map (lambda Z5309 (shen.pui-h W5307 W5308 Z5309)) V5306))))))

(defun shen.pui-h (V5314 V5315 V5316) (cond ((and (cons? V5316) (and (= fn (hd V5316)) (and (cons? (tl V5316)) (= () (tl (tl V5316)))))) (if (shen.internal? (hd (tl V5316)) V5314 V5315) (cons fn (cons (shen.intern-in-package V5314 (hd (tl V5316))) ())) V5316)) ((cons? V5316) (if (shen.internal? (hd V5316) V5314 V5315) (cons (shen.intern-in-package V5314 (hd V5316)) (map (lambda Z5317 (shen.pui-h V5314 V5315 Z5317)) (tl V5316))) (if (cons? (hd V5316)) (map (lambda Z5318 (shen.pui-h V5314 V5315 Z5318)) V5316) (cons (hd V5316) (map (lambda Z5319 (shen.pui-h V5314 V5315 Z5319)) (tl V5316)))))) (true V5316)))

(defun shen.update-history () (set shen.*history* (cons (shen.trim-it (it)) (value shen.*history*))))

(defun shen.trim-it (V5320) (cond ((and (shen.+string? V5320) (shen.whitespace? (string->n (hdstr V5320)))) (shen.trim-it (tlstr V5320))) (true V5320)))

(defun shen.evaluate-lineread (V5339 V5340 V5341) (cond ((and (cons? V5339) (and (= () (tl V5339)) (and (cons? V5340) (and (shen.+string? (hd V5340)) (and (= "!" (hdstr (hd V5340))) (and (shen.+string? (tlstr (hd V5340))) (and (= "!" (hdstr (tlstr (hd V5340)))) (cons? (tl V5340))))))))) (let W5342 (read-from-string (hd (tl V5340))) (let W5343 (set shen.*history* (cons (hd (tl V5340)) (tl V5340))) (let W5344 (pr (shen.app (hd (tl V5340)) "
" shen.a) (stoutput)) (shen.evaluate-lineread W5342 W5343 V5341))))) ((and (cons? V5339) (and (= () (tl V5339)) (and (cons? V5340) (and (shen.+string? (hd V5340)) (= "!" (hdstr (hd V5340))))))) (let W5345 (if (= (tlstr (hd V5340)) "") () (hd (read-from-string (tlstr (hd V5340))))) (let W5346 (shen.use-history W5345 (tlstr (hd V5340)) (tl V5340)) (let W5347 (pr (shen.app W5346 "
" shen.a) (stoutput)) (let W5348 (read-from-string W5346) (let W5349 (set shen.*history* (cons W5346 (tl V5340))) (shen.evaluate-lineread W5348 W5349 V5341))))))) ((and (cons? V5339) (and (= () (tl V5339)) (and (cons? V5340) (and (shen.+string? (hd V5340)) (= "%" (hdstr (hd V5340))))))) (let W5350 (if (= (tlstr (hd V5340)) "") () (hd (read-from-string (tlstr (hd V5340))))) (let W5351 (shen.peek-history W5350 (tlstr (hd V5340)) (tl V5340)) (let W5352 (set shen.*history* (tl V5340)) (abort))))) ((= true V5341) (shen.check-eval-and-print V5339)) ((= false V5341) (shen.eval-and-print V5339)) (true (simple-error "implementation error in shen.evaluate-lineread"))))

(defun shen.use-history (V5353 V5354 V5355) (if (integer? V5353) (nth (+ 1 V5353) (reverse V5355)) (if (symbol? V5353) (shen.string-match V5354 V5355) (simple-error "! expects a number or a symbol
"))))

(defun shen.peek-history (V5356 V5357 V5358) (if (integer? V5356) (pr (cn "
" (shen.app (nth (+ 1 V5356) (reverse V5358)) "" shen.a)) (stoutput)) (if (or (= V5357 "") (symbol? V5356)) (shen.recursive-string-match 0 V5357 (reverse V5358)) (simple-error "% expects a number or a symbol
"))))

(defun shen.string-match (V5368 V5369) (cond ((= () V5369) (simple-error "
input not found")) ((and (cons? V5369) (shen.string-prefix? V5368 (hd V5369))) (hd V5369)) ((cons? V5369) (shen.string-match V5368 (tl V5369))) (true (simple-error "implementation error in shen.string-match"))))

(defun shen.string-prefix? (V5377 V5378) (cond ((= "" V5377) true) ((and (shen.+string? V5377) (shen.whitespace? (string->n (hdstr V5377)))) (shen.string-prefix? (tlstr V5377) V5378)) ((and (shen.+string? V5378) (shen.whitespace? (string->n (hdstr V5378)))) (shen.string-prefix? V5377 (tlstr V5378))) ((and (shen.+string? V5378) (= "(" (hdstr V5378))) (shen.string-prefix? V5377 (tlstr V5378))) ((and (shen.+string? V5377) (and (shen.+string? V5378) (= (hdstr V5377) (hdstr V5378)))) (shen.string-prefix? (tlstr V5377) (tlstr V5378))) (true false)))

(defun shen.recursive-string-match (V5389 V5390 V5391) (cond ((= () V5391) shen.skip) ((cons? V5391) (do (if (shen.string-prefix? V5390 (hd V5391)) (pr (shen.app V5389 (cn ". " (shen.app (hd V5391) "
" shen.a)) shen.a) (stoutput)) shen.skip) (shen.recursive-string-match (+ V5389 1) V5390 (tl V5391)))) (true (simple-error "implementation error in shen.recursive-string-match"))))

