(defun print (V5623) (let W5624 (shen.insert V5623 "~S") (let W5625 (pr W5624 (stoutput)) V5623)))

(defun pr (V5626 V5627) (if (value *hush*) V5626 (if (shen.char-stoutput? V5627) (shen.write-string V5626 V5627) (shen.write-chars V5626 V5627 (shen.string->byte V5626 0) 1))))

(defun shen.string->byte (V5628 V5629) (trap-error (string->n (pos V5628 V5629)) (lambda Z5630 shen.eos)))

(defun shen.write-chars (V5631 V5632 V5633 V5634) (cond ((= shen.eos V5633) V5631) (true (shen.write-chars V5631 V5632 (do (write-byte V5633 V5632) (shen.string->byte V5631 V5634)) (+ V5634 1)))))

(defun shen.mkstr (V5635 V5636) (cond ((string? V5635) (shen.mkstr-l (shen.proc-nl V5635) V5636)) (true (shen.mkstr-r (cons shen.proc-nl (cons V5635 ())) V5636))))

(defun shen.mkstr-l (V5641 V5642) (cond ((= () V5642) V5641) ((cons? V5642) (shen.mkstr-l (shen.insert-l (hd V5642) V5641) (tl V5642))) (true (simple-error "implementation error in shen.mkstr-l"))))

(defun shen.insert-l (V5649 V5650) (cond ((= "" V5650) "") ((and (shen.+string? V5650) (and (= "~" (hdstr V5650)) (and (shen.+string? (tlstr V5650)) (= "A" (hdstr (tlstr V5650)))))) (cons shen.app (cons V5649 (cons (tlstr (tlstr V5650)) (cons shen.a ()))))) ((and (shen.+string? V5650) (and (= "~" (hdstr V5650)) (and (shen.+string? (tlstr V5650)) (= "R" (hdstr (tlstr V5650)))))) (cons shen.app (cons V5649 (cons (tlstr (tlstr V5650)) (cons shen.r ()))))) ((and (shen.+string? V5650) (and (= "~" (hdstr V5650)) (and (shen.+string? (tlstr V5650)) (= "S" (hdstr (tlstr V5650)))))) (cons shen.app (cons V5649 (cons (tlstr (tlstr V5650)) (cons shen.s ()))))) ((shen.+string? V5650) (shen.factor-cn (cons cn (cons (hdstr V5650) (cons (shen.insert-l V5649 (tlstr V5650)) ()))))) ((and (cons? V5650) (and (= cn (hd V5650)) (and (cons? (tl V5650)) (and (cons? (tl (tl V5650))) (= () (tl (tl (tl V5650)))))))) (cons cn (cons (hd (tl V5650)) (cons (shen.insert-l V5649 (hd (tl (tl V5650)))) ())))) ((and (cons? V5650) (and (= shen.app (hd V5650)) (and (cons? (tl V5650)) (and (cons? (tl (tl V5650))) (and (cons? (tl (tl (tl V5650)))) (= () (tl (tl (tl (tl V5650)))))))))) (cons shen.app (cons (hd (tl V5650)) (cons (shen.insert-l V5649 (hd (tl (tl V5650)))) (tl (tl (tl V5650))))))) (true (simple-error "implementation error in shen.insert-l"))))

(defun shen.factor-cn (V5651) (cond ((and (cons? V5651) (and (= cn (hd V5651)) (and (cons? (tl V5651)) (and (cons? (tl (tl V5651))) (and (cons? (hd (tl (tl V5651)))) (and (= cn (hd (hd (tl (tl V5651))))) (and (cons? (tl (hd (tl (tl V5651))))) (and (cons? (tl (tl (hd (tl (tl V5651)))))) (and (= () (tl (tl (tl (hd (tl (tl V5651))))))) (and (= () (tl (tl (tl V5651)))) (and (string? (hd (tl V5651))) (string? (hd (tl (hd (tl (tl V5651))))))))))))))))) (cons cn (cons (cn (hd (tl V5651)) (hd (tl (hd (tl (tl V5651)))))) (tl (tl (hd (tl (tl V5651)))))))) (true V5651)))

(defun shen.proc-nl (V5654) (cond ((= "" V5654) "") ((and (shen.+string? V5654) (and (= "~" (hdstr V5654)) (and (shen.+string? (tlstr V5654)) (= "%" (hdstr (tlstr V5654)))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V5654))))) ((shen.+string? V5654) (cn (hdstr V5654) (shen.proc-nl (tlstr V5654)))) (true (simple-error "implementation error in shen.proc-nl"))))

(defun shen.mkstr-r (V5659 V5660) (cond ((= () V5660) V5659) ((cons? V5660) (shen.mkstr-r (cons shen.insert (cons (hd V5660) (cons V5659 ()))) (tl V5660))) (true (simple-error "implementation error in shen.mkstr-r"))))

(defun shen.insert (V5661 V5662) (shen.insert-h V5661 V5662 ""))

(defun shen.insert-h (V5671 V5672 V5673) (cond ((= "" V5672) V5673) ((and (shen.+string? V5672) (and (= "~" (hdstr V5672)) (and (shen.+string? (tlstr V5672)) (= "A" (hdstr (tlstr V5672)))))) (cn V5673 (shen.app V5671 (tlstr (tlstr V5672)) shen.a))) ((and (shen.+string? V5672) (and (= "~" (hdstr V5672)) (and (shen.+string? (tlstr V5672)) (= "R" (hdstr (tlstr V5672)))))) (cn V5673 (shen.app V5671 (tlstr (tlstr V5672)) shen.r))) ((and (shen.+string? V5672) (and (= "~" (hdstr V5672)) (and (shen.+string? (tlstr V5672)) (= "S" (hdstr (tlstr V5672)))))) (cn V5673 (shen.app V5671 (tlstr (tlstr V5672)) shen.s))) ((shen.+string? V5672) (shen.insert-h V5671 (tlstr V5672) (cn V5673 (hdstr V5672)))) (true (simple-error "implementation error in shen.insert-h"))))

(defun shen.app (V5674 V5675 V5676) (cn (shen.arg->str V5674 V5676) V5675))

(defun shen.arg->str (V5680 V5681) (cond ((= V5680 (fail)) "...") ((shen.list? V5680) (shen.list->str V5680 V5681)) ((string? V5680) (shen.str->str V5680 V5681)) ((absvector? V5680) (shen.vector->str V5680 V5681)) (true (shen.atom->str V5680))))

(defun shen.list->str (V5682 V5683) (cond ((= shen.r V5683) (@s "(" (@s (shen.iter-list V5682 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V5682 V5683 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V5694 V5695 V5696) (cond ((= () V5694) "") ((= 0 V5696) "... etc") ((and (cons? V5694) (= () (tl V5694))) (shen.arg->str (hd V5694) V5695)) ((cons? V5694) (@s (shen.arg->str (hd V5694) V5695) (@s " " (shen.iter-list (tl V5694) V5695 (- V5696 1))))) (true (@s "|" (@s " " (shen.arg->str V5694 V5695))))))

(defun shen.str->str (V5699 V5700) (cond ((= shen.a V5700) V5699) (true (@s (n->string 34) (@s V5699 (n->string 34))))))

(defun shen.vector->str (V5701 V5702) (if (shen.print-vector? V5701) ((fn (<-address V5701 0)) V5701) (if (vector? V5701) (@s "<" (@s (shen.iter-vector V5701 1 V5702 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V5701 0 V5702 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V5703) (let W5704 (<-address V5703 0) (if (= W5704 shen.tuple) true (if (= W5704 shen.pvar) true (if (not (number? W5704)) (shen.fbound? W5704) false)))))

(defun shen.fbound? (V5705) (not (= (arity V5705) -1)))

(defun shen.tuple (V5706) (cn "(@p " (shen.app (<-address V5706 1) (cn " " (shen.app (<-address V5706 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V5713 V5714 V5715 V5716) (cond ((= 0 V5716) "... etc") (true (let W5717 (trap-error (<-address V5713 V5714) (lambda Z5718 shen.out-of-bounds)) (let W5719 (trap-error (<-address V5713 (+ V5714 1)) (lambda Z5720 shen.out-of-bounds)) (if (= W5717 shen.out-of-bounds) "" (if (= W5719 shen.out-of-bounds) (shen.arg->str W5717 V5715) (@s (shen.arg->str W5717 V5715) (@s " " (shen.iter-vector V5713 (+ V5714 1) V5715 (- V5716 1)))))))))))

(defun shen.atom->str (V5721) (trap-error (str V5721) (lambda Z5722 (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V5723) (or (empty? V5723) (cons? V5723)))

