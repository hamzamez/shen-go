"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.shen->kl (V128 V129) (compile (lambda X (shen.<define> X)) (cons V128 V129) (lambda X (shen.shen-syntax-error V128 X))))

(defun shen.shen-syntax-error (V136 V137) (cond ((cons? V137) (simple-error (cn "syntax error in " (shen.app V136 (cn " here:

 " (shen.app (shen.next-50 50 (hd V137)) "
" shen.a)) shen.a)))) (true (simple-error (cn "syntax error in " (shen.app V136 "
" shen.a))))))

(defun shen.<define> (V139) (let YaccParse (let Parse_shen.<name> (shen.<name> V139) (if (not (= (fail) Parse_shen.<name>)) (let Parse_shen.<signature> (shen.<signature> Parse_shen.<name>) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_shen.<rules> (shen.<rules> Parse_shen.<signature>) (if (not (= (fail) Parse_shen.<rules>)) (shen.pair (hd Parse_shen.<rules>) (shen.compile_to_machine_code (shen.hdtl Parse_shen.<name>) (shen.hdtl Parse_shen.<rules>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<name> (shen.<name> V139) (if (not (= (fail) Parse_shen.<name>)) (let Parse_shen.<rules> (shen.<rules> Parse_shen.<name>) (if (not (= (fail) Parse_shen.<rules>)) (shen.pair (hd Parse_shen.<rules>) (shen.compile_to_machine_code (shen.hdtl Parse_shen.<name>) (shen.hdtl Parse_shen.<rules>))) (fail))) (fail))) YaccParse)))

(defun shen.<name> (V141) (if (cons? (hd V141)) (let Parse_X (shen.hdhd V141) (shen.pair (hd (shen.pair (shen.tlhd V141) (shen.hdtl V141))) (if (and (symbol? Parse_X) (not (shen.sysfunc? Parse_X))) Parse_X (simple-error (shen.app Parse_X " is not a legitimate function name.
" shen.a))))) (fail)))

(defun shen.sysfunc? (V143) (element? V143 (get (intern "shen") shen.external-symbols (value *property-vector*))))

(defun shen.<signature> (V147) (if (and (cons? (hd V147)) (= { (shen.hdhd V147))) (let NewStream144 (shen.pair (shen.tlhd V147) (shen.hdtl V147)) (let Parse_shen.<signature-help> (shen.<signature-help> NewStream144) (if (not (= (fail) Parse_shen.<signature-help>)) (if (and (cons? (hd Parse_shen.<signature-help>)) (= } (shen.hdhd Parse_shen.<signature-help>))) (let NewStream145 (shen.pair (shen.tlhd Parse_shen.<signature-help>) (shen.hdtl Parse_shen.<signature-help>)) (shen.pair (hd NewStream145) (shen.demodulate (shen.curry-type (shen.hdtl Parse_shen.<signature-help>))))) (fail)) (fail)))) (fail)))

(defun shen.curry-type (V149) (shen.active-cons (shen.curry-type-h V149)))

(defun shen.active-cons (V151) (cond ((and (cons? V151) (and (cons? (tl V151)) (and (cons? (tl (tl V151))) (and (= () (tl (tl (tl V151)))) (= (hd (tl V151)) bar!))))) (cons (shen.active-cons (hd V151)) (shen.active-cons (hd (tl (tl V151)))))) ((cons? V151) (cons (shen.active-cons (hd V151)) (shen.active-cons (tl V151)))) (true V151)))

(defun shen.curry-type-h (V153) (cond ((and (cons? V153) (and (cons? (tl V153)) (and (= --> (hd (tl V153))) (and (cons? (tl (tl V153))) (and (cons? (tl (tl (tl V153)))) (= --> (hd (tl (tl (tl V153)))))))))) (shen.curry-type-h (cons (hd V153) (cons --> (cons (tl (tl V153)) ()))))) ((and (cons? V153) (and (cons? (tl V153)) (and (= * (hd (tl V153))) (and (cons? (tl (tl V153))) (and (cons? (tl (tl (tl V153)))) (= * (hd (tl (tl (tl V153)))))))))) (shen.curry-type-h (cons (hd V153) (cons * (cons (tl (tl V153)) ()))))) ((cons? V153) (map (lambda Z (shen.curry-type-h Z)) V153)) (true V153)))

(defun shen.<signature-help> (V155) (let YaccParse (if (cons? (hd V155)) (let Parse_X (shen.hdhd V155) (let Parse_shen.<signature-help> (shen.<signature-help> (shen.pair (shen.tlhd V155) (shen.hdtl V155))) (if (not (= (fail) Parse_shen.<signature-help>)) (if (not (element? Parse_X (cons { (cons } ())))) (shen.pair (hd Parse_shen.<signature-help>) (cons Parse_X (shen.hdtl Parse_shen.<signature-help>))) (fail)) (fail)))) (fail)) (if (= YaccParse (fail)) (let Parse_<e> (<e> V155) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<rules> (V157) (let YaccParse (let Parse_shen.<rule> (shen.<rule> V157) (if (not (= (fail) Parse_shen.<rule>)) (let Parse_shen.<rules> (shen.<rules> Parse_shen.<rule>) (if (not (= (fail) Parse_shen.<rules>)) (shen.pair (hd Parse_shen.<rules>) (cons (shen.linearise (shen.hdtl Parse_shen.<rule>)) (shen.hdtl Parse_shen.<rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<rule> (shen.<rule> V157) (if (not (= (fail) Parse_shen.<rule>)) (shen.pair (hd Parse_shen.<rule>) (cons (shen.linearise (shen.hdtl Parse_shen.<rule>)) ())) (fail))) YaccParse)))

(defun shen.<rule> (V165) (let YaccParse (let Parse_shen.<patterns> (shen.<patterns> V165) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= -> (shen.hdhd Parse_shen.<patterns>))) (let NewStream158 (shen.pair (shen.tlhd Parse_shen.<patterns>) (shen.hdtl Parse_shen.<patterns>)) (let Parse_shen.<action> (shen.<action> NewStream158) (if (not (= (fail) Parse_shen.<action>)) (if (and (cons? (hd Parse_shen.<action>)) (= where (shen.hdhd Parse_shen.<action>))) (let NewStream159 (shen.pair (shen.tlhd Parse_shen.<action>) (shen.hdtl Parse_shen.<action>)) (let Parse_shen.<guard> (shen.<guard> NewStream159) (if (not (= (fail) Parse_shen.<guard>)) (shen.pair (hd Parse_shen.<guard>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (cons where (cons (shen.hdtl Parse_shen.<guard>) (cons (shen.hdtl Parse_shen.<action>) ()))) ()))) (fail)))) (fail)) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<patterns> (shen.<patterns> V165) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= -> (shen.hdhd Parse_shen.<patterns>))) (let NewStream160 (shen.pair (shen.tlhd Parse_shen.<patterns>) (shen.hdtl Parse_shen.<patterns>)) (let Parse_shen.<action> (shen.<action> NewStream160) (if (not (= (fail) Parse_shen.<action>)) (shen.pair (hd Parse_shen.<action>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (shen.hdtl Parse_shen.<action>) ()))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<patterns> (shen.<patterns> V165) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= <- (shen.hdhd Parse_shen.<patterns>))) (let NewStream161 (shen.pair (shen.tlhd Parse_shen.<patterns>) (shen.hdtl Parse_shen.<patterns>)) (let Parse_shen.<action> (shen.<action> NewStream161) (if (not (= (fail) Parse_shen.<action>)) (if (and (cons? (hd Parse_shen.<action>)) (= where (shen.hdhd Parse_shen.<action>))) (let NewStream162 (shen.pair (shen.tlhd Parse_shen.<action>) (shen.hdtl Parse_shen.<action>)) (let Parse_shen.<guard> (shen.<guard> NewStream162) (if (not (= (fail) Parse_shen.<guard>)) (shen.pair (hd Parse_shen.<guard>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (cons where (cons (shen.hdtl Parse_shen.<guard>) (cons (cons shen.choicepoint! (cons (shen.hdtl Parse_shen.<action>) ())) ()))) ()))) (fail)))) (fail)) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<patterns> (shen.<patterns> V165) (if (not (= (fail) Parse_shen.<patterns>)) (if (and (cons? (hd Parse_shen.<patterns>)) (= <- (shen.hdhd Parse_shen.<patterns>))) (let NewStream163 (shen.pair (shen.tlhd Parse_shen.<patterns>) (shen.hdtl Parse_shen.<patterns>)) (let Parse_shen.<action> (shen.<action> NewStream163) (if (not (= (fail) Parse_shen.<action>)) (shen.pair (hd Parse_shen.<action>) (cons (shen.hdtl Parse_shen.<patterns>) (cons (cons shen.choicepoint! (cons (shen.hdtl Parse_shen.<action>) ())) ()))) (fail)))) (fail)) (fail))) YaccParse)) YaccParse)) YaccParse)))

(defun shen.fail_if (V168 V169) (if (V168 V169) (fail) V169))

(defun shen.succeeds? (V175) (cond ((= V175 (fail)) false) (true true)))

(defun shen.<patterns> (V177) (let YaccParse (let Parse_shen.<pattern> (shen.<pattern> V177) (if (not (= (fail) Parse_shen.<pattern>)) (let Parse_shen.<patterns> (shen.<patterns> Parse_shen.<pattern>) (if (not (= (fail) Parse_shen.<patterns>)) (shen.pair (hd Parse_shen.<patterns>) (cons (shen.hdtl Parse_shen.<pattern>) (shen.hdtl Parse_shen.<patterns>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V177) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<pattern> (V190) (let YaccParse (if (and (cons? (hd V190)) (cons? (shen.hdhd V190))) (if (and (cons? (hd (shen.pair (shen.hdhd V190) (shen.hdtl V190)))) (= @p (shen.hdhd (shen.pair (shen.hdhd V190) (shen.hdtl V190))))) (let NewStream179 (shen.pair (shen.tlhd (shen.pair (shen.hdhd V190) (shen.hdtl V190))) (shen.hdtl (shen.pair (shen.hdhd V190) (shen.hdtl V190)))) (let Parse_shen.<pattern1> (shen.<pattern1> NewStream179) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (shen.tlhd V190) (shen.hdtl V190))) (cons @p (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail)))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V190)) (cons? (shen.hdhd V190))) (if (and (cons? (hd (shen.pair (shen.hdhd V190) (shen.hdtl V190)))) (= cons (shen.hdhd (shen.pair (shen.hdhd V190) (shen.hdtl V190))))) (let NewStream181 (shen.pair (shen.tlhd (shen.pair (shen.hdhd V190) (shen.hdtl V190))) (shen.hdtl (shen.pair (shen.hdhd V190) (shen.hdtl V190)))) (let Parse_shen.<pattern1> (shen.<pattern1> NewStream181) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (shen.tlhd V190) (shen.hdtl V190))) (cons cons (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail)))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V190)) (cons? (shen.hdhd V190))) (if (and (cons? (hd (shen.pair (shen.hdhd V190) (shen.hdtl V190)))) (= @v (shen.hdhd (shen.pair (shen.hdhd V190) (shen.hdtl V190))))) (let NewStream183 (shen.pair (shen.tlhd (shen.pair (shen.hdhd V190) (shen.hdtl V190))) (shen.hdtl (shen.pair (shen.hdhd V190) (shen.hdtl V190)))) (let Parse_shen.<pattern1> (shen.<pattern1> NewStream183) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (shen.tlhd V190) (shen.hdtl V190))) (cons @v (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail)))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V190)) (cons? (shen.hdhd V190))) (if (and (cons? (hd (shen.pair (shen.hdhd V190) (shen.hdtl V190)))) (= @s (shen.hdhd (shen.pair (shen.hdhd V190) (shen.hdtl V190))))) (let NewStream185 (shen.pair (shen.tlhd (shen.pair (shen.hdhd V190) (shen.hdtl V190))) (shen.hdtl (shen.pair (shen.hdhd V190) (shen.hdtl V190)))) (let Parse_shen.<pattern1> (shen.<pattern1> NewStream185) (if (not (= (fail) Parse_shen.<pattern1>)) (let Parse_shen.<pattern2> (shen.<pattern2> Parse_shen.<pattern1>) (if (not (= (fail) Parse_shen.<pattern2>)) (shen.pair (hd (shen.pair (shen.tlhd V190) (shen.hdtl V190))) (cons @s (cons (shen.hdtl Parse_shen.<pattern1>) (cons (shen.hdtl Parse_shen.<pattern2>) ())))) (fail))) (fail)))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (and (cons? (hd V190)) (cons? (shen.hdhd V190))) (if (and (cons? (hd (shen.pair (shen.hdhd V190) (shen.hdtl V190)))) (= vector (shen.hdhd (shen.pair (shen.hdhd V190) (shen.hdtl V190))))) (let NewStream187 (shen.pair (shen.tlhd (shen.pair (shen.hdhd V190) (shen.hdtl V190))) (shen.hdtl (shen.pair (shen.hdhd V190) (shen.hdtl V190)))) (if (and (cons? (hd NewStream187)) (= 0 (shen.hdhd NewStream187))) (let NewStream188 (shen.pair (shen.tlhd NewStream187) (shen.hdtl NewStream187)) (shen.pair (hd (shen.pair (shen.tlhd V190) (shen.hdtl V190))) (cons vector (cons 0 ())))) (fail))) (fail)) (fail)) (if (= YaccParse (fail)) (let YaccParse (if (cons? (hd V190)) (let Parse_X (shen.hdhd V190) (if (cons? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V190) (shen.hdtl V190))) (shen.constructor-error Parse_X)) (fail))) (fail)) (if (= YaccParse (fail)) (let Parse_shen.<simple_pattern> (shen.<simple_pattern> V190) (if (not (= (fail) Parse_shen.<simple_pattern>)) (shen.pair (hd Parse_shen.<simple_pattern>) (shen.hdtl Parse_shen.<simple_pattern>)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.constructor-error (V192) (simple-error (shen.app V192 " is not a legitimate constructor
" shen.a)))

(defun shen.<simple_pattern> (V194) (let YaccParse (if (cons? (hd V194)) (let Parse_X (shen.hdhd V194) (if (= Parse_X _) (shen.pair (hd (shen.pair (shen.tlhd V194) (shen.hdtl V194))) (gensym Parse_Y)) (fail))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V194)) (let Parse_X (shen.hdhd V194) (if (not (element? Parse_X (cons -> (cons <- ())))) (shen.pair (hd (shen.pair (shen.tlhd V194) (shen.hdtl V194))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<pattern1> (V196) (let Parse_shen.<pattern> (shen.<pattern> V196) (if (not (= (fail) Parse_shen.<pattern>)) (shen.pair (hd Parse_shen.<pattern>) (shen.hdtl Parse_shen.<pattern>)) (fail))))

(defun shen.<pattern2> (V198) (let Parse_shen.<pattern> (shen.<pattern> V198) (if (not (= (fail) Parse_shen.<pattern>)) (shen.pair (hd Parse_shen.<pattern>) (shen.hdtl Parse_shen.<pattern>)) (fail))))

(defun shen.<action> (V200) (if (cons? (hd V200)) (let Parse_X (shen.hdhd V200) (shen.pair (hd (shen.pair (shen.tlhd V200) (shen.hdtl V200))) Parse_X)) (fail)))

(defun shen.<guard> (V202) (if (cons? (hd V202)) (let Parse_X (shen.hdhd V202) (shen.pair (hd (shen.pair (shen.tlhd V202) (shen.hdtl V202))) Parse_X)) (fail)))

(defun shen.compile_to_machine_code (V205 V206) (let Lambda+ (shen.compile_to_lambda+ V205 V206) (let KL (shen.compile_to_kl V205 Lambda+) (let Record (shen.record-source V205 KL) KL))))

(defun shen.record-source (V211 V212) (cond ((value shen.*installing-kl*) shen.skip) (true (put V211 shen.source V212 (value *property-vector*)))))

(defun shen.compile_to_lambda+ (V215 V216) (let Arity (shen.aritycheck V215 V216) (let UpDateSymbolTable (shen.update-symbol-table V215 Arity) (let Free (shen.for-each (lambda Rule (shen.free_variable_check V215 Rule)) V216) (let Variables (shen.parameters Arity) (let Strip (map (lambda X (shen.strip-protect X)) V216) (let Abstractions (map (lambda X (shen.abstract_rule X)) Strip) (let Applications (map (lambda X (shen.application_build Variables X)) Abstractions) (cons Variables (cons Applications ()))))))))))

(defun shen.update-symbol-table (V219 V220) (cond ((= 0 V220) shen.skip) (true (put V219 shen.lambda-form (eval-kl (shen.lambda-form V219 V220)) (value *property-vector*)))))

(defun shen.free_variable_check (V223 V224) (cond ((and (cons? V224) (and (cons? (tl V224)) (= () (tl (tl V224))))) (let Bound (shen.extract_vars (hd V224)) (let Free (shen.extract_free_vars Bound (hd (tl V224))) (shen.free_variable_warnings V223 Free)))) (true (shen.f_error shen.free_variable_check))))

(defun shen.extract_vars (V226) (cond ((variable? V226) (cons V226 ())) ((cons? V226) (union (shen.extract_vars (hd V226)) (shen.extract_vars (tl V226)))) (true ())))

(defun shen.extract_free_vars (V238 V239) (cond ((and (cons? V239) (and (cons? (tl V239)) (and (= () (tl (tl V239))) (= (hd V239) protect)))) ()) ((and (variable? V239) (not (element? V239 V238))) (cons V239 ())) ((and (cons? V239) (and (= lambda (hd V239)) (and (cons? (tl V239)) (and (cons? (tl (tl V239))) (= () (tl (tl (tl V239)))))))) (shen.extract_free_vars (cons (hd (tl V239)) V238) (hd (tl (tl V239))))) ((and (cons? V239) (and (= let (hd V239)) (and (cons? (tl V239)) (and (cons? (tl (tl V239))) (and (cons? (tl (tl (tl V239)))) (= () (tl (tl (tl (tl V239)))))))))) (union (shen.extract_free_vars V238 (hd (tl (tl V239)))) (shen.extract_free_vars (cons (hd (tl V239)) V238) (hd (tl (tl (tl V239))))))) ((cons? V239) (union (shen.extract_free_vars V238 (hd V239)) (shen.extract_free_vars V238 (tl V239)))) (true ())))

(defun shen.free_variable_warnings (V244 V245) (cond ((= () V245) _) (true (simple-error (cn "error: the following variables are free in " (shen.app V244 (cn ": " (shen.app (shen.list_variables V245) "" shen.a)) shen.a))))))

(defun shen.list_variables (V247) (cond ((and (cons? V247) (= () (tl V247))) (cn (str (hd V247)) ".")) ((cons? V247) (cn (str (hd V247)) (cn ", " (shen.list_variables (tl V247))))) (true (shen.f_error shen.list_variables))))

(defun shen.strip-protect (V249) (cond ((and (cons? V249) (and (cons? (tl V249)) (and (= () (tl (tl V249))) (= (hd V249) protect)))) (shen.strip-protect (hd (tl V249)))) ((cons? V249) (map (lambda Z (shen.strip-protect Z)) V249)) (true V249)))

(defun shen.linearise (V251) (cond ((and (cons? V251) (and (cons? (tl V251)) (= () (tl (tl V251))))) (shen.linearise_help (shen.flatten (hd V251)) (hd V251) (hd (tl V251)))) (true (shen.f_error shen.linearise))))

(defun shen.flatten (V253) (cond ((= () V253) ()) ((cons? V253) (append (shen.flatten (hd V253)) (shen.flatten (tl V253)))) (true (cons V253 ()))))

(defun shen.linearise_help (V257 V258 V259) (cond ((= () V257) (cons V258 (cons V259 ()))) ((cons? V257) (if (and (variable? (hd V257)) (element? (hd V257) (tl V257))) (let Var (gensym (hd V257)) (let NewAction (cons where (cons (cons = (cons (hd V257) (cons Var ()))) (cons V259 ()))) (let NewPatts (shen.linearise_X (hd V257) Var V258) (shen.linearise_help (tl V257) NewPatts NewAction)))) (shen.linearise_help (tl V257) V258 V259))) (true (shen.f_error shen.linearise_help))))

(defun shen.linearise_X (V272 V273 V274) (cond ((= V274 V272) V273) ((cons? V274) (let L (shen.linearise_X V272 V273 (hd V274)) (if (= L (hd V274)) (cons (hd V274) (shen.linearise_X V272 V273 (tl V274))) (cons L (tl V274))))) (true V274)))

(defun shen.aritycheck (V277 V278) (cond ((and (cons? V278) (and (cons? (hd V278)) (and (cons? (tl (hd V278))) (and (= () (tl (tl (hd V278)))) (= () (tl V278)))))) (do (shen.aritycheck-action (hd (tl (hd V278)))) (shen.aritycheck-name V277 (arity V277) (length (hd (hd V278)))))) ((and (cons? V278) (and (cons? (hd V278)) (and (cons? (tl (hd V278))) (and (= () (tl (tl (hd V278)))) (and (cons? (tl V278)) (and (cons? (hd (tl V278))) (and (cons? (tl (hd (tl V278)))) (= () (tl (tl (hd (tl V278)))))))))))) (if (= (length (hd (hd V278))) (length (hd (hd (tl V278))))) (do (shen.aritycheck-action (hd (tl (hd V278)))) (shen.aritycheck V277 (tl V278))) (simple-error (cn "arity error in " (shen.app V277 "
" shen.a))))) (true (shen.f_error shen.aritycheck))))

(defun shen.aritycheck-name (V291 V292 V293) (cond ((= -1 V292) V293) ((= V293 V292) V293) (true (do (shen.prhush (cn "
warning: changing the arity of " (shen.app V291 " can cause errors.
" shen.a)) (stoutput)) V293))))

(defun shen.aritycheck-action (V299) (cond ((cons? V299) (do (shen.aah (hd V299) (tl V299)) (shen.for-each (lambda Y (shen.aritycheck-action Y)) V299))) (true shen.skip)))

(defun shen.aah (V302 V303) (let Arity (arity V302) (let Len (length V303) (if (and (> Arity -1) (> Len Arity)) (shen.prhush (cn "warning: " (shen.app V302 (cn " might not like " (shen.app Len (cn " argument" (shen.app (if (> Len 1) "s" "") ".
" shen.a)) shen.a)) shen.a)) (stoutput)) shen.skip))))

(defun shen.abstract_rule (V305) (cond ((and (cons? V305) (and (cons? (tl V305)) (= () (tl (tl V305))))) (shen.abstraction_build (hd V305) (hd (tl V305)))) (true (shen.f_error shen.abstract_rule))))

(defun shen.abstraction_build (V308 V309) (cond ((= () V308) V309) ((cons? V308) (cons /. (cons (hd V308) (cons (shen.abstraction_build (tl V308) V309) ())))) (true (shen.f_error shen.abstraction_build))))

(defun shen.parameters (V311) (cond ((= 0 V311) ()) (true (cons (gensym V) (shen.parameters (- V311 1))))))

(defun shen.application_build (V314 V315) (cond ((= () V314) V315) ((cons? V314) (shen.application_build (tl V314) (cons V315 (cons (hd V314) ())))) (true (shen.f_error shen.application_build))))

(defun shen.compile_to_kl (V318 V319) (cond ((and (cons? V319) (and (cons? (tl V319)) (= () (tl (tl V319))))) (let Arity (shen.store-arity V318 (length (hd V319))) (let Reduce (map (lambda X (shen.reduce X)) (hd (tl V319))) (let CondExpression (shen.cond-expression V318 (hd V319) Reduce) (let TypeTable (if (value shen.*optimise*) (shen.typextable (shen.get-type V318) (hd V319)) shen.skip) (let TypedCondExpression (if (value shen.*optimise*) (shen.assign-types (hd V319) TypeTable CondExpression) CondExpression) (cons defun (cons V318 (cons (hd V319) (cons TypedCondExpression ())))))))))) (true (shen.f_error shen.compile_to_kl))))

(defun shen.get-type (V325) (cond ((cons? V325) shen.skip) (true (let FType (assoc V325 (value shen.*signedfuncs*)) (if (empty? FType) shen.skip (tl FType))))))

(defun shen.typextable (V336 V337) (cond ((and (cons? V336) (and (cons? (tl V336)) (and (= --> (hd (tl V336))) (and (cons? (tl (tl V336))) (and (= () (tl (tl (tl V336)))) (cons? V337)))))) (if (variable? (hd V336)) (shen.typextable (hd (tl (tl V336))) (tl V337)) (cons (cons (hd V337) (hd V336)) (shen.typextable (hd (tl (tl V336))) (tl V337))))) (true ())))

(defun shen.assign-types (V341 V342 V343) (cond ((and (cons? V343) (and (= let (hd V343)) (and (cons? (tl V343)) (and (cons? (tl (tl V343))) (and (cons? (tl (tl (tl V343)))) (= () (tl (tl (tl (tl V343)))))))))) (cons let (cons (hd (tl V343)) (cons (shen.assign-types V341 V342 (hd (tl (tl V343)))) (cons (shen.assign-types (cons (hd (tl V343)) V341) V342 (hd (tl (tl (tl V343))))) ()))))) ((and (cons? V343) (and (= lambda (hd V343)) (and (cons? (tl V343)) (and (cons? (tl (tl V343))) (= () (tl (tl (tl V343)))))))) (cons lambda (cons (hd (tl V343)) (cons (shen.assign-types (cons (hd (tl V343)) V341) V342 (hd (tl (tl V343)))) ())))) ((and (cons? V343) (= cond (hd V343))) (cons cond (map (lambda Y (cons (shen.assign-types V341 V342 (hd Y)) (cons (shen.assign-types V341 V342 (hd (tl Y))) ()))) (tl V343)))) ((cons? V343) (let NewTable (shen.typextable (shen.get-type (hd V343)) (tl V343)) (cons (hd V343) (map (lambda Y (shen.assign-types V341 (append V342 NewTable) Y)) (tl V343))))) (true (let AtomType (assoc V343 V342) (if (cons? AtomType) (cons type (cons V343 (cons (tl AtomType) ()))) (if (element? V343 V341) V343 (shen.atom-type V343)))))))

(defun shen.atom-type (V345) (if (string? V345) (cons type (cons V345 (cons string ()))) (if (number? V345) (cons type (cons V345 (cons number ()))) (if (boolean? V345) (cons type (cons V345 (cons boolean ()))) (if (symbol? V345) (cons type (cons V345 (cons symbol ()))) V345)))))

(defun shen.store-arity (V350 V351) (cond ((value shen.*installing-kl*) shen.skip) (true (put V350 arity V351 (value *property-vector*)))))

(defun shen.reduce (V353) (do (set shen.*teststack* ()) (let Result (shen.reduce_help V353) (cons (cons : (cons shen.tests (reverse (value shen.*teststack*)))) (cons Result ())))))

(defun shen.reduce_help (V355) (cond ((and (cons? V355) (and (cons? (hd V355)) (and (= /. (hd (hd V355))) (and (cons? (tl (hd V355))) (and (cons? (hd (tl (hd V355)))) (and (= cons (hd (hd (tl (hd V355))))) (and (cons? (tl (hd (tl (hd V355))))) (and (cons? (tl (tl (hd (tl (hd V355)))))) (and (= () (tl (tl (tl (hd (tl (hd V355))))))) (and (cons? (tl (tl (hd V355)))) (and (= () (tl (tl (tl (hd V355))))) (and (cons? (tl V355)) (= () (tl (tl V355))))))))))))))) (do (shen.add_test (cons cons? (tl V355))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V355))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V355)))))) (cons (shen.ebr (hd (tl V355)) (hd (tl (hd V355))) (hd (tl (tl (hd V355))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons hd (tl V355)) ())) (cons (cons tl (tl V355)) ())) (shen.reduce_help Application))))) ((and (cons? V355) (and (cons? (hd V355)) (and (= /. (hd (hd V355))) (and (cons? (tl (hd V355))) (and (cons? (hd (tl (hd V355)))) (and (= @p (hd (hd (tl (hd V355))))) (and (cons? (tl (hd (tl (hd V355))))) (and (cons? (tl (tl (hd (tl (hd V355)))))) (and (= () (tl (tl (tl (hd (tl (hd V355))))))) (and (cons? (tl (tl (hd V355)))) (and (= () (tl (tl (tl (hd V355))))) (and (cons? (tl V355)) (= () (tl (tl V355))))))))))))))) (do (shen.add_test (cons tuple? (tl V355))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V355))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V355)))))) (cons (shen.ebr (hd (tl V355)) (hd (tl (hd V355))) (hd (tl (tl (hd V355))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons fst (tl V355)) ())) (cons (cons snd (tl V355)) ())) (shen.reduce_help Application))))) ((and (cons? V355) (and (cons? (hd V355)) (and (= /. (hd (hd V355))) (and (cons? (tl (hd V355))) (and (cons? (hd (tl (hd V355)))) (and (= @v (hd (hd (tl (hd V355))))) (and (cons? (tl (hd (tl (hd V355))))) (and (cons? (tl (tl (hd (tl (hd V355)))))) (and (= () (tl (tl (tl (hd (tl (hd V355))))))) (and (cons? (tl (tl (hd V355)))) (and (= () (tl (tl (tl (hd V355))))) (and (cons? (tl V355)) (= () (tl (tl V355))))))))))))))) (do (shen.add_test (cons shen.+vector? (tl V355))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V355))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V355)))))) (cons (shen.ebr (hd (tl V355)) (hd (tl (hd V355))) (hd (tl (tl (hd V355))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons hdv (tl V355)) ())) (cons (cons tlv (tl V355)) ())) (shen.reduce_help Application))))) ((and (cons? V355) (and (cons? (hd V355)) (and (= /. (hd (hd V355))) (and (cons? (tl (hd V355))) (and (cons? (hd (tl (hd V355)))) (and (= @s (hd (hd (tl (hd V355))))) (and (cons? (tl (hd (tl (hd V355))))) (and (cons? (tl (tl (hd (tl (hd V355)))))) (and (= () (tl (tl (tl (hd (tl (hd V355))))))) (and (cons? (tl (tl (hd V355)))) (and (= () (tl (tl (tl (hd V355))))) (and (cons? (tl V355)) (= () (tl (tl V355))))))))))))))) (do (shen.add_test (cons shen.+string? (tl V355))) (let Abstraction (cons /. (cons (hd (tl (hd (tl (hd V355))))) (cons (cons /. (cons (hd (tl (tl (hd (tl (hd V355)))))) (cons (shen.ebr (hd (tl V355)) (hd (tl (hd V355))) (hd (tl (tl (hd V355))))) ()))) ()))) (let Application (cons (cons Abstraction (cons (cons pos (cons (hd (tl V355)) (cons 0 ()))) ())) (cons (cons tlstr (tl V355)) ())) (shen.reduce_help Application))))) ((and (cons? V355) (and (cons? (hd V355)) (and (= /. (hd (hd V355))) (and (cons? (tl (hd V355))) (and (cons? (tl (tl (hd V355)))) (and (= () (tl (tl (tl (hd V355))))) (and (cons? (tl V355)) (and (= () (tl (tl V355))) (not (variable? (hd (tl (hd V355))))))))))))) (do (shen.add_test (cons = (cons (hd (tl (hd V355))) (tl V355)))) (shen.reduce_help (hd (tl (tl (hd V355))))))) ((and (cons? V355) (and (cons? (hd V355)) (and (= /. (hd (hd V355))) (and (cons? (tl (hd V355))) (and (cons? (tl (tl (hd V355)))) (and (= () (tl (tl (tl (hd V355))))) (and (cons? (tl V355)) (= () (tl (tl V355)))))))))) (shen.reduce_help (shen.ebr (hd (tl V355)) (hd (tl (hd V355))) (hd (tl (tl (hd V355))))))) ((and (cons? V355) (and (= where (hd V355)) (and (cons? (tl V355)) (and (cons? (tl (tl V355))) (= () (tl (tl (tl V355)))))))) (do (shen.add_test (hd (tl V355))) (shen.reduce_help (hd (tl (tl V355)))))) ((and (cons? V355) (and (cons? (tl V355)) (= () (tl (tl V355))))) (let Z (shen.reduce_help (hd V355)) (if (= (hd V355) Z) V355 (shen.reduce_help (cons Z (tl V355)))))) (true V355)))

(defun shen.+string? (V357) (cond ((= "" V357) false) (true (string? V357))))

(defun shen.+vector? (V359) (and (absvector? V359) (> (<-address V359 0) 0)))

(defun shen.ebr (V372 V373 V374) (cond ((= V374 V373) V372) ((and (cons? V374) (and (= lambda (hd V374)) (and (cons? (tl V374)) (and (cons? (tl (tl V374))) (and (= () (tl (tl (tl V374)))) (shen.clash? (hd (tl V374)) V373)))))) V374) ((and (cons? V374) (and (= let (hd V374)) (and (cons? (tl V374)) (and (cons? (tl (tl V374))) (and (cons? (tl (tl (tl V374)))) (and (= () (tl (tl (tl (tl V374))))) (shen.clash? (hd (tl V374)) V373))))))) (cons let (cons (hd (tl V374)) (cons (shen.ebr V372 V373 (hd (tl (tl V374)))) (tl (tl (tl V374))))))) ((cons? V374) (cons (shen.ebr V372 V373 (hd V374)) (shen.ebr V372 V373 (tl V374)))) (true V374)))

(defun shen.clash? (V386 V387) (cond ((= V387 V386) true) ((cons? V387) (or (shen.clash? V386 (hd V387)) (shen.clash? V386 (tl V387)))) (true false)))

(defun shen.add_test (V389) (set shen.*teststack* (cons V389 (value shen.*teststack*))))

(defun shen.cond-expression (V393 V394 V395) (let Err (shen.err-condition V393) (let Cases (shen.case-form V395 Err) (let EncodeChoices (shen.encode-choices Cases V393) (shen.cond-form EncodeChoices)))))

(defun shen.cond-form (V399) (cond ((and (cons? V399) (and (cons? (hd V399)) (and (= true (hd (hd V399))) (and (cons? (tl (hd V399))) (= () (tl (tl (hd V399)))))))) (hd (tl (hd V399)))) (true (cons cond V399))))

(defun shen.encode-choices (V404 V405) (cond ((= () V404) ()) ((and (cons? V404) (and (cons? (hd V404)) (and (= true (hd (hd V404))) (and (cons? (tl (hd V404))) (and (cons? (hd (tl (hd V404)))) (and (= shen.choicepoint! (hd (hd (tl (hd V404))))) (and (cons? (tl (hd (tl (hd V404))))) (and (= () (tl (tl (hd (tl (hd V404)))))) (and (= () (tl (tl (hd V404)))) (= () (tl V404))))))))))) (cons (cons true (cons (cons let (cons Result (cons (hd (tl (hd (tl (hd V404))))) (cons (cons if (cons (cons = (cons Result (cons (cons fail ()) ()))) (cons (if (value shen.*installing-kl*) (cons shen.sys-error (cons V405 ())) (cons shen.f_error (cons V405 ()))) (cons Result ())))) ())))) ())) ())) ((and (cons? V404) (and (cons? (hd V404)) (and (= true (hd (hd V404))) (and (cons? (tl (hd V404))) (and (cons? (hd (tl (hd V404)))) (and (= shen.choicepoint! (hd (hd (tl (hd V404))))) (and (cons? (tl (hd (tl (hd V404))))) (and (= () (tl (tl (hd (tl (hd V404)))))) (= () (tl (tl (hd V404)))))))))))) (cons (cons true (cons (cons let (cons Result (cons (hd (tl (hd (tl (hd V404))))) (cons (cons if (cons (cons = (cons Result (cons (cons fail ()) ()))) (cons (shen.cond-form (shen.encode-choices (tl V404) V405)) (cons Result ())))) ())))) ())) ())) ((and (cons? V404) (and (cons? (hd V404)) (and (cons? (tl (hd V404))) (and (cons? (hd (tl (hd V404)))) (and (= shen.choicepoint! (hd (hd (tl (hd V404))))) (and (cons? (tl (hd (tl (hd V404))))) (and (= () (tl (tl (hd (tl (hd V404)))))) (= () (tl (tl (hd V404))))))))))) (cons (cons true (cons (cons let (cons Freeze (cons (cons freeze (cons (shen.cond-form (shen.encode-choices (tl V404) V405)) ())) (cons (cons if (cons (hd (hd V404)) (cons (cons let (cons Result (cons (hd (tl (hd (tl (hd V404))))) (cons (cons if (cons (cons = (cons Result (cons (cons fail ()) ()))) (cons (cons thaw (cons Freeze ())) (cons Result ())))) ())))) (cons (cons thaw (cons Freeze ())) ())))) ())))) ())) ())) ((and (cons? V404) (and (cons? (hd V404)) (and (cons? (tl (hd V404))) (= () (tl (tl (hd V404))))))) (cons (hd V404) (shen.encode-choices (tl V404) V405))) (true (shen.f_error shen.encode-choices))))

(defun shen.case-form (V412 V413) (cond ((= () V412) (cons V413 ())) ((and (cons? V412) (and (cons? (hd V412)) (and (cons? (hd (hd V412))) (and (= : (hd (hd (hd V412)))) (and (cons? (tl (hd (hd V412)))) (and (= shen.tests (hd (tl (hd (hd V412))))) (and (= () (tl (tl (hd (hd V412))))) (and (cons? (tl (hd V412))) (and (cons? (hd (tl (hd V412)))) (and (= shen.choicepoint! (hd (hd (tl (hd V412))))) (and (cons? (tl (hd (tl (hd V412))))) (and (= () (tl (tl (hd (tl (hd V412)))))) (= () (tl (tl (hd V412)))))))))))))))) (cons (cons true (tl (hd V412))) (shen.case-form (tl V412) V413))) ((and (cons? V412) (and (cons? (hd V412)) (and (cons? (hd (hd V412))) (and (= : (hd (hd (hd V412)))) (and (cons? (tl (hd (hd V412)))) (and (= shen.tests (hd (tl (hd (hd V412))))) (and (= () (tl (tl (hd (hd V412))))) (and (cons? (tl (hd V412))) (= () (tl (tl (hd V412)))))))))))) (cons (cons true (tl (hd V412))) ())) ((and (cons? V412) (and (cons? (hd V412)) (and (cons? (hd (hd V412))) (and (= : (hd (hd (hd V412)))) (and (cons? (tl (hd (hd V412)))) (and (= shen.tests (hd (tl (hd (hd V412))))) (and (cons? (tl (hd V412))) (= () (tl (tl (hd V412))))))))))) (cons (cons (shen.embed-and (tl (tl (hd (hd V412))))) (tl (hd V412))) (shen.case-form (tl V412) V413))) (true (shen.f_error shen.case-form))))

(defun shen.embed-and (V415) (cond ((and (cons? V415) (= () (tl V415))) (hd V415)) ((cons? V415) (cons and (cons (hd V415) (cons (shen.embed-and (tl V415)) ())))) (true (shen.f_error shen.embed-and))))

(defun shen.err-condition (V417) (cons true (cons (cons shen.f_error (cons V417 ())) ())))

(defun shen.sys-error (V419) (simple-error (cn "system function " (shen.app V419 ": unexpected argument
" shen.a))))



