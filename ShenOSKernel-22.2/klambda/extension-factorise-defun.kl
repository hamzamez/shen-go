"Copyright (c) 2012-2019 Bruno Deferrari.  All rights reserved.
BSD 3-Clause License: http://opensource.org/licenses/BSD-3-Clause"

(defun shen.x.factorise-defun.factorise-defun (V4901) (cond ((and (cons? V4901) (and (= defun (hd V4901)) (and (cons? (tl V4901)) (and (cons? (tl (tl V4901))) (and (cons? (tl (tl (tl V4901)))) (and (cons? (hd (tl (tl (tl V4901))))) (and (= cond (hd (hd (tl (tl (tl V4901)))))) (= () (tl (tl (tl (tl V4901)))))))))))) (cons defun (cons (hd (tl V4901)) (cons (hd (tl (tl V4901))) (cons (shen.x.factorise-defun.factorise-cond (hd (tl (tl (tl V4901)))) (cons shen.f_error (cons (hd (tl V4901)) ())) (hd (tl (tl V4901)))) ()))))) (true V4901)))

(defun shen.x.factorise-defun.factorise-cond (V4913 V4914 V4915) (cond ((and (cons? V4913) (= cond (hd V4913))) (shen.x.factorise-defun.inline-mono-labels (shen.x.factorise-defun.rebranch (shen.x.factorise-defun.add-returns (tl V4913)) V4914) V4915)) (true V4913)))

(defun shen.x.factorise-defun.add-returns (V4917) (cond ((= () V4917) ()) ((and (cons? V4917) (and (cons? (hd V4917)) (and (cons? (tl (hd V4917))) (= () (tl (tl (hd V4917))))))) (cons (cons (hd (hd V4917)) (cons (cons %%return (tl (hd V4917))) ())) (shen.x.factorise-defun.add-returns (tl V4917)))) (true (shen.f_error shen.x.factorise-defun.add-returns))))

(defun shen.x.factorise-defun.generate-label () (gensym %%label))

(defun shen.x.factorise-defun.free-variables (V4920 V4921) (reverse (shen.x.factorise-defun.free-variables-h V4920 V4921 ())))

(defun shen.x.factorise-defun.free-variables-h (V4933 V4934 V4935) (cond ((and (cons? V4933) (and (= let (hd V4933)) (and (cons? (tl V4933)) (and (cons? (tl (tl V4933))) (and (cons? (tl (tl (tl V4933)))) (= () (tl (tl (tl (tl V4933)))))))))) (shen.x.factorise-defun.free-variables-h (hd (tl (tl (tl V4933)))) (remove (hd (tl V4933)) V4934) (shen.x.factorise-defun.free-variables-h (hd (tl (tl V4933))) V4934 V4935))) ((and (cons? V4933) (and (= lambda (hd V4933)) (and (cons? (tl V4933)) (and (cons? (tl (tl V4933))) (= () (tl (tl (tl V4933)))))))) (shen.x.factorise-defun.free-variables-h (hd (tl (tl V4933))) (remove (hd (tl V4933)) V4934) V4935)) ((cons? V4933) (shen.x.factorise-defun.free-variables-h (tl V4933) V4934 (shen.x.factorise-defun.free-variables-h (hd V4933) V4934 V4935))) ((element? V4933 V4934) (adjoin V4933 V4935)) (true V4935)))

(defun shen.x.factorise-defun.attach-free-variables (V4938 V4939) (cond ((and (cons? V4938) (and (= %%let-label (hd V4938)) (and (cons? (tl V4938)) (and (cons? (tl (tl V4938))) (and (cons? (tl (tl (tl V4938)))) (= () (tl (tl (tl (tl V4938)))))))))) (let FreeVars (shen.x.factorise-defun.free-variables (hd (tl (tl V4938))) V4939) (let NewBody (if (= () FreeVars) (hd (tl (tl (tl V4938)))) (subst (cons %%goto-label (cons (hd (tl V4938)) FreeVars)) (cons %%goto-label (cons (hd (tl V4938)) ())) (hd (tl (tl (tl V4938)))))) (cons %%let-label (cons (cons (hd (tl V4938)) FreeVars) (cons (hd (tl (tl V4938))) (cons (shen.x.factorise-defun.inline-mono-labels NewBody V4939) ()))))))) (true (shen.f_error shen.x.factorise-defun.attach-free-variables))))

(defun shen.x.factorise-defun.inline-mono-labels (V4946 V4947) (cond ((and (cons? V4946) (and (= %%let-label (hd V4946)) (and (cons? (tl V4946)) (and (cons? (tl (tl V4946))) (and (cons? (tl (tl (tl V4946)))) (and (= () (tl (tl (tl (tl V4946))))) (> (occurrences (cons %%goto-label (cons (hd (tl V4946)) ())) (hd (tl (tl (tl V4946))))) 1))))))) (shen.x.factorise-defun.attach-free-variables (cons %%let-label (cons (hd (tl V4946)) (cons (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl V4946))) V4947) (tl (tl (tl V4946)))))) V4947)) ((and (cons? V4946) (and (= %%let-label (hd V4946)) (and (cons? (tl V4946)) (and (cons? (tl (tl V4946))) (and (cons? (tl (tl (tl V4946)))) (= () (tl (tl (tl (tl V4946)))))))))) (subst (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl V4946))) V4947) (cons %%goto-label (cons (hd (tl V4946)) ())) (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl (tl V4946)))) V4947))) ((and (cons? V4946) (and (= if (hd V4946)) (and (cons? (tl V4946)) (and (cons? (tl (tl V4946))) (and (cons? (tl (tl (tl V4946)))) (= () (tl (tl (tl (tl V4946)))))))))) (cons if (cons (hd (tl V4946)) (cons (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl V4946))) V4947) (cons (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl (tl V4946)))) V4947) ()))))) ((and (cons? V4946) (and (= let (hd V4946)) (and (cons? (tl V4946)) (and (cons? (tl (tl V4946))) (and (cons? (tl (tl (tl V4946)))) (= () (tl (tl (tl (tl V4946)))))))))) (cons let (cons (hd (tl V4946)) (cons (hd (tl (tl V4946))) (cons (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl (tl V4946)))) (cons (hd (tl V4946)) V4947)) ()))))) (true V4946)))

(defun shen.x.factorise-defun.rebranch (V4954 V4955) (cond ((= () V4954) V4955) ((and (cons? V4954) (and (cons? (hd V4954)) (and (= true (hd (hd V4954))) (and (cons? (tl (hd V4954))) (= () (tl (tl (hd V4954)))))))) (hd (tl (hd V4954)))) ((and (cons? V4954) (and (cons? (hd V4954)) (and (cons? (hd (hd V4954))) (and (= and (hd (hd (hd V4954)))) (and (cons? (tl (hd (hd V4954)))) (and (cons? (tl (tl (hd (hd V4954))))) (and (= () (tl (tl (tl (hd (hd V4954)))))) (and (cons? (tl (hd V4954))) (= () (tl (tl (hd V4954)))))))))))) (let TrueBranch (shen.x.factorise-defun.true-branch (hd (tl (hd (hd V4954)))) V4954) (let FalseBranch (shen.x.factorise-defun.false-branch (hd (tl (hd (hd V4954)))) V4954) (shen.x.factorise-defun.rebranch-h (hd (tl (hd (hd V4954)))) TrueBranch FalseBranch V4955)))) ((and (cons? V4954) (and (cons? (hd V4954)) (and (cons? (tl (hd V4954))) (= () (tl (tl (hd V4954))))))) (let TrueBranch (shen.x.factorise-defun.true-branch (hd (hd V4954)) V4954) (let FalseBranch (shen.x.factorise-defun.false-branch (hd (hd V4954)) V4954) (shen.x.factorise-defun.rebranch-h (hd (hd V4954)) TrueBranch FalseBranch V4955)))) (true (shen.f_error shen.x.factorise-defun.rebranch))))

(defun shen.x.factorise-defun.rebranch-h (V4960 V4961 V4962 V4963) (let NewElse (shen.x.factorise-defun.rebranch V4962 V4963) (shen.x.factorise-defun.with-labelled-else NewElse (lambda GotoElse (shen.x.factorise-defun.merge-same-else-ifs (cons if (cons V4960 (cons (shen.x.factorise-defun.optimize-selectors V4960 (shen.x.factorise-defun.rebranch V4961 GotoElse)) (cons GotoElse ())))))))))

(defun shen.x.factorise-defun.true-branch (V4976 V4977) (cond ((and (cons? V4977) (and (cons? (hd V4977)) (and (cons? (hd (hd V4977))) (and (= and (hd (hd (hd V4977)))) (and (cons? (tl (hd (hd V4977)))) (and (cons? (tl (tl (hd (hd V4977))))) (and (= () (tl (tl (tl (hd (hd V4977)))))) (and (cons? (tl (hd V4977))) (and (= () (tl (tl (hd V4977)))) (= (hd (tl (hd (hd V4977)))) V4976)))))))))) (cons (cons (hd (tl (tl (hd (hd V4977))))) (tl (hd V4977))) (shen.x.factorise-defun.true-branch (hd (tl (hd (hd V4977)))) (tl V4977)))) ((and (cons? V4977) (and (cons? (hd V4977)) (and (cons? (tl (hd V4977))) (and (= () (tl (tl (hd V4977)))) (= (hd (hd V4977)) V4976))))) (cons (cons true (tl (hd V4977))) ())) (true ())))

(defun shen.x.factorise-defun.false-branch (V4986 V4987) (cond ((and (cons? V4987) (and (cons? (hd V4987)) (and (cons? (hd (hd V4987))) (and (= and (hd (hd (hd V4987)))) (and (cons? (tl (hd (hd V4987)))) (and (cons? (tl (tl (hd (hd V4987))))) (and (= () (tl (tl (tl (hd (hd V4987)))))) (and (cons? (tl (hd V4987))) (and (= () (tl (tl (hd V4987)))) (= (hd (tl (hd (hd V4987)))) V4986)))))))))) (shen.x.factorise-defun.false-branch (hd (tl (hd (hd V4987)))) (tl V4987))) ((and (cons? V4987) (and (cons? (hd V4987)) (and (cons? (tl (hd V4987))) (and (= () (tl (tl (hd V4987)))) (= (hd (hd V4987)) V4986))))) (shen.x.factorise-defun.false-branch (hd (hd V4987)) (tl V4987))) (true V4987)))

(defun shen.x.factorise-defun.with-labelled-else (V4990 V4991) (cond ((and (cons? V4990) (and (= %%return (hd V4990)) (and (cons? (tl V4990)) (and (= () (tl (tl V4990))) (not (cons? (hd (tl V4990)))))))) (V4991 V4990)) ((and (cons? V4990) (and (= fail (hd V4990)) (= () (tl V4990)))) (V4991 V4990)) ((and (cons? V4990) (and (= %%goto-label (hd V4990)) (and (cons? (tl V4990)) (= () (tl (tl V4990)))))) (V4991 V4990)) (true (let Label (shen.x.factorise-defun.generate-label) (cons %%let-label (cons Label (cons V4990 (cons (V4991 (cons %%goto-label (cons Label ()))) ()))))))))

(defun shen.x.factorise-defun.merge-same-else-ifs (V4994) (cond ((and (cons? V4994) (and (= if (hd V4994)) (and (cons? (tl V4994)) (and (cons? (tl (tl V4994))) (and (cons? (hd (tl (tl V4994)))) (and (= if (hd (hd (tl (tl V4994))))) (and (cons? (tl (hd (tl (tl V4994))))) (and (cons? (tl (tl (hd (tl (tl V4994)))))) (and (cons? (tl (tl (tl (hd (tl (tl V4994))))))) (and (= () (tl (tl (tl (tl (hd (tl (tl V4994)))))))) (and (cons? (tl (tl (tl V4994)))) (and (= () (tl (tl (tl (tl V4994))))) (= (hd (tl (tl (tl V4994)))) (hd (tl (tl (tl (hd (tl (tl V4994)))))))))))))))))))) (cons if (cons (cons and (cons (hd (tl V4994)) (cons (hd (tl (hd (tl (tl V4994))))) ()))) (cons (hd (tl (tl (hd (tl (tl V4994)))))) (tl (tl (tl V4994))))))) (true V4994)))

(defun shen.x.factorise-defun.concat/ (V4997 V4998) (concat V4997 (concat / V4998)))

(defun shen.x.factorise-defun.exp-var (V5000) (cond ((and (cons? V5000) (and (cons? (tl V5000)) (and (= () (tl (tl V5000))) (element? (hd V5000) (cons hd (cons tl (cons hdv (cons tlv (cons fst (cons snd (cons tlstr ()))))))))))) (shen.x.factorise-defun.concat/ (shen.x.factorise-defun.exp-var (hd (tl V5000))) (hd V5000))) ((and (cons? V5000) (and (= hdstr (hd V5000)) (and (cons? (tl V5000)) (= () (tl (tl V5000)))))) (shen.x.factorise-defun.concat/ (shen.x.factorise-defun.exp-var (hd (tl V5000))) hdstr)) (true V5000)))

(defun shen.x.factorise-defun.optimize-selectors (V5003 V5004) (shen.x.factorise-defun.bind-repeating-selectors (shen.x.factorise-defun.test->selectors V5003) V5004))

(defun shen.x.factorise-defun.test->selectors (V5010) (cond ((and (cons? V5010) (and (= cons? (hd V5010)) (and (cons? (tl V5010)) (= () (tl (tl V5010)))))) (cons (cons hd (tl V5010)) (cons (cons tl (tl V5010)) ()))) ((and (cons? V5010) (and (= tuple? (hd V5010)) (and (cons? (tl V5010)) (= () (tl (tl V5010)))))) (cons (cons fst (tl V5010)) (cons (cons snd (tl V5010)) ()))) ((and (cons? V5010) (and (= string? (hd V5010)) (and (cons? (tl V5010)) (= () (tl (tl V5010)))))) (cons (cons hdstr (tl V5010)) (cons (cons tlstr (tl V5010)) ()))) ((and (cons? V5010) (and (= vector? (hd V5010)) (and (cons? (tl V5010)) (= () (tl (tl V5010)))))) (cons (cons hdv (tl V5010)) (cons (cons tlv (tl V5010)) ()))) (true ())))

(defun shen.x.factorise-defun.bind-repeating-selectors (V5017 V5018) (cond ((and (cons? V5017) (and (cons? (tl V5017)) (= () (tl (tl V5017))))) (shen.x.factorise-defun.bind-selector (hd V5017) (shen.x.factorise-defun.bind-selector (hd (tl V5017)) V5018))) (true V5018)))

(defun shen.x.factorise-defun.bind-selector (V5025 V5026) (cond ((> (occurrences V5025 V5026) 1) (let Var (shen.x.factorise-defun.exp-var V5025) (cons let (cons Var (cons V5025 (cons (subst Var V5025 V5026) ())))))) (true V5026)))



