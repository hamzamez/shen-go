"Copyright (c) 2019 Bruno Deferrari.
BSD 3-Clause License: http://opensource.org/licenses/BSD-3-Clause"

(defun shen.x.features.cond-expand-macro (V4855) (cond ((and (cons? V4855) (and (= shen.x.features.cond-expand (hd V4855)) (= () (tl V4855)))) (simple-error "Unfulfilled shen.x.features.cond-expand clause.")) ((and (cons? V4855) (and (= shen.x.features.cond-expand (hd V4855)) (and (cons? (tl V4855)) (and (= true (hd (tl V4855))) (and (cons? (tl (tl V4855))) (= () (tl (tl (tl V4855))))))))) (hd (tl (tl V4855)))) ((and (cons? V4855) (and (= shen.x.features.cond-expand (hd V4855)) (and (cons? (tl V4855)) (and (cons? (hd (tl V4855))) (and (= and (hd (hd (tl V4855)))) (and (= () (tl (hd (tl V4855)))) (cons? (tl (tl V4855))))))))) (hd (tl (tl V4855)))) ((and (cons? V4855) (and (= shen.x.features.cond-expand (hd V4855)) (and (cons? (tl V4855)) (and (cons? (hd (tl V4855))) (and (= and (hd (hd (tl V4855)))) (and (cons? (tl (hd (tl V4855)))) (cons? (tl (tl V4855))))))))) (cons shen.x.features.cond-expand (cons (hd (tl (hd (tl V4855)))) (cons (cons shen.x.features.cond-expand (cons (cons and (tl (tl (hd (tl V4855))))) (tl (tl V4855)))) (tl (tl (tl V4855))))))) ((and (cons? V4855) (and (= shen.x.features.cond-expand (hd V4855)) (and (cons? (tl V4855)) (and (cons? (hd (tl V4855))) (and (= or (hd (hd (tl V4855)))) (and (= () (tl (hd (tl V4855)))) (cons? (tl (tl V4855))))))))) (cons shen.x.features.cond-expand (tl (tl (tl V4855))))) ((and (cons? V4855) (and (= shen.x.features.cond-expand (hd V4855)) (and (cons? (tl V4855)) (and (cons? (hd (tl V4855))) (and (= or (hd (hd (tl V4855)))) (and (cons? (tl (hd (tl V4855)))) (cons? (tl (tl V4855))))))))) (cons shen.x.features.cond-expand (cons (hd (tl (hd (tl V4855)))) (cons (hd (tl (tl V4855))) (cons true (cons (cons shen.x.features.cond-expand (cons (cons or (tl (tl (hd (tl V4855))))) (tl (tl V4855)))) ())))))) ((and (cons? V4855) (and (= shen.x.features.cond-expand (hd V4855)) (and (cons? (tl V4855)) (and (cons? (hd (tl V4855))) (and (= not (hd (hd (tl V4855)))) (and (cons? (tl (hd (tl V4855)))) (and (= () (tl (tl (hd (tl V4855))))) (cons? (tl (tl V4855)))))))))) (cons shen.x.features.cond-expand (cons (hd (tl (hd (tl V4855)))) (cons (cons shen.x.features.cond-expand (tl (tl (tl V4855)))) (cons true (cons (hd (tl (tl V4855))) ())))))) ((and (cons? V4855) (and (= shen.x.features.cond-expand (hd V4855)) (and (cons? (tl V4855)) (and (cons? (tl (tl V4855))) (element? (hd (tl V4855)) (value shen.x.features.*features*)))))) (hd (tl (tl V4855)))) ((and (cons? V4855) (and (= shen.x.features.cond-expand (hd V4855)) (and (cons? (tl V4855)) (cons? (tl (tl V4855)))))) (cons shen.x.features.cond-expand (tl (tl (tl V4855))))) (true V4855)))

(defun shen.x.features.current () (value shen.x.features.*features*))

(defun shen.x.features.initialise (V4857) (let _ (trap-error (value shen.x.features.*features*) (lambda E (do (set shen.x.features.*features* ()) (do (shen.set-lambda-form-entry (cons shen.x.features.cond-expand-macro (lambda X (shen.x.features.cond-expand-macro X)))) (shen.add-macro shen.x.features.cond-expand-macro))))) (let Old (shen.x.features.current) (let _ (set shen.x.features.*features* V4857) Old))))

(defun shen.x.features.add (V4859) (let Old (shen.x.features.current) (let _ (set shen.x.features.*features* (adjoin V4859 Old)) Old)))



