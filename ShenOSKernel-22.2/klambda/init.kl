"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.initialise-environment () (do (set shen.*installing-kl* false) (do (set shen.*history* ()) (do (set shen.*tc* false) (do (set *property-vector* (shen.dict 20000)) (do (set shen.*process-counter* 0) (do (set shen.*varcounter* (vector 10000)) (do (set shen.*prologvectors* (vector 10000)) (do (set shen.*demodulation-function* (lambda X X)) (do (set shen.*macroreg* (cons shen.timer-macro (cons shen.cases-macro (cons shen.abs-macro (cons shen.put/get-macro (cons shen.compile-macro (cons shen.datatype-macro (cons shen.let-macro (cons shen.assoc-macro (cons shen.make-string-macro (cons shen.output-macro (cons shen.input-macro (cons shen.error-macro (cons shen.prolog-macro (cons shen.synonyms-macro (cons shen.nl-macro (cons shen.@s-macro (cons shen.defprolog-macro (cons shen.function-macro ()))))))))))))))))))) (do (set *macros* (cons (lambda X (shen.timer-macro X)) (cons (lambda X (shen.cases-macro X)) (cons (lambda X (shen.abs-macro X)) (cons (lambda X (shen.put/get-macro X)) (cons (lambda X (shen.compile-macro X)) (cons (lambda X (shen.datatype-macro X)) (cons (lambda X (shen.let-macro X)) (cons (lambda X (shen.assoc-macro X)) (cons (lambda X (shen.make-string-macro X)) (cons (lambda X (shen.output-macro X)) (cons (lambda X (shen.input-macro X)) (cons (lambda X (shen.error-macro X)) (cons (lambda X (shen.prolog-macro X)) (cons (lambda X (shen.synonyms-macro X)) (cons (lambda X (shen.nl-macro X)) (cons (lambda X (shen.@s-macro X)) (cons (lambda X (shen.defprolog-macro X)) (cons (lambda X (shen.function-macro X)) ()))))))))))))))))))) (do (set shen.*gensym* 0) (do (set shen.*tracking* ()) (do (set shen.*alphabet* (cons A (cons B (cons C (cons D (cons E (cons F (cons G (cons H (cons I (cons J (cons K (cons L (cons M (cons N (cons O (cons P (cons Q (cons R (cons S (cons T (cons U (cons V (cons W (cons X (cons Y (cons Z ()))))))))))))))))))))))))))) (do (set shen.*special* (cons @p (cons @s (cons @v (cons cons (cons lambda (cons let (cons where (cons set (cons open ())))))))))) (do (set shen.*extraspecial* (cons define (cons shen.process-datatype (cons input+ (cons defcc (cons shen.read+ (cons defmacro ()))))))) (do (set shen.*spy* false) (do (set shen.*datatypes* ()) (do (set shen.*alldatatypes* ()) (do (set shen.*shen-type-theory-enabled?* true) (do (set shen.*synonyms* ()) (do (set shen.*system* ()) (do (set shen.*maxcomplexity* 128) (do (set shen.*occurs* true) (do (set shen.*maxinferences* 1000000) (do (set *maximum-print-sequence-size* 20) (do (set shen.*catch* 0) (do (set shen.*call* 0) (do (set shen.*infs* 0) (do (set *hush* false) (do (set shen.*optimise* false) (do (set *version* "Shen 22.2") (do (if (not (bound? *home-directory*)) (set *home-directory* "") shen.skip) (do (if (not (bound? *sterror*)) (set *sterror* (value *stoutput*)) shen.skip) (do (shen.initialise_arity_table (cons abort (cons 0 (cons absvector? (cons 1 (cons absvector (cons 1 (cons adjoin (cons 2 (cons and (cons 2 (cons append (cons 2 (cons arity (cons 1 (cons assoc (cons 2 (cons boolean? (cons 1 (cons bound? (cons 1 (cons cd (cons 1 (cons close (cons 1 (cons compile (cons 3 (cons concat (cons 2 (cons cons (cons 2 (cons cons? (cons 1 (cons cn (cons 2 (cons declare (cons 2 (cons destroy (cons 1 (cons difference (cons 2 (cons do (cons 2 (cons element? (cons 2 (cons empty? (cons 1 (cons enable-type-theory (cons 1 (cons error-to-string (cons 1 (cons shen.interror (cons 2 (cons eval (cons 1 (cons eval-kl (cons 1 (cons explode (cons 1 (cons external (cons 1 (cons fail-if (cons 2 (cons fail (cons 0 (cons fix (cons 2 (cons findall (cons 5 (cons freeze (cons 1 (cons fst (cons 1 (cons gensym (cons 1 (cons get (cons 3 (cons get-time (cons 1 (cons address-> (cons 3 (cons <-address (cons 2 (cons <-vector (cons 2 (cons > (cons 2 (cons >= (cons 2 (cons = (cons 2 (cons hash (cons 2 (cons hd (cons 1 (cons hdv (cons 1 (cons hdstr (cons 1 (cons head (cons 1 (cons if (cons 3 (cons integer? (cons 1 (cons intern (cons 1 (cons identical (cons 4 (cons inferences (cons 0 (cons input (cons 1 (cons input+ (cons 2 (cons implementation (cons 0 (cons intersection (cons 2 (cons internal (cons 1 (cons it (cons 0 (cons kill (cons 0 (cons language (cons 0 (cons length (cons 1 (cons limit (cons 1 (cons lineread (cons 1 (cons load (cons 1 (cons < (cons 2 (cons <= (cons 2 (cons vector (cons 1 (cons macroexpand (cons 1 (cons map (cons 2 (cons mapcan (cons 2 (cons maxinferences (cons 1 (cons nl (cons 1 (cons not (cons 1 (cons nth (cons 2 (cons n->string (cons 1 (cons number? (cons 1 (cons occurs-check (cons 1 (cons occurrences (cons 2 (cons occurs-check (cons 1 (cons open (cons 2 (cons optimise (cons 1 (cons or (cons 2 (cons os (cons 0 (cons package (cons 3 (cons package? (cons 1 (cons port (cons 0 (cons porters (cons 0 (cons pos (cons 2 (cons print (cons 1 (cons profile (cons 1 (cons profile-results (cons 1 (cons pr (cons 2 (cons ps (cons 1 (cons preclude (cons 1 (cons preclude-all-but (cons 1 (cons protect (cons 1 (cons address-> (cons 3 (cons put (cons 4 (cons shen.reassemble (cons 2 (cons read-file-as-string (cons 1 (cons read-file (cons 1 (cons read-file-as-bytelist (cons 1 (cons read (cons 1 (cons read-byte (cons 1 (cons read-from-string (cons 1 (cons receive (cons 1 (cons release (cons 0 (cons remove (cons 2 (cons shen.require (cons 3 (cons reverse (cons 1 (cons set (cons 2 (cons simple-error (cons 1 (cons snd (cons 1 (cons specialise (cons 1 (cons spy (cons 1 (cons step (cons 1 (cons stinput (cons 0 (cons stoutput (cons 0 (cons sterror (cons 0 (cons string->n (cons 1 (cons string->symbol (cons 1 (cons string? (cons 1 (cons str (cons 1 (cons subst (cons 3 (cons sum (cons 1 (cons symbol? (cons 1 (cons systemf (cons 1 (cons tail (cons 1 (cons tl (cons 1 (cons tc (cons 1 (cons tc? (cons 0 (cons thaw (cons 1 (cons tlstr (cons 1 (cons track (cons 1 (cons trap-error (cons 2 (cons tuple? (cons 1 (cons type (cons 2 (cons return (cons 3 (cons undefmacro (cons 1 (cons unput (cons 3 (cons unprofile (cons 1 (cons unify (cons 4 (cons unify! (cons 4 (cons union (cons 2 (cons untrack (cons 1 (cons unspecialise (cons 1 (cons undefmacro (cons 1 (cons vector (cons 1 (cons vector? (cons 1 (cons vector-> (cons 3 (cons value (cons 1 (cons variable? (cons 1 (cons version (cons 0 (cons write-byte (cons 2 (cons write-to-file (cons 2 (cons y-or-n? (cons 1 (cons + (cons 2 (cons * (cons 2 (cons / (cons 2 (cons - (cons 2 (cons == (cons 2 (cons <e> (cons 1 (cons <!> (cons 1 (cons @p (cons 2 (cons @v (cons 2 (cons @s (cons 2 (cons preclude (cons 1 (cons include (cons 1 (cons preclude-all-but (cons 1 (cons include-all-but (cons 1 ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (do (put (intern "shen") shen.external-symbols (cons ! (cons } (cons { (cons --> (cons <-- (cons && (cons : (cons ; (cons :- (cons := (cons _ (cons , (cons *language* (cons *implementation* (cons *stinput* (cons *stoutput* (cons *sterror* (cons *home-directory* (cons *version* (cons *maximum-print-sequence-size* (cons *macros* (cons *os* (cons *release* (cons *property-vector* (cons *port* (cons *porters* (cons *hush* (cons @v (cons @p (cons @s (cons <- (cons -> (cons <e> (cons <!> (cons == (cons = (cons >= (cons > (cons /. (cons =! (cons $ (cons - (cons / (cons * (cons + (cons <= (cons < (cons >> (cons y-or-n? (cons write-to-file (cons write-byte (cons where (cons when (cons warn (cons version (cons verified (cons variable? (cons value (cons vector-> (cons <-vector (cons vector (cons vector? (cons unspecialise (cons untrack (cons unit (cons shen.unix (cons union (cons unify (cons unify! (cons unput (cons unprofile (cons undefmacro (cons return (cons type (cons tuple? (cons true (cons trap-error (cons track (cons time (cons thaw (cons tc? (cons tc (cons tl (cons tlstr (cons tlv (cons tail (cons systemf (cons synonyms (cons symbol (cons symbol? (cons string->symbol (cons sum (cons subst (cons string? (cons string->n (cons stream (cons string (cons stinput (cons sterror (cons stoutput (cons step (cons spy (cons specialise (cons snd (cons simple-error (cons set (cons save (cons str (cons run (cons reverse (cons remove (cons release (cons read (cons receive (cons read-file (cons read-file-as-bytelist (cons read-file-as-string (cons read-byte (cons read-from-string (cons package? (cons put (cons preclude (cons preclude-all-but (cons ps (cons prolog? (cons protect (cons profile-results (cons profile (cons print (cons pr (cons pos (cons porters (cons port (cons package (cons output (cons out (cons os (cons or (cons optimise (cons open (cons occurrences (cons occurs-check (cons n->string (cons number? (cons number (cons null (cons nth (cons not (cons nl (cons mode (cons macroexpand (cons maxinferences (cons mapcan (cons map (cons make-string (cons load (cons loaded (cons list (cons lineread (cons limit (cons length (cons let (cons lazy (cons lambda (cons language (cons kill (cons is (cons intersection (cons inferences (cons intern (cons integer? (cons input (cons input+ (cons include (cons include-all-but (cons it (cons in (cons internal (cons implementation (cons if (cons identical (cons head (cons hd (cons hdv (cons hdstr (cons hash (cons get (cons get-time (cons gensym (cons function (cons fst (cons freeze (cons fix (cons file (cons fail (cons fail-if (cons fwhen (cons findall (cons false (cons enable-type-theory (cons explode (cons external (cons exception (cons eval-kl (cons eval (cons error-to-string (cons error (cons empty? (cons element? (cons do (cons difference (cons destroy (cons defun (cons define (cons defmacro (cons defcc (cons defprolog (cons declare (cons datatype (cons cut (cons cn (cons cons? (cons cons (cons cond (cons concat (cons compile (cons cd (cons cases (cons call (cons close (cons bind (cons bound? (cons boolean? (cons boolean (cons bar! (cons assoc (cons arity (cons abort (cons append (cons and (cons adjoin (cons <-address (cons address-> (cons absvector? (cons absvector ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (value *property-vector*)) (do (set shen.*history* ()) (do (set shen.*step* false) (set shen.*empty-absvector* (absvector 0))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise-signedfuncs () (do (set shen.*signedfuncs* ()) (do (set shen.*signedfuncs* (cons (cons absvector? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons adjoin (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons and (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.app (cons A (cons --> (cons (cons string (cons --> (cons (cons symbol (cons --> (cons string ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons append (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons arity (cons A (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons assoc (cons A (cons --> (cons (cons (cons list (cons (cons list (cons A ())) ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons boolean? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons bound? (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons cd (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons close (cons (cons stream (cons A ())) (cons --> (cons (cons list (cons B ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons cn (cons string (cons --> (cons (cons string (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons compile (cons (cons A (cons shen.==> (cons B ()))) (cons --> (cons (cons A (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons --> (cons B ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons cons? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons destroy (cons (cons A (cons --> (cons B ()))) (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons difference (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons do (cons A (cons --> (cons (cons B (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <e> (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons B ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <!> (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons element? (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons empty? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons enable-type-theory (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons external (cons symbol (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons error-to-string (cons exception (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons explode (cons A (cons --> (cons (cons list (cons string ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fail (cons --> (cons symbol ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fail-if (cons (cons symbol (cons --> (cons boolean ()))) (cons --> (cons (cons symbol (cons --> (cons symbol ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fix (cons (cons A (cons --> (cons A ()))) (cons --> (cons (cons A (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons freeze (cons A (cons --> (cons (cons lazy (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fst (cons (cons A (cons * (cons B ()))) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons function (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons gensym (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <-vector (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons vector-> (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons (cons A (cons --> (cons (cons vector (cons A ())) ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons vector (cons number (cons --> (cons (cons vector (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons get-time (cons symbol (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons hash (cons A (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons head (cons (cons list (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons hdv (cons (cons vector (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons hdstr (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons if (cons boolean (cons --> (cons (cons A (cons --> (cons (cons A (cons --> (cons A ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons it (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons implementation (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons include (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons include-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons inferences (cons --> (cons number ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.insert (cons A (cons --> (cons (cons string (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons integer? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons internal (cons symbol (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons intersection (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons kill (cons --> (cons A ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons language (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons length (cons (cons list (cons A ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons limit (cons (cons vector (cons A ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons load (cons string (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons map (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons mapcan (cons (cons A (cons --> (cons (cons list (cons B ())) ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons maxinferences (cons number (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons n->string (cons number (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons nl (cons number (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons not (cons boolean (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons nth (cons number (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons number? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons occurrences (cons A (cons --> (cons (cons B (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons occurs-check (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons optimise (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons or (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons os (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons package? (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons port (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons porters (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons pos (cons string (cons --> (cons (cons number (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons pr (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons print (cons A (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons profile (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons preclude (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.proc-nl (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons profile-results (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons * (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons protect (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons preclude-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.prhush (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons ps (cons symbol (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read (cons (cons stream (cons in ())) (cons --> (cons unit ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-byte (cons (cons stream (cons in ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-file-as-bytelist (cons string (cons --> (cons (cons list (cons number ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-file-as-string (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-file (cons string (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-from-string (cons string (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons release (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons remove (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons reverse (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons simple-error (cons string (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons snd (cons (cons A (cons * (cons B ()))) (cons --> (cons B ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons specialise (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons spy (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons step (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons stinput (cons --> (cons (cons stream (cons in ())) ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons sterror (cons --> (cons (cons stream (cons out ())) ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons stoutput (cons --> (cons (cons stream (cons out ())) ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons string? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons str (cons A (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons string->n (cons string (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons string->symbol (cons string (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons sum (cons (cons list (cons number ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons symbol? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons systemf (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tail (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tlstr (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tlv (cons (cons vector (cons A ())) (cons --> (cons (cons vector (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tc (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tc? (cons --> (cons boolean ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons thaw (cons (cons lazy (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons track (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons trap-error (cons A (cons --> (cons (cons (cons exception (cons --> (cons A ()))) (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tuple? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons undefmacro (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons union (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons unprofile (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons untrack (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons unspecialise (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons variable? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons vector? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons version (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons write-to-file (cons string (cons --> (cons (cons A (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons write-byte (cons number (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons y-or-n? (cons string (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons > (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons < (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons >= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons = (cons A (cons --> (cons (cons A (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons + (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons / (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons - (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons * (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (set shen.*signedfuncs* (cons (cons == (cons A (cons --> (cons (cons B (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise-signedfunc-lambda-forms () (do (shen.set-lambda-form-entry (cons shen.type-signature-of-absvector? (lambda V4559 (lambda V4560 (lambda V4561 (shen.type-signature-of-absvector? V4559 V4560 V4561)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-adjoin (lambda V4549 (lambda V4550 (lambda V4551 (shen.type-signature-of-adjoin V4549 V4550 V4551)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-and (lambda V4539 (lambda V4540 (lambda V4541 (shen.type-signature-of-and V4539 V4540 V4541)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.app (lambda V4529 (lambda V4530 (lambda V4531 (shen.type-signature-of-shen.app V4529 V4530 V4531)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-append (lambda V4519 (lambda V4520 (lambda V4521 (shen.type-signature-of-append V4519 V4520 V4521)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-arity (lambda V4509 (lambda V4510 (lambda V4511 (shen.type-signature-of-arity V4509 V4510 V4511)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-assoc (lambda V4499 (lambda V4500 (lambda V4501 (shen.type-signature-of-assoc V4499 V4500 V4501)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-boolean? (lambda V4489 (lambda V4490 (lambda V4491 (shen.type-signature-of-boolean? V4489 V4490 V4491)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-bound? (lambda V4479 (lambda V4480 (lambda V4481 (shen.type-signature-of-bound? V4479 V4480 V4481)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cd (lambda V4469 (lambda V4470 (lambda V4471 (shen.type-signature-of-cd V4469 V4470 V4471)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-close (lambda V4459 (lambda V4460 (lambda V4461 (shen.type-signature-of-close V4459 V4460 V4461)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cn (lambda V4449 (lambda V4450 (lambda V4451 (shen.type-signature-of-cn V4449 V4450 V4451)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-compile (lambda V4439 (lambda V4440 (lambda V4441 (shen.type-signature-of-compile V4439 V4440 V4441)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cons? (lambda V4429 (lambda V4430 (lambda V4431 (shen.type-signature-of-cons? V4429 V4430 V4431)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-destroy (lambda V4419 (lambda V4420 (lambda V4421 (shen.type-signature-of-destroy V4419 V4420 V4421)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-difference (lambda V4409 (lambda V4410 (lambda V4411 (shen.type-signature-of-difference V4409 V4410 V4411)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-do (lambda V4399 (lambda V4400 (lambda V4401 (shen.type-signature-of-do V4399 V4400 V4401)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<e> (lambda V4389 (lambda V4390 (lambda V4391 (shen.type-signature-of-<e> V4389 V4390 V4391)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<!> (lambda V4379 (lambda V4380 (lambda V4381 (shen.type-signature-of-<!> V4379 V4380 V4381)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-element? (lambda V4369 (lambda V4370 (lambda V4371 (shen.type-signature-of-element? V4369 V4370 V4371)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-empty? (lambda V4359 (lambda V4360 (lambda V4361 (shen.type-signature-of-empty? V4359 V4360 V4361)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-enable-type-theory (lambda V4349 (lambda V4350 (lambda V4351 (shen.type-signature-of-enable-type-theory V4349 V4350 V4351)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-external (lambda V4339 (lambda V4340 (lambda V4341 (shen.type-signature-of-external V4339 V4340 V4341)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-error-to-string (lambda V4329 (lambda V4330 (lambda V4331 (shen.type-signature-of-error-to-string V4329 V4330 V4331)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-explode (lambda V4319 (lambda V4320 (lambda V4321 (shen.type-signature-of-explode V4319 V4320 V4321)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fail (lambda V4309 (lambda V4310 (lambda V4311 (shen.type-signature-of-fail V4309 V4310 V4311)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fail-if (lambda V4299 (lambda V4300 (lambda V4301 (shen.type-signature-of-fail-if V4299 V4300 V4301)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fix (lambda V4289 (lambda V4290 (lambda V4291 (shen.type-signature-of-fix V4289 V4290 V4291)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-freeze (lambda V4279 (lambda V4280 (lambda V4281 (shen.type-signature-of-freeze V4279 V4280 V4281)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fst (lambda V4269 (lambda V4270 (lambda V4271 (shen.type-signature-of-fst V4269 V4270 V4271)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-function (lambda V4259 (lambda V4260 (lambda V4261 (shen.type-signature-of-function V4259 V4260 V4261)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-gensym (lambda V4249 (lambda V4250 (lambda V4251 (shen.type-signature-of-gensym V4249 V4250 V4251)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<-vector (lambda V4239 (lambda V4240 (lambda V4241 (shen.type-signature-of-<-vector V4239 V4240 V4241)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector-> (lambda V4229 (lambda V4230 (lambda V4231 (shen.type-signature-of-vector-> V4229 V4230 V4231)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector (lambda V4219 (lambda V4220 (lambda V4221 (shen.type-signature-of-vector V4219 V4220 V4221)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-get-time (lambda V4209 (lambda V4210 (lambda V4211 (shen.type-signature-of-get-time V4209 V4210 V4211)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hash (lambda V4199 (lambda V4200 (lambda V4201 (shen.type-signature-of-hash V4199 V4200 V4201)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-head (lambda V4189 (lambda V4190 (lambda V4191 (shen.type-signature-of-head V4189 V4190 V4191)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hdv (lambda V4179 (lambda V4180 (lambda V4181 (shen.type-signature-of-hdv V4179 V4180 V4181)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hdstr (lambda V4169 (lambda V4170 (lambda V4171 (shen.type-signature-of-hdstr V4169 V4170 V4171)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-if (lambda V4159 (lambda V4160 (lambda V4161 (shen.type-signature-of-if V4159 V4160 V4161)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-it (lambda V4149 (lambda V4150 (lambda V4151 (shen.type-signature-of-it V4149 V4150 V4151)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-implementation (lambda V4139 (lambda V4140 (lambda V4141 (shen.type-signature-of-implementation V4139 V4140 V4141)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-include (lambda V4129 (lambda V4130 (lambda V4131 (shen.type-signature-of-include V4129 V4130 V4131)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-include-all-but (lambda V4119 (lambda V4120 (lambda V4121 (shen.type-signature-of-include-all-but V4119 V4120 V4121)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-inferences (lambda V4109 (lambda V4110 (lambda V4111 (shen.type-signature-of-inferences V4109 V4110 V4111)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.insert (lambda V4099 (lambda V4100 (lambda V4101 (shen.type-signature-of-shen.insert V4099 V4100 V4101)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-integer? (lambda V4089 (lambda V4090 (lambda V4091 (shen.type-signature-of-integer? V4089 V4090 V4091)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-internal (lambda V4079 (lambda V4080 (lambda V4081 (shen.type-signature-of-internal V4079 V4080 V4081)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-intersection (lambda V4069 (lambda V4070 (lambda V4071 (shen.type-signature-of-intersection V4069 V4070 V4071)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-kill (lambda V4059 (lambda V4060 (lambda V4061 (shen.type-signature-of-kill V4059 V4060 V4061)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-language (lambda V4049 (lambda V4050 (lambda V4051 (shen.type-signature-of-language V4049 V4050 V4051)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-length (lambda V4039 (lambda V4040 (lambda V4041 (shen.type-signature-of-length V4039 V4040 V4041)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-limit (lambda V4029 (lambda V4030 (lambda V4031 (shen.type-signature-of-limit V4029 V4030 V4031)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-load (lambda V4019 (lambda V4020 (lambda V4021 (shen.type-signature-of-load V4019 V4020 V4021)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-map (lambda V4009 (lambda V4010 (lambda V4011 (shen.type-signature-of-map V4009 V4010 V4011)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-mapcan (lambda V3999 (lambda V4000 (lambda V4001 (shen.type-signature-of-mapcan V3999 V4000 V4001)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-maxinferences (lambda V3989 (lambda V3990 (lambda V3991 (shen.type-signature-of-maxinferences V3989 V3990 V3991)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-n->string (lambda V3979 (lambda V3980 (lambda V3981 (shen.type-signature-of-n->string V3979 V3980 V3981)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-nl (lambda V3969 (lambda V3970 (lambda V3971 (shen.type-signature-of-nl V3969 V3970 V3971)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-not (lambda V3959 (lambda V3960 (lambda V3961 (shen.type-signature-of-not V3959 V3960 V3961)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-nth (lambda V3949 (lambda V3950 (lambda V3951 (shen.type-signature-of-nth V3949 V3950 V3951)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-number? (lambda V3939 (lambda V3940 (lambda V3941 (shen.type-signature-of-number? V3939 V3940 V3941)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-occurrences (lambda V3929 (lambda V3930 (lambda V3931 (shen.type-signature-of-occurrences V3929 V3930 V3931)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-occurs-check (lambda V3919 (lambda V3920 (lambda V3921 (shen.type-signature-of-occurs-check V3919 V3920 V3921)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-optimise (lambda V3909 (lambda V3910 (lambda V3911 (shen.type-signature-of-optimise V3909 V3910 V3911)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-or (lambda V3899 (lambda V3900 (lambda V3901 (shen.type-signature-of-or V3899 V3900 V3901)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-os (lambda V3889 (lambda V3890 (lambda V3891 (shen.type-signature-of-os V3889 V3890 V3891)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-package? (lambda V3879 (lambda V3880 (lambda V3881 (shen.type-signature-of-package? V3879 V3880 V3881)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-port (lambda V3869 (lambda V3870 (lambda V3871 (shen.type-signature-of-port V3869 V3870 V3871)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-porters (lambda V3859 (lambda V3860 (lambda V3861 (shen.type-signature-of-porters V3859 V3860 V3861)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-pos (lambda V3849 (lambda V3850 (lambda V3851 (shen.type-signature-of-pos V3849 V3850 V3851)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-pr (lambda V3839 (lambda V3840 (lambda V3841 (shen.type-signature-of-pr V3839 V3840 V3841)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-print (lambda V3829 (lambda V3830 (lambda V3831 (shen.type-signature-of-print V3829 V3830 V3831)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-profile (lambda V3819 (lambda V3820 (lambda V3821 (shen.type-signature-of-profile V3819 V3820 V3821)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-preclude (lambda V3809 (lambda V3810 (lambda V3811 (shen.type-signature-of-preclude V3809 V3810 V3811)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.proc-nl (lambda V3799 (lambda V3800 (lambda V3801 (shen.type-signature-of-shen.proc-nl V3799 V3800 V3801)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-profile-results (lambda V3789 (lambda V3790 (lambda V3791 (shen.type-signature-of-profile-results V3789 V3790 V3791)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-protect (lambda V3779 (lambda V3780 (lambda V3781 (shen.type-signature-of-protect V3779 V3780 V3781)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-preclude-all-but (lambda V3769 (lambda V3770 (lambda V3771 (shen.type-signature-of-preclude-all-but V3769 V3770 V3771)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.prhush (lambda V3759 (lambda V3760 (lambda V3761 (shen.type-signature-of-shen.prhush V3759 V3760 V3761)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-ps (lambda V3749 (lambda V3750 (lambda V3751 (shen.type-signature-of-ps V3749 V3750 V3751)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read (lambda V3739 (lambda V3740 (lambda V3741 (shen.type-signature-of-read V3739 V3740 V3741)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-byte (lambda V3729 (lambda V3730 (lambda V3731 (shen.type-signature-of-read-byte V3729 V3730 V3731)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file-as-bytelist (lambda V3719 (lambda V3720 (lambda V3721 (shen.type-signature-of-read-file-as-bytelist V3719 V3720 V3721)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file-as-string (lambda V3709 (lambda V3710 (lambda V3711 (shen.type-signature-of-read-file-as-string V3709 V3710 V3711)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file (lambda V3699 (lambda V3700 (lambda V3701 (shen.type-signature-of-read-file V3699 V3700 V3701)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-from-string (lambda V3689 (lambda V3690 (lambda V3691 (shen.type-signature-of-read-from-string V3689 V3690 V3691)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-release (lambda V3679 (lambda V3680 (lambda V3681 (shen.type-signature-of-release V3679 V3680 V3681)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-remove (lambda V3669 (lambda V3670 (lambda V3671 (shen.type-signature-of-remove V3669 V3670 V3671)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-reverse (lambda V3659 (lambda V3660 (lambda V3661 (shen.type-signature-of-reverse V3659 V3660 V3661)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-simple-error (lambda V3649 (lambda V3650 (lambda V3651 (shen.type-signature-of-simple-error V3649 V3650 V3651)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-snd (lambda V3639 (lambda V3640 (lambda V3641 (shen.type-signature-of-snd V3639 V3640 V3641)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-specialise (lambda V3629 (lambda V3630 (lambda V3631 (shen.type-signature-of-specialise V3629 V3630 V3631)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-spy (lambda V3619 (lambda V3620 (lambda V3621 (shen.type-signature-of-spy V3619 V3620 V3621)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-step (lambda V3609 (lambda V3610 (lambda V3611 (shen.type-signature-of-step V3609 V3610 V3611)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-stinput (lambda V3599 (lambda V3600 (lambda V3601 (shen.type-signature-of-stinput V3599 V3600 V3601)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-sterror (lambda V3589 (lambda V3590 (lambda V3591 (shen.type-signature-of-sterror V3589 V3590 V3591)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-stoutput (lambda V3579 (lambda V3580 (lambda V3581 (shen.type-signature-of-stoutput V3579 V3580 V3581)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string? (lambda V3569 (lambda V3570 (lambda V3571 (shen.type-signature-of-string? V3569 V3570 V3571)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-str (lambda V3559 (lambda V3560 (lambda V3561 (shen.type-signature-of-str V3559 V3560 V3561)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string->n (lambda V3549 (lambda V3550 (lambda V3551 (shen.type-signature-of-string->n V3549 V3550 V3551)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string->symbol (lambda V3539 (lambda V3540 (lambda V3541 (shen.type-signature-of-string->symbol V3539 V3540 V3541)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-sum (lambda V3529 (lambda V3530 (lambda V3531 (shen.type-signature-of-sum V3529 V3530 V3531)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-symbol? (lambda V3519 (lambda V3520 (lambda V3521 (shen.type-signature-of-symbol? V3519 V3520 V3521)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-systemf (lambda V3509 (lambda V3510 (lambda V3511 (shen.type-signature-of-systemf V3509 V3510 V3511)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tail (lambda V3499 (lambda V3500 (lambda V3501 (shen.type-signature-of-tail V3499 V3500 V3501)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tlstr (lambda V3489 (lambda V3490 (lambda V3491 (shen.type-signature-of-tlstr V3489 V3490 V3491)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tlv (lambda V3479 (lambda V3480 (lambda V3481 (shen.type-signature-of-tlv V3479 V3480 V3481)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tc (lambda V3469 (lambda V3470 (lambda V3471 (shen.type-signature-of-tc V3469 V3470 V3471)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tc? (lambda V3459 (lambda V3460 (lambda V3461 (shen.type-signature-of-tc? V3459 V3460 V3461)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-thaw (lambda V3449 (lambda V3450 (lambda V3451 (shen.type-signature-of-thaw V3449 V3450 V3451)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-track (lambda V3439 (lambda V3440 (lambda V3441 (shen.type-signature-of-track V3439 V3440 V3441)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-trap-error (lambda V3429 (lambda V3430 (lambda V3431 (shen.type-signature-of-trap-error V3429 V3430 V3431)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tuple? (lambda V3419 (lambda V3420 (lambda V3421 (shen.type-signature-of-tuple? V3419 V3420 V3421)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-undefmacro (lambda V3409 (lambda V3410 (lambda V3411 (shen.type-signature-of-undefmacro V3409 V3410 V3411)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-union (lambda V3399 (lambda V3400 (lambda V3401 (shen.type-signature-of-union V3399 V3400 V3401)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-unprofile (lambda V3389 (lambda V3390 (lambda V3391 (shen.type-signature-of-unprofile V3389 V3390 V3391)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-untrack (lambda V3379 (lambda V3380 (lambda V3381 (shen.type-signature-of-untrack V3379 V3380 V3381)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-unspecialise (lambda V3369 (lambda V3370 (lambda V3371 (shen.type-signature-of-unspecialise V3369 V3370 V3371)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-variable? (lambda V3359 (lambda V3360 (lambda V3361 (shen.type-signature-of-variable? V3359 V3360 V3361)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector? (lambda V3349 (lambda V3350 (lambda V3351 (shen.type-signature-of-vector? V3349 V3350 V3351)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-version (lambda V3339 (lambda V3340 (lambda V3341 (shen.type-signature-of-version V3339 V3340 V3341)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-write-to-file (lambda V3329 (lambda V3330 (lambda V3331 (shen.type-signature-of-write-to-file V3329 V3330 V3331)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-write-byte (lambda V3319 (lambda V3320 (lambda V3321 (shen.type-signature-of-write-byte V3319 V3320 V3321)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-y-or-n? (lambda V3309 (lambda V3310 (lambda V3311 (shen.type-signature-of-y-or-n? V3309 V3310 V3311)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-> (lambda V3299 (lambda V3300 (lambda V3301 (shen.type-signature-of-> V3299 V3300 V3301)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-< (lambda V3289 (lambda V3290 (lambda V3291 (shen.type-signature-of-< V3289 V3290 V3291)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of->= (lambda V3279 (lambda V3280 (lambda V3281 (shen.type-signature-of->= V3279 V3280 V3281)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<= (lambda V3269 (lambda V3270 (lambda V3271 (shen.type-signature-of-<= V3269 V3270 V3271)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-= (lambda V3259 (lambda V3260 (lambda V3261 (shen.type-signature-of-= V3259 V3260 V3261)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-+ (lambda V3249 (lambda V3250 (lambda V3251 (shen.type-signature-of-+ V3249 V3250 V3251)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-/ (lambda V3239 (lambda V3240 (lambda V3241 (shen.type-signature-of-/ V3239 V3240 V3241)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-- (lambda V3229 (lambda V3230 (lambda V3231 (shen.type-signature-of-- V3229 V3230 V3231)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-* (lambda V3219 (lambda V3220 (lambda V3221 (shen.type-signature-of-* V3219 V3220 V3221)))))) (shen.set-lambda-form-entry (cons shen.type-signature-of-== (lambda V3209 (lambda V3210 (lambda V3211 (shen.type-signature-of-== V3209 V3210 V3211))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise-lambda-forms () (do (shen.set-lambda-form-entry (cons shen.datatype-error (lambda X (shen.datatype-error X)))) (do (shen.set-lambda-form-entry (cons shen.tuple (lambda X (shen.tuple X)))) (do (shen.set-lambda-form-entry (cons shen.pvar (lambda X (shen.pvar X)))) (do (shen.set-lambda-form-entry (cons shen.dictionary (lambda X (shen.dictionary X)))) (do (shen.set-lambda-form-entry (cons @v (lambda V668 (lambda V669 (@v V668 V669))))) (do (shen.set-lambda-form-entry (cons @p (lambda V666 (lambda V667 (@p V666 V667))))) (do (shen.set-lambda-form-entry (cons @s (lambda V664 (lambda V665 (@s V664 V665))))) (do (shen.set-lambda-form-entry (cons <e> (lambda V663 (<e> V663)))) (do (shen.set-lambda-form-entry (cons <!> (lambda V662 (<!> V662)))) (do (shen.set-lambda-form-entry (cons == (lambda V660 (lambda V661 (== V660 V661))))) (do (shen.set-lambda-form-entry (cons = (lambda V658 (lambda V659 (= V658 V659))))) (do (shen.set-lambda-form-entry (cons >= (lambda V656 (lambda V657 (>= V656 V657))))) (do (shen.set-lambda-form-entry (cons > (lambda V654 (lambda V655 (> V654 V655))))) (do (shen.set-lambda-form-entry (cons - (lambda V652 (lambda V653 (- V652 V653))))) (do (shen.set-lambda-form-entry (cons / (lambda V650 (lambda V651 (/ V650 V651))))) (do (shen.set-lambda-form-entry (cons * (lambda V648 (lambda V649 (* V648 V649))))) (do (shen.set-lambda-form-entry (cons + (lambda V646 (lambda V647 (+ V646 V647))))) (do (shen.set-lambda-form-entry (cons <= (lambda V644 (lambda V645 (<= V644 V645))))) (do (shen.set-lambda-form-entry (cons < (lambda V642 (lambda V643 (< V642 V643))))) (do (shen.set-lambda-form-entry (cons y-or-n? (lambda V641 (y-or-n? V641)))) (do (shen.set-lambda-form-entry (cons write-to-file (lambda V639 (lambda V640 (write-to-file V639 V640))))) (do (shen.set-lambda-form-entry (cons write-byte (lambda V637 (lambda V638 (write-byte V637 V638))))) (do (shen.set-lambda-form-entry (cons variable? (lambda V636 (variable? V636)))) (do (shen.set-lambda-form-entry (cons value (lambda V635 (value V635)))) (do (shen.set-lambda-form-entry (cons vector-> (lambda V632 (lambda V633 (lambda V634 (vector-> V632 V633 V634)))))) (do (shen.set-lambda-form-entry (cons <-vector (lambda V630 (lambda V631 (<-vector V630 V631))))) (do (shen.set-lambda-form-entry (cons vector (lambda V629 (vector V629)))) (do (shen.set-lambda-form-entry (cons vector? (lambda V628 (vector? V628)))) (do (shen.set-lambda-form-entry (cons unspecialise (lambda V627 (unspecialise V627)))) (do (shen.set-lambda-form-entry (cons untrack (lambda V626 (untrack V626)))) (do (shen.set-lambda-form-entry (cons union (lambda V624 (lambda V625 (union V624 V625))))) (do (shen.set-lambda-form-entry (cons unify (lambda V620 (lambda V621 (lambda V622 (lambda V623 (unify V620 V621 V622 V623))))))) (do (shen.set-lambda-form-entry (cons unify! (lambda V616 (lambda V617 (lambda V618 (lambda V619 (unify! V616 V617 V618 V619))))))) (do (shen.set-lambda-form-entry (cons unput (lambda V613 (lambda V614 (lambda V615 (unput V613 V614 V615)))))) (do (shen.set-lambda-form-entry (cons unprofile (lambda V612 (unprofile V612)))) (do (shen.set-lambda-form-entry (cons undefmacro (lambda V611 (undefmacro V611)))) (do (shen.set-lambda-form-entry (cons return (lambda V608 (lambda V609 (lambda V610 (return V608 V609 V610)))))) (do (shen.set-lambda-form-entry (cons type (lambda V606 (lambda V607 (type V606 V607))))) (do (shen.set-lambda-form-entry (cons tuple? (lambda V605 (tuple? V605)))) (do (shen.set-lambda-form-entry (cons trap-error (lambda V603 (lambda V604 (trap-error V603 V604))))) (do (shen.set-lambda-form-entry (cons track (lambda V602 (track V602)))) (do (shen.set-lambda-form-entry (cons thaw (lambda V601 (thaw V601)))) (do (shen.set-lambda-form-entry (cons tc (lambda V600 (tc V600)))) (do (shen.set-lambda-form-entry (cons tl (lambda V599 (tl V599)))) (do (shen.set-lambda-form-entry (cons tlstr (lambda V598 (tlstr V598)))) (do (shen.set-lambda-form-entry (cons tail (lambda V597 (tail V597)))) (do (shen.set-lambda-form-entry (cons systemf (lambda V596 (systemf V596)))) (do (shen.set-lambda-form-entry (cons symbol? (lambda V595 (symbol? V595)))) (do (shen.set-lambda-form-entry (cons string->symbol (lambda V594 (string->symbol V594)))) (do (shen.set-lambda-form-entry (cons sum (lambda V593 (sum V593)))) (do (shen.set-lambda-form-entry (cons subst (lambda V590 (lambda V591 (lambda V592 (subst V590 V591 V592)))))) (do (shen.set-lambda-form-entry (cons string? (lambda V589 (string? V589)))) (do (shen.set-lambda-form-entry (cons string->n (lambda V588 (string->n V588)))) (do (shen.set-lambda-form-entry (cons step (lambda V587 (step V587)))) (do (shen.set-lambda-form-entry (cons spy (lambda V586 (spy V586)))) (do (shen.set-lambda-form-entry (cons specialise (lambda V585 (specialise V585)))) (do (shen.set-lambda-form-entry (cons snd (lambda V584 (snd V584)))) (do (shen.set-lambda-form-entry (cons simple-error (lambda V583 (simple-error V583)))) (do (shen.set-lambda-form-entry (cons set (lambda V581 (lambda V582 (set V581 V582))))) (do (shen.set-lambda-form-entry (cons str (lambda V580 (str V580)))) (do (shen.set-lambda-form-entry (cons reverse (lambda V579 (reverse V579)))) (do (shen.set-lambda-form-entry (cons remove (lambda V577 (lambda V578 (remove V577 V578))))) (do (shen.set-lambda-form-entry (cons read (lambda V576 (read V576)))) (do (shen.set-lambda-form-entry (cons read-file (lambda V575 (read-file V575)))) (do (shen.set-lambda-form-entry (cons read-file-as-bytelist (lambda V574 (read-file-as-bytelist V574)))) (do (shen.set-lambda-form-entry (cons read-file-as-string (lambda V573 (read-file-as-string V573)))) (do (shen.set-lambda-form-entry (cons read-byte (lambda V572 (read-byte V572)))) (do (shen.set-lambda-form-entry (cons read-from-string (lambda V571 (read-from-string V571)))) (do (shen.set-lambda-form-entry (cons package? (lambda V570 (package? V570)))) (do (shen.set-lambda-form-entry (cons put (lambda V566 (lambda V567 (lambda V568 (lambda V569 (put V566 V567 V568 V569))))))) (do (shen.set-lambda-form-entry (cons preclude (lambda V565 (preclude V565)))) (do (shen.set-lambda-form-entry (cons preclude-all-but (lambda V564 (preclude-all-but V564)))) (do (shen.set-lambda-form-entry (cons ps (lambda V563 (ps V563)))) (do (shen.set-lambda-form-entry (cons protect (lambda V562 (protect V562)))) (do (shen.set-lambda-form-entry (cons profile-results (lambda V561 (profile-results V561)))) (do (shen.set-lambda-form-entry (cons profile (lambda V560 (profile V560)))) (do (shen.set-lambda-form-entry (cons print (lambda V559 (print V559)))) (do (shen.set-lambda-form-entry (cons pr (lambda V557 (lambda V558 (pr V557 V558))))) (do (shen.set-lambda-form-entry (cons pos (lambda V555 (lambda V556 (pos V555 V556))))) (do (shen.set-lambda-form-entry (cons or (lambda V553 (lambda V554 (or V553 V554))))) (do (shen.set-lambda-form-entry (cons optimise (lambda V552 (optimise V552)))) (do (shen.set-lambda-form-entry (cons open (lambda V550 (lambda V551 (open V550 V551))))) (do (shen.set-lambda-form-entry (cons occurrences (lambda V548 (lambda V549 (occurrences V548 V549))))) (do (shen.set-lambda-form-entry (cons occurs-check (lambda V547 (occurs-check V547)))) (do (shen.set-lambda-form-entry (cons n->string (lambda V546 (n->string V546)))) (do (shen.set-lambda-form-entry (cons number? (lambda V545 (number? V545)))) (do (shen.set-lambda-form-entry (cons nth (lambda V543 (lambda V544 (nth V543 V544))))) (do (shen.set-lambda-form-entry (cons not (lambda V542 (not V542)))) (do (shen.set-lambda-form-entry (cons nl (lambda V541 (nl V541)))) (do (shen.set-lambda-form-entry (cons macroexpand (lambda V540 (macroexpand V540)))) (do (shen.set-lambda-form-entry (cons maxinferences (lambda V539 (maxinferences V539)))) (do (shen.set-lambda-form-entry (cons mapcan (lambda V537 (lambda V538 (mapcan V537 V538))))) (do (shen.set-lambda-form-entry (cons map (lambda V535 (lambda V536 (map V535 V536))))) (do (shen.set-lambda-form-entry (cons load (lambda V534 (load V534)))) (do (shen.set-lambda-form-entry (cons lineread (lambda V533 (lineread V533)))) (do (shen.set-lambda-form-entry (cons limit (lambda V532 (limit V532)))) (do (shen.set-lambda-form-entry (cons length (lambda V531 (length V531)))) (do (shen.set-lambda-form-entry (cons intersection (lambda V529 (lambda V530 (intersection V529 V530))))) (do (shen.set-lambda-form-entry (cons intern (lambda V528 (intern V528)))) (do (shen.set-lambda-form-entry (cons integer? (lambda V527 (integer? V527)))) (do (shen.set-lambda-form-entry (cons input (lambda V526 (input V526)))) (do (shen.set-lambda-form-entry (cons input+ (lambda V524 (lambda V525 (input+ V524 V525))))) (do (shen.set-lambda-form-entry (cons include (lambda V523 (include V523)))) (do (shen.set-lambda-form-entry (cons include-all-but (lambda V522 (include-all-but V522)))) (do (shen.set-lambda-form-entry (cons internal (lambda V521 (internal V521)))) (do (shen.set-lambda-form-entry (cons if (lambda V518 (lambda V519 (lambda V520 (if V518 V519 V520)))))) (do (shen.set-lambda-form-entry (cons identical (lambda V514 (lambda V515 (lambda V516 (lambda V517 (identical V514 V515 V516 V517))))))) (do (shen.set-lambda-form-entry (cons head (lambda V513 (head V513)))) (do (shen.set-lambda-form-entry (cons hd (lambda V512 (hd V512)))) (do (shen.set-lambda-form-entry (cons hdv (lambda V511 (hdv V511)))) (do (shen.set-lambda-form-entry (cons hdstr (lambda V510 (hdstr V510)))) (do (shen.set-lambda-form-entry (cons hash (lambda V508 (lambda V509 (hash V508 V509))))) (do (shen.set-lambda-form-entry (cons get (lambda V505 (lambda V506 (lambda V507 (get V505 V506 V507)))))) (do (shen.set-lambda-form-entry (cons get-time (lambda V504 (get-time V504)))) (do (shen.set-lambda-form-entry (cons gensym (lambda V503 (gensym V503)))) (do (shen.set-lambda-form-entry (cons fst (lambda V502 (fst V502)))) (do (shen.set-lambda-form-entry (cons freeze (lambda V501 (freeze V501)))) (do (shen.set-lambda-form-entry (cons fix (lambda V499 (lambda V500 (fix V499 V500))))) (do (shen.set-lambda-form-entry (cons fail-if (lambda V497 (lambda V498 (fail-if V497 V498))))) (do (shen.set-lambda-form-entry (cons findall (lambda V492 (lambda V493 (lambda V494 (lambda V495 (lambda V496 (findall V492 V493 V494 V495 V496)))))))) (do (shen.set-lambda-form-entry (cons enable-type-theory (lambda V491 (enable-type-theory V491)))) (do (shen.set-lambda-form-entry (cons explode (lambda V490 (explode V490)))) (do (shen.set-lambda-form-entry (cons external (lambda V489 (external V489)))) (do (shen.set-lambda-form-entry (cons eval-kl (lambda V488 (eval-kl V488)))) (do (shen.set-lambda-form-entry (cons eval (lambda V487 (eval V487)))) (do (shen.set-lambda-form-entry (cons error-to-string (lambda V486 (error-to-string V486)))) (do (shen.set-lambda-form-entry (cons empty? (lambda V485 (empty? V485)))) (do (shen.set-lambda-form-entry (cons element? (lambda V483 (lambda V484 (element? V483 V484))))) (do (shen.set-lambda-form-entry (cons do (lambda V481 (lambda V482 (do V481 V482))))) (do (shen.set-lambda-form-entry (cons difference (lambda V479 (lambda V480 (difference V479 V480))))) (do (shen.set-lambda-form-entry (cons destroy (lambda V478 (destroy V478)))) (do (shen.set-lambda-form-entry (cons declare (lambda V476 (lambda V477 (declare V476 V477))))) (do (shen.set-lambda-form-entry (cons cn (lambda V474 (lambda V475 (cn V474 V475))))) (do (shen.set-lambda-form-entry (cons cons? (lambda V473 (cons? V473)))) (do (shen.set-lambda-form-entry (cons cons (lambda V471 (lambda V472 (cons V471 V472))))) (do (shen.set-lambda-form-entry (cons concat (lambda V469 (lambda V470 (concat V469 V470))))) (do (shen.set-lambda-form-entry (cons compile (lambda V466 (lambda V467 (lambda V468 (compile V466 V467 V468)))))) (do (shen.set-lambda-form-entry (cons cd (lambda V465 (cd V465)))) (do (shen.set-lambda-form-entry (cons close (lambda V464 (close V464)))) (do (shen.set-lambda-form-entry (cons bound? (lambda V463 (bound? V463)))) (do (shen.set-lambda-form-entry (cons boolean? (lambda V462 (boolean? V462)))) (do (shen.set-lambda-form-entry (cons assoc (lambda V460 (lambda V461 (assoc V460 V461))))) (do (shen.set-lambda-form-entry (cons arity (lambda V459 (arity V459)))) (do (shen.set-lambda-form-entry (cons append (lambda V457 (lambda V458 (append V457 V458))))) (do (shen.set-lambda-form-entry (cons and (lambda V455 (lambda V456 (and V455 V456))))) (do (shen.set-lambda-form-entry (cons adjoin (lambda V453 (lambda V454 (adjoin V453 V454))))) (do (shen.set-lambda-form-entry (cons <-address (lambda V451 (lambda V452 (<-address V451 V452))))) (do (shen.set-lambda-form-entry (cons address-> (lambda V448 (lambda V449 (lambda V450 (address-> V448 V449 V450)))))) (do (shen.set-lambda-form-entry (cons absvector? (lambda V447 (absvector? V447)))) (shen.set-lambda-form-entry (cons absvector (lambda V446 (absvector V446))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise () (do (shen.initialise-environment) (do (shen.initialise-lambda-forms) (do (shen.initialise-signedfunc-lambda-forms) (shen.initialise-signedfuncs)))))



