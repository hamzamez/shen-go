"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun load (V671) (let Load (let Start (get-time run) (let Result (shen.load-help (value shen.*tc*) (read-file V671)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (shen.prhush (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if (value shen.*tc*) (shen.prhush (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded)))

(defun shen.load-help (V678 V679) (cond ((= false V678) (shen.for-each (lambda X (shen.prhush (shen.app (shen.eval-without-macros X) "
" shen.s) (stoutput))) V679)) (true (let RemoveSynonyms (mapcan (lambda X (shen.remove-synonyms X)) V679) (let Table (mapcan (lambda X (shen.typetable X)) RemoveSynonyms) (let Assume (shen.for-each (lambda X (shen.assumetype X)) Table) (trap-error (shen.for-each (lambda X (shen.typecheck-and-load X)) RemoveSynonyms) (lambda E (shen.unwind-types E Table)))))))))

(defun shen.remove-synonyms (V681) (cond ((and (cons? V681) (= shen.synonyms-help (hd V681))) (do (eval V681) ())) (true (cons V681 ()))))

(defun shen.typecheck-and-load (V683) (do (nl 1) (shen.typecheck-and-evaluate V683 (gensym A))))

(defun shen.typetable (V689) (cond ((and (cons? V689) (and (= define (hd V689)) (cons? (tl V689)))) (let Sig (compile (lambda Y (shen.<sig+rest> Y)) (tl (tl V689)) (lambda E (simple-error (shen.app (hd (tl V689)) " lacks a proper signature.
" shen.a)))) (cons (cons (hd (tl V689)) Sig) ()))) (true ())))

(defun shen.assumetype (V691) (cond ((cons? V691) (declare (hd V691) (tl V691))) (true (shen.f_error shen.assumetype))))

(defun shen.unwind-types (V698 V699) (cond ((= () V699) (simple-error (error-to-string V698))) ((and (cons? V699) (cons? (hd V699))) (do (shen.remtype (hd (hd V699))) (shen.unwind-types V698 (tl V699)))) (true (shen.f_error shen.unwind-types))))

(defun shen.remtype (V701) (set shen.*signedfuncs* (shen.removetype V701 (value shen.*signedfuncs*))))

(defun shen.removetype (V709 V710) (cond ((= () V710) ()) ((and (cons? V710) (and (cons? (hd V710)) (= (hd (hd V710)) V709))) (shen.removetype (hd (hd V710)) (tl V710))) ((cons? V710) (cons (hd V710) (shen.removetype V709 (tl V710)))) (true (shen.f_error shen.removetype))))

(defun shen.<sig+rest> (V712) (let Parse_shen.<signature> (shen.<signature> V712) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_<!> (<!> Parse_shen.<signature>) (if (not (= (fail) Parse_<!>)) (shen.pair (hd Parse_<!>) (shen.hdtl Parse_shen.<signature>)) (fail))) (fail))))

(defun write-to-file (V715 V716) (let Stream (open V715 out) (let String (if (string? V716) (shen.app V716 "

" shen.a) (shen.app V716 "

" shen.s)) (let Write (pr String Stream) (let Close (close Stream) V716)))))



