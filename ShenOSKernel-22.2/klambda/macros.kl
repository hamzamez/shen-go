"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun macroexpand (V718) (let Y (shen.compose (value *macros*) V718) (if (= V718 Y) V718 (shen.walk (lambda Z (macroexpand Z)) Y))))

(defun shen.error-macro (V720) (cond ((and (cons? V720) (and (= error (hd V720)) (cons? (tl V720)))) (cons simple-error (cons (shen.mkstr (hd (tl V720)) (tl (tl V720))) ()))) (true V720)))

(defun shen.output-macro (V722) (cond ((and (cons? V722) (and (= output (hd V722)) (cons? (tl V722)))) (cons shen.prhush (cons (shen.mkstr (hd (tl V722)) (tl (tl V722))) (cons (cons stoutput ()) ())))) ((and (cons? V722) (and (= pr (hd V722)) (and (cons? (tl V722)) (= () (tl (tl V722)))))) (cons pr (cons (hd (tl V722)) (cons (cons stoutput ()) ())))) (true V722)))

(defun shen.make-string-macro (V724) (cond ((and (cons? V724) (and (= make-string (hd V724)) (cons? (tl V724)))) (shen.mkstr (hd (tl V724)) (tl (tl V724)))) (true V724)))

(defun shen.input-macro (V726) (cond ((and (cons? V726) (and (= lineread (hd V726)) (= () (tl V726)))) (cons lineread (cons (cons stinput ()) ()))) ((and (cons? V726) (and (= input (hd V726)) (= () (tl V726)))) (cons input (cons (cons stinput ()) ()))) ((and (cons? V726) (and (= read (hd V726)) (= () (tl V726)))) (cons read (cons (cons stinput ()) ()))) ((and (cons? V726) (and (= input+ (hd V726)) (and (cons? (tl V726)) (= () (tl (tl V726)))))) (cons input+ (cons (hd (tl V726)) (cons (cons stinput ()) ())))) ((and (cons? V726) (and (= read-byte (hd V726)) (= () (tl V726)))) (cons read-byte (cons (cons stinput ()) ()))) (true V726)))

(defun shen.compose (V729 V730) (cond ((= () V729) V730) ((cons? V729) (shen.compose (tl V729) ((hd V729) V730))) (true (shen.f_error shen.compose))))

(defun shen.compile-macro (V732) (cond ((and (cons? V732) (and (= compile (hd V732)) (and (cons? (tl V732)) (and (cons? (tl (tl V732))) (= () (tl (tl (tl V732)))))))) (cons compile (cons (hd (tl V732)) (cons (hd (tl (tl V732))) (cons (cons lambda (cons E (cons (cons if (cons (cons cons? (cons E ())) (cons (cons error (cons "parse error here: ~S~%" (cons E ()))) (cons (cons error (cons "parse error~%" ())) ())))) ()))) ()))))) (true V732)))

(defun shen.prolog-macro (V734) (cond ((and (cons? V734) (= prolog? (hd V734))) (cons let (cons NPP (cons (cons shen.start-new-prolog-process ()) (cons (let Calls (shen.bld-prolog-call NPP (tl V734)) (let Vs (shen.extract_vars (tl V734)) (let External (shen.externally-bound (tl V734)) (let PrologVs (difference Vs External) (shen.locally-bind-prolog-vs NPP PrologVs Calls))))) ()))))) (true V734)))

(defun shen.externally-bound (V740) (cond ((and (cons? V740) (and (= receive (hd V740)) (and (cons? (tl V740)) (= () (tl (tl V740)))))) (tl V740)) ((cons? V740) (union (shen.externally-bound (hd V740)) (shen.externally-bound (tl V740)))) (true ())))

(defun shen.locally-bind-prolog-vs (V758 V759 V760) (cond ((= () V759) V760) ((cons? V759) (cons let (cons (hd V759) (cons (cons shen.newpv (cons V758 ())) (cons (shen.locally-bind-prolog-vs V758 (tl V759) V760) ()))))) (true (simple-error "implementation error inp locally-bind-prolog-vs"))))

(defun shen.bld-prolog-call (V773 V774) (cond ((= () V774) true) ((and (cons? V774) (= ! (hd V774))) (cons cut (cons false (cons V773 (cons (cons freeze (cons (shen.bld-prolog-call V773 (tl V774)) ())) ()))))) ((and (cons? V774) (and (cons? (hd V774)) (and (= when (hd (hd V774))) (and (cons? (tl (hd V774))) (= () (tl (tl (hd V774)))))))) (cons fwhen (cons (shen.insert-deref (hd (tl (hd V774))) V773) (cons V773 (cons (cons freeze (cons (shen.bld-prolog-call V773 (tl V774)) ())) ()))))) ((and (cons? V774) (and (cons? (hd V774)) (and (= is (hd (hd V774))) (and (cons? (tl (hd V774))) (and (cons? (tl (tl (hd V774)))) (= () (tl (tl (tl (hd V774)))))))))) (cons bind (cons (hd (tl (hd V774))) (cons (shen.insert-deref (hd (tl (tl (hd V774)))) V773) (cons V773 (cons (cons freeze (cons (shen.bld-prolog-call V773 (tl V774)) ())) ())))))) ((and (cons? V774) (and (cons? (hd V774)) (and (= receive (hd (hd V774))) (and (cons? (tl (hd V774))) (= () (tl (tl (hd V774)))))))) (shen.bld-prolog-call V773 (tl V774))) ((and (cons? V774) (and (cons? (hd V774)) (and (= bind (hd (hd V774))) (and (cons? (tl (hd V774))) (and (cons? (tl (tl (hd V774)))) (= () (tl (tl (tl (hd V774)))))))))) (cons bind (cons (hd (tl (hd V774))) (cons (shen.insert-lazyderef (hd (tl (tl (hd V774)))) V773) (cons V773 (cons (cons freeze (cons (shen.bld-prolog-call V773 (tl V774)) ())) ())))))) ((and (cons? V774) (and (cons? (hd V774)) (and (= fwhen (hd (hd V774))) (and (cons? (tl (hd V774))) (= () (tl (tl (hd V774)))))))) (cons fwhen (cons (shen.insert-lazyderef (hd (tl (hd V774))) V773) (cons V773 (cons (cons freeze (cons (shen.bld-prolog-call V773 (tl V774)) ())) ()))))) ((cons? V774) (append (hd V774) (cons V773 (cons (cons freeze (cons (shen.bld-prolog-call V773 (tl V774)) ())) ())))) (true (simple-error "implementation error in bld-prolog-call"))))

(defun shen.defprolog-macro (V776) (cond ((and (cons? V776) (and (= defprolog (hd V776)) (cons? (tl V776)))) (compile (lambda Y (shen.<defprolog> Y)) (tl V776) (lambda Y (shen.prolog-error (hd (tl V776)) Y)))) (true V776)))

(defun shen.datatype-macro (V778) (cond ((and (cons? V778) (and (= datatype (hd V778)) (cons? (tl V778)))) (cons shen.process-datatype (cons (shen.intern-type (hd (tl V778))) (cons (cons compile (cons (cons lambda (cons X (cons (cons shen.<datatype-rules> (cons X ())) ()))) (cons (shen.rcons_form (tl (tl V778))) (cons (cons function (cons shen.datatype-error ())) ())))) ())))) (true V778)))

(defun shen.intern-type (V780) (intern (cn (str V780) "#type")))

(defun shen.@s-macro (V782) (cond ((and (cons? V782) (and (= @s (hd V782)) (and (cons? (tl V782)) (and (cons? (tl (tl V782))) (cons? (tl (tl (tl V782)))))))) (cons @s (cons (hd (tl V782)) (cons (shen.@s-macro (cons @s (tl (tl V782)))) ())))) ((and (cons? V782) (and (= @s (hd V782)) (and (cons? (tl V782)) (and (cons? (tl (tl V782))) (and (= () (tl (tl (tl V782)))) (string? (hd (tl V782)))))))) (let E (explode (hd (tl V782))) (if (> (length E) 1) (shen.@s-macro (cons @s (append E (tl (tl V782))))) V782))) (true V782)))

(defun shen.synonyms-macro (V784) (cond ((and (cons? V784) (= synonyms (hd V784))) (cons shen.synonyms-help (cons (shen.rcons_form (shen.curry-synonyms (tl V784))) ()))) (true V784)))

(defun shen.curry-synonyms (V786) (map (lambda X (shen.curry-type X)) V786))

(defun shen.nl-macro (V788) (cond ((and (cons? V788) (and (= nl (hd V788)) (= () (tl V788)))) (cons nl (cons 1 ()))) (true V788)))

(defun shen.assoc-macro (V790) (cond ((and (cons? V790) (and (cons? (tl V790)) (and (cons? (tl (tl V790))) (and (cons? (tl (tl (tl V790)))) (element? (hd V790) (cons @p (cons @v (cons append (cons and (cons or (cons + (cons * (cons do ()))))))))))))) (cons (hd V790) (cons (hd (tl V790)) (cons (shen.assoc-macro (cons (hd V790) (tl (tl V790)))) ())))) (true V790)))

(defun shen.let-macro (V792) (cond ((and (cons? V792) (and (= let (hd V792)) (and (cons? (tl V792)) (and (cons? (tl (tl V792))) (and (cons? (tl (tl (tl V792)))) (cons? (tl (tl (tl (tl V792)))))))))) (cons let (cons (hd (tl V792)) (cons (hd (tl (tl V792))) (cons (shen.let-macro (cons let (tl (tl (tl V792))))) ()))))) (true V792)))

(defun shen.abs-macro (V794) (cond ((and (cons? V794) (and (= /. (hd V794)) (and (cons? (tl V794)) (and (cons? (tl (tl V794))) (cons? (tl (tl (tl V794)))))))) (cons lambda (cons (hd (tl V794)) (cons (shen.abs-macro (cons /. (tl (tl V794)))) ())))) ((and (cons? V794) (and (= /. (hd V794)) (and (cons? (tl V794)) (and (cons? (tl (tl V794))) (= () (tl (tl (tl V794)))))))) (cons lambda (tl V794))) (true V794)))

(defun shen.cases-macro (V798) (cond ((and (cons? V798) (and (= cases (hd V798)) (and (cons? (tl V798)) (and (= true (hd (tl V798))) (cons? (tl (tl V798))))))) (hd (tl (tl V798)))) ((and (cons? V798) (and (= cases (hd V798)) (and (cons? (tl V798)) (and (cons? (tl (tl V798))) (= () (tl (tl (tl V798)))))))) (cons if (cons (hd (tl V798)) (cons (hd (tl (tl V798))) (cons (cons simple-error (cons "error: cases exhausted" ())) ()))))) ((and (cons? V798) (and (= cases (hd V798)) (and (cons? (tl V798)) (cons? (tl (tl V798)))))) (cons if (cons (hd (tl V798)) (cons (hd (tl (tl V798))) (cons (shen.cases-macro (cons cases (tl (tl (tl V798))))) ()))))) ((and (cons? V798) (and (= cases (hd V798)) (and (cons? (tl V798)) (= () (tl (tl V798)))))) (simple-error "error: odd number of case elements
")) (true V798)))

(defun shen.timer-macro (V800) (cond ((and (cons? V800) (and (= time (hd V800)) (and (cons? (tl V800)) (= () (tl (tl V800)))))) (shen.let-macro (cons let (cons Start (cons (cons get-time (cons run ())) (cons Result (cons (hd (tl V800)) (cons Finish (cons (cons get-time (cons run ())) (cons Time (cons (cons - (cons Finish (cons Start ()))) (cons Message (cons (cons shen.prhush (cons (cons cn (cons "
run time: " (cons (cons cn (cons (cons str (cons Time ())) (cons " secs
" ()))) ()))) (cons (cons stoutput ()) ()))) (cons Result ())))))))))))))) (true V800)))

(defun shen.tuple-up (V802) (cond ((cons? V802) (cons @p (cons (hd V802) (cons (shen.tuple-up (tl V802)) ())))) (true V802)))

(defun shen.put/get-macro (V804) (cond ((and (cons? V804) (and (= put (hd V804)) (and (cons? (tl V804)) (and (cons? (tl (tl V804))) (and (cons? (tl (tl (tl V804)))) (= () (tl (tl (tl (tl V804)))))))))) (cons put (cons (hd (tl V804)) (cons (hd (tl (tl V804))) (cons (hd (tl (tl (tl V804)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V804) (and (= get (hd V804)) (and (cons? (tl V804)) (and (cons? (tl (tl V804))) (= () (tl (tl (tl V804)))))))) (cons get (cons (hd (tl V804)) (cons (hd (tl (tl V804))) (cons (cons value (cons *property-vector* ())) ()))))) ((and (cons? V804) (and (= unput (hd V804)) (and (cons? (tl V804)) (and (cons? (tl (tl V804))) (= () (tl (tl (tl V804)))))))) (cons unput (cons (hd (tl V804)) (cons (hd (tl (tl V804))) (cons (cons value (cons *property-vector* ())) ()))))) (true V804)))

(defun shen.function-macro (V806) (cond ((and (cons? V806) (and (= function (hd V806)) (and (cons? (tl V806)) (= () (tl (tl V806)))))) (shen.function-abstraction (hd (tl V806)) (arity (hd (tl V806))))) (true V806)))

(defun shen.function-abstraction (V809 V810) (cond ((= 0 V810) (simple-error (shen.app V809 " has no lambda form
" shen.a))) ((= -1 V810) (cons function (cons V809 ()))) (true (shen.function-abstraction-help V809 V810 ()))))

(defun shen.function-abstraction-help (V814 V815 V816) (cond ((= 0 V815) (cons V814 V816)) (true (let X (gensym V) (cons /. (cons X (cons (shen.function-abstraction-help V814 (- V815 1) (append V816 (cons X ()))) ())))))))

(defun undefmacro (V818) (let MacroReg (value shen.*macroreg*) (let Pos (shen.findpos V818 MacroReg) (let Remove1 (set shen.*macroreg* (remove V818 MacroReg)) (let Remove2 (set *macros* (shen.remove-nth Pos (value *macros*))) V818)))))

(defun shen.findpos (V828 V829) (cond ((= () V829) (simple-error (shen.app V828 " is not a macro
" shen.a))) ((and (cons? V829) (= (hd V829) V828)) 1) ((cons? V829) (+ 1 (shen.findpos V828 (tl V829)))) (true (shen.f_error shen.findpos))))

(defun shen.remove-nth (V834 V835) (cond ((and (= 1 V834) (cons? V835)) (tl V835)) ((cons? V835) (cons (hd V835) (shen.remove-nth (- V834 1) (tl V835)))) (true (shen.f_error shen.remove-nth))))



