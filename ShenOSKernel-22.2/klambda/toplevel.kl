"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.repl () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (shen.toplevel-display-exception E))) (shen.loop)))))

(defun shen.toplevel-display-exception (V2992) (pr (error-to-string V2992) (stoutput)))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V2994) (cond ((= () V2994) ()) ((and (cons? V2994) (cons? (tl V2994))) (do (set (hd V2994) (hd (tl V2994))) (shen.multiple-set (tl (tl V2994))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V2996) (declare V2996 symbol))

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V3008 V3009) (cond ((and (tuple? V3008) (and (cons? (snd V3008)) (element? (hd (snd V3008)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V3008) (tl (snd V3008))) V3009)) ((and (tuple? V3008) (and (cons? (snd V3008)) (and (cons? (tl (snd V3008))) (and (= () (tl (tl (snd V3008)))) (and (cons? V3009) (and (= (hd (snd V3008)) (shen.exclamation)) (= (hd (tl (snd V3008))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V3009))) (hd V3009))) ((and (tuple? V3008) (and (cons? (snd V3008)) (= (hd (snd V3008)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V3008)) V3009) (let Find (head (shen.find-past-inputs Key? V3009)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V3008) (and (cons? (snd V3008)) (and (= () (tl (snd V3008))) (= (hd (snd V3008)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V3009) 0) (abort))) ((and (tuple? V3008) (and (cons? (snd V3008)) (= (hd (snd V3008)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V3008)) V3009) (let Pastprint (shen.print-past-inputs Key? (reverse V3009) 0) (abort)))) (true V3008)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V3011) (do (shen.for-each (lambda Byte (pr (n->string Byte) (stoutput))) V3011) (nl 1)))

(defun shen.update_history (V3014 V3015) (set shen.*history* (cons V3014 V3015)))

(defun shen.toplineread () (shen.toplineread_loop (shen.read-char-code (stinput)) ()))

(defun shen.toplineread_loop (V3019 V3020) (cond ((= V3019 (shen.hat)) (simple-error "line read aborted")) ((element? V3019 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V3020 (lambda E shen.nextline)) (let It (shen.record-it V3020) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (shen.read-char-code (stinput)) (append V3020 (cons V3019 ()))) (@p Line V3020))))) (true (shen.toplineread_loop (shen.read-char-code (stinput)) (if (= V3019 -1) V3020 (append V3020 (cons V3019 ())))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V3026) (cond ((= + V3026) (set shen.*tc* true)) ((= - V3026) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3028) (shen.toplevel_evaluate V3028 (value shen.*tc*)))

(defun shen.find-past-inputs (V3031 V3032) (let F (shen.find V3031 V3032) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3035 V3036) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3035 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3036)))) (lambda X (shen.prefix? V3035 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3038) (cond ((and (cons? V3038) (= (hd V3038) (shen.space))) (shen.trim-gubbins (tl V3038))) ((and (cons? V3038) (= (hd V3038) (shen.newline))) (shen.trim-gubbins (tl V3038))) ((and (cons? V3038) (= (hd V3038) (shen.carriage-return))) (shen.trim-gubbins (tl V3038))) ((and (cons? V3038) (= (hd V3038) (shen.tab))) (shen.trim-gubbins (tl V3038))) ((and (cons? V3038) (= (hd V3038) (shen.left-round))) (shen.trim-gubbins (tl V3038))) (true V3038)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3047 V3048) (cond ((= () V3048) ()) ((and (cons? V3048) (V3047 (hd V3048))) (cons (hd V3048) (shen.find V3047 (tl V3048)))) ((cons? V3048) (shen.find V3047 (tl V3048))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V3062 V3063) (cond ((= () V3062) true) ((and (cons? V3062) (and (cons? V3063) (= (hd V3063) (hd V3062)))) (shen.prefix? (tl V3062) (tl V3063))) (true false)))

(defun shen.print-past-inputs (V3075 V3076 V3077) (cond ((= () V3076) _) ((and (cons? V3076) (not (V3075 (hd V3076)))) (shen.print-past-inputs V3075 (tl V3076) (+ V3077 1))) ((and (cons? V3076) (tuple? (hd V3076))) (do (shen.prhush (shen.app V3077 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V3076))) (shen.print-past-inputs V3075 (tl V3076) (+ V3077 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V3080 V3081) (cond ((and (cons? V3080) (and (cons? (tl V3080)) (and (= : (hd (tl V3080))) (and (cons? (tl (tl V3080))) (and (= () (tl (tl (tl V3080)))) (= true V3081)))))) (shen.typecheck-and-evaluate (hd V3080) (hd (tl (tl V3080))))) ((and (cons? V3080) (cons? (tl V3080))) (do (shen.toplevel_evaluate (cons (hd V3080) ()) V3081) (do (nl 1) (shen.toplevel_evaluate (tl V3080) V3081)))) ((and (cons? V3080) (and (= () (tl V3080)) (= true V3081))) (shen.typecheck-and-evaluate (hd V3080) (gensym A))) ((and (cons? V3080) (and (= () (tl V3080)) (= false V3081))) (let Eval (shen.eval-without-macros (hd V3080)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V3084 V3085) (let Typecheck (shen.typecheck V3084 V3085) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V3084) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V3087) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V3087) V3087))

(defun shen.extract-pvars (V3093) (cond ((shen.pvar? V3093) (cons V3093 ())) ((cons? V3093) (union (shen.extract-pvars (hd V3093)) (shen.extract-pvars (tl V3093)))) (true ())))

(defun shen.mult_subst (V3101 V3102 V3103) (cond ((= () V3101) V3103) ((= () V3102) V3103) ((and (cons? V3101) (cons? V3102)) (shen.mult_subst (tl V3101) (tl V3102) (subst (hd V3101) (hd V3102) V3103))) (true (shen.f_error shen.mult_subst))))



