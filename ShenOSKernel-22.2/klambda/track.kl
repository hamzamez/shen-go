"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.f_error (V3105) (do (shen.prhush (cn "partial function " (shen.app V3105 ";
" shen.a)) (stoutput)) (do (if (and (not (shen.tracked? V3105)) (y-or-n? (cn "track " (shen.app V3105 "? " shen.a)))) (shen.track-function (ps V3105)) shen.ok) (simple-error "aborted"))))

(defun shen.tracked? (V3107) (element? V3107 (value shen.*tracking*)))

(defun track (V3109) (let Source (ps V3109) (shen.track-function Source)))

(defun shen.track-function (V3111) (cond ((and (cons? V3111) (and (= defun (hd V3111)) (and (cons? (tl V3111)) (and (cons? (tl (tl V3111))) (and (cons? (tl (tl (tl V3111)))) (= () (tl (tl (tl (tl V3111)))))))))) (let KL (cons defun (cons (hd (tl V3111)) (cons (hd (tl (tl V3111))) (cons (shen.insert-tracking-code (hd (tl V3111)) (hd (tl (tl V3111))) (hd (tl (tl (tl V3111))))) ())))) (let Ob (eval-kl KL) (let Tr (set shen.*tracking* (cons Ob (value shen.*tracking*))) Ob)))) (true (shen.f_error shen.track-function))))

(defun shen.insert-tracking-code (V3115 V3116 V3117) (cons do (cons (cons set (cons shen.*call* (cons (cons + (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.input-track (cons (cons value (cons shen.*call* ())) (cons V3115 (cons (shen.cons_form V3116) ())))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons (cons let (cons Result (cons V3117 (cons (cons do (cons (cons shen.output-track (cons (cons value (cons shen.*call* ())) (cons V3115 (cons Result ())))) (cons (cons do (cons (cons set (cons shen.*call* (cons (cons - (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons Result ()))) ()))) ()))) ())))) ()))) ()))) ()))))

(defun step (V3123) (cond ((= + V3123) (set shen.*step* true)) ((= - V3123) (set shen.*step* false)) (true (simple-error "step expects a + or a -.
"))))

(defun spy (V3129) (cond ((= + V3129) (set shen.*spy* true)) ((= - V3129) (set shen.*spy* false)) (true (simple-error "spy expects a + or a -.
"))))

(defun shen.terpri-or-read-char () (if (value shen.*step*) (shen.check-byte (read-byte (value *stinput*))) (nl 1)))

(defun shen.check-byte (V3135) (cond ((= V3135 (shen.hat)) (simple-error "aborted")) (true true)))

(defun shen.input-track (V3139 V3140 V3141) (do (shen.prhush (cn "
" (shen.app (shen.spaces V3139) (cn "<" (shen.app V3139 (cn "> Inputs to " (shen.app V3140 (cn " 
" (shen.app (shen.spaces V3139) "" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (shen.recursively-print V3141)))

(defun shen.recursively-print (V3143) (cond ((= () V3143) (shen.prhush " ==>" (stoutput))) ((cons? V3143) (do (print (hd V3143)) (do (shen.prhush ", " (stoutput)) (shen.recursively-print (tl V3143))))) (true (shen.f_error shen.recursively-print))))

(defun shen.spaces (V3145) (cond ((= 0 V3145) "") (true (cn " " (shen.spaces (- V3145 1))))))

(defun shen.output-track (V3149 V3150 V3151) (shen.prhush (cn "
" (shen.app (shen.spaces V3149) (cn "<" (shen.app V3149 (cn "> Output from " (shen.app V3150 (cn " 
" (shen.app (shen.spaces V3149) (cn "==> " (shen.app V3151 "" shen.s)) shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)))

(defun untrack (V3153) (let Tracking (value shen.*tracking*) (let Tracking (set shen.*tracking* (remove V3153 Tracking)) (eval (ps V3153)))))

(defun profile (V3155) (shen.profile-help (ps V3155)))

(defun shen.profile-help (V3161) (cond ((and (cons? V3161) (and (= defun (hd V3161)) (and (cons? (tl V3161)) (and (cons? (tl (tl V3161))) (and (cons? (tl (tl (tl V3161)))) (= () (tl (tl (tl (tl V3161)))))))))) (let G (gensym shen.f) (let Profile (cons defun (cons (hd (tl V3161)) (cons (hd (tl (tl V3161))) (cons (shen.profile-func (hd (tl V3161)) (hd (tl (tl V3161))) (cons G (hd (tl (tl V3161))))) ())))) (let Def (cons defun (cons G (cons (hd (tl (tl V3161))) (cons (subst G (hd (tl V3161)) (hd (tl (tl (tl V3161))))) ())))) (let CompileProfile (shen.eval-without-macros Profile) (let CompileG (shen.eval-without-macros Def) (hd (tl V3161)))))))) (true (simple-error "Cannot profile.
"))))

(defun unprofile (V3163) (untrack V3163))

(defun shen.profile-func (V3167 V3168 V3169) (cons let (cons Start (cons (cons get-time (cons run ())) (cons (cons let (cons Result (cons V3169 (cons (cons let (cons Finish (cons (cons - (cons (cons get-time (cons run ())) (cons Start ()))) (cons (cons let (cons Record (cons (cons shen.put-profile (cons V3167 (cons (cons + (cons (cons shen.get-profile (cons V3167 ())) (cons Finish ()))) ()))) (cons Result ())))) ())))) ())))) ())))))

(defun profile-results (V3171) (let Results (shen.get-profile V3171) (let Initialise (shen.put-profile V3171 0) (@p V3171 Results))))

(defun shen.get-profile (V3173) (trap-error (get V3173 profile (value *property-vector*)) (lambda E 0)))

(defun shen.put-profile (V3176 V3177) (put V3176 profile V3177 (value *property-vector*)))



