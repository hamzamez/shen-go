"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.yacc (V4694) (cond ((and (cons? V4694) (and (= defcc (hd V4694)) (cons? (tl V4694)))) (shen.yacc->shen (hd (tl V4694)) (tl (tl V4694)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4697 V4698) (let CCRules (shen.split_cc_rules true V4698 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4697 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4700) (cond ((> (occurrences kill V4700) 0) (cons trap-error (cons V4700 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4700)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4702) (let String (error-to-string V4702) (if (= String "yacc kill") (fail) V4702)))

(defun shen.split_cc_rules (V4708 V4709 V4710) (cond ((and (= () V4709) (= () V4710)) ()) ((= () V4709) (cons (shen.split_cc_rule V4708 (reverse V4710) ()) ())) ((and (cons? V4709) (= ; (hd V4709))) (cons (shen.split_cc_rule V4708 (reverse V4710) ()) (shen.split_cc_rules V4708 (tl V4709) ()))) ((cons? V4709) (shen.split_cc_rules V4708 (tl V4709) (cons (hd V4709) V4710))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4718 V4719 V4720) (cond ((and (cons? V4719) (and (= := (hd V4719)) (and (cons? (tl V4719)) (= () (tl (tl V4719)))))) (cons (reverse V4720) (tl V4719))) ((and (cons? V4719) (and (= := (hd V4719)) (and (cons? (tl V4719)) (and (cons? (tl (tl V4719))) (and (= where (hd (tl (tl V4719)))) (and (cons? (tl (tl (tl V4719)))) (= () (tl (tl (tl (tl V4719))))))))))) (cons (reverse V4720) (cons (cons where (cons (hd (tl (tl (tl V4719)))) (cons (hd (tl V4719)) ()))) ()))) ((= () V4719) (do (shen.semantic-completion-warning V4718 V4720) (shen.split_cc_rule V4718 (cons := (cons (shen.default_semantics (reverse V4720)) ())) V4720))) ((cons? V4719) (shen.split_cc_rule V4718 (tl V4719) (cons (hd V4719) V4720))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4731 V4732) (cond ((= true V4731) (do (shen.prhush "warning: " (stoutput)) (do (shen.for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4732)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4734) (cond ((= () V4734) ()) ((and (cons? V4734) (and (= () (tl V4734)) (shen.grammar_symbol? (hd V4734)))) (hd V4734)) ((and (cons? V4734) (shen.grammar_symbol? (hd V4734))) (cons append (cons (hd V4734) (cons (shen.default_semantics (tl V4734)) ())))) ((cons? V4734) (cons cons (cons (hd V4734) (cons (shen.default_semantics (tl V4734)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4736) (and (symbol? V4736) (let Cs (shen.strip-pathname (explode V4736)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4738) (cond ((and (cons? V4738) (= () (tl V4738))) (hd V4738)) ((cons? V4738) (let P YaccParse (cons let (cons P (cons (hd V4738) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4738)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4740) (cond ((and (cons? V4740) (and (cons? (tl V4740)) (= () (tl (tl V4740))))) (shen.syntax (hd V4740) Stream (hd (tl V4740)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4744 V4745 V4746) (cond ((and (= () V4744) (and (cons? V4746) (and (= where (hd V4746)) (and (cons? (tl V4746)) (and (cons? (tl (tl V4746))) (= () (tl (tl (tl V4746))))))))) (cons if (cons (shen.semantics (hd (tl V4746))) (cons (cons shen.pair (cons (cons hd (cons V4745 ())) (cons (shen.semantics (hd (tl (tl V4746)))) ()))) (cons (cons fail ()) ()))))) ((= () V4744) (cons shen.pair (cons (cons hd (cons V4745 ())) (cons (shen.semantics V4746) ())))) ((cons? V4744) (if (shen.grammar_symbol? (hd V4744)) (shen.recursive_descent V4744 V4745 V4746) (if (variable? (hd V4744)) (shen.variable-match V4744 V4745 V4746) (if (shen.jump_stream? (hd V4744)) (shen.jump_stream V4744 V4745 V4746) (if (shen.terminal? (hd V4744)) (shen.check_stream V4744 V4745 V4746) (if (cons? (hd V4744)) (shen.list-stream (shen.decons (hd V4744)) (tl V4744) V4745 V4746) (simple-error (shen.app (hd V4744) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4751 V4752 V4753 V4754) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4753 ())) ())) (cons (cons cons? (cons (cons shen.hdhd (cons V4753 ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4752 (cons shen.pair (cons (cons shen.tlhd (cons V4753 ())) (cons (cons shen.hdtl (cons V4753 ())) ()))) V4754) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4751 (cons shen.pair (cons (cons shen.hdhd (cons V4753 ())) (cons (cons shen.hdtl (cons V4753 ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4756) (cond ((and (cons? V4756) (and (= cons (hd V4756)) (and (cons? (tl V4756)) (and (cons? (tl (tl V4756))) (and (= () (hd (tl (tl V4756)))) (= () (tl (tl (tl V4756))))))))) (cons (hd (tl V4756)) ())) ((and (cons? V4756) (and (= cons (hd V4756)) (and (cons? (tl V4756)) (and (cons? (tl (tl V4756))) (= () (tl (tl (tl V4756)))))))) (cons (hd (tl V4756)) (shen.decons (hd (tl (tl V4756)))))) (true V4756)))

(defun shen.insert-runon (V4771 V4772 V4773) (cond ((and (cons? V4773) (and (= shen.pair (hd V4773)) (and (cons? (tl V4773)) (and (cons? (tl (tl V4773))) (and (= () (tl (tl (tl V4773)))) (= (hd (tl (tl V4773))) V4772)))))) V4771) ((cons? V4773) (map (lambda Z (shen.insert-runon V4771 V4772 Z)) V4773)) (true V4773)))

(defun shen.strip-pathname (V4779) (cond ((not (element? "." V4779)) V4779) ((cons? V4779) (shen.strip-pathname (tl V4779))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4783 V4784 V4785) (cond ((cons? V4783) (let Test (cons (hd V4783) (cons V4784 ())) (let Action (shen.syntax (tl V4783) (concat Parse_ (hd V4783)) V4785) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4783)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4783)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4789 V4790 V4791) (cond ((cons? V4789) (let Test (cons cons? (cons (cons hd (cons V4790 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4789)) (cons (cons shen.hdhd (cons V4790 ())) (cons (shen.syntax (tl V4789) (cons shen.pair (cons (cons shen.tlhd (cons V4790 ())) (cons (cons shen.hdtl (cons V4790 ())) ()))) V4791) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4801) (cond ((cons? V4801) false) ((variable? V4801) false) (true true)))

(defun shen.jump_stream? (V4807) (cond ((= V4807 _) true) (true false)))

(defun shen.check_stream (V4811 V4812 V4813) (cond ((cons? V4811) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4812 ())) ())) (cons (cons = (cons (hd V4811) (cons (cons shen.hdhd (cons V4812 ())) ()))) ()))) (let NewStr (gensym NewStream) (let Action (cons let (cons NewStr (cons (cons shen.pair (cons (cons shen.tlhd (cons V4812 ())) (cons (cons shen.hdtl (cons V4812 ())) ()))) (cons (shen.syntax (tl V4811) NewStr V4813) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ()))))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4817 V4818 V4819) (cond ((cons? V4817) (let Test (cons cons? (cons (cons hd (cons V4818 ())) ())) (let Action (shen.syntax (tl V4817) (cons shen.pair (cons (cons shen.tlhd (cons V4818 ())) (cons (cons shen.hdtl (cons V4818 ())) ()))) V4819) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4821) (cond ((= () V4821) ()) ((shen.grammar_symbol? V4821) (cons shen.hdtl (cons (concat Parse_ V4821) ()))) ((variable? V4821) (concat Parse_ V4821)) ((cons? V4821) (map (lambda Z (shen.semantics Z)) V4821)) (true V4821)))

(defun shen.pair (V4824 V4825) (cons V4824 (cons V4825 ())))

(defun shen.hdtl (V4827) (hd (tl V4827)))

(defun shen.hdhd (V4829) (hd (hd V4829)))

(defun shen.tlhd (V4831) (tl (hd V4831)))

(defun shen.snd-or-fail (V4839) (cond ((and (cons? V4839) (and (cons? (tl V4839)) (= () (tl (tl V4839))))) (hd (tl V4839))) (true (fail))))

(defun fail () shen.fail!)(defun <!> (V4847) (cond ((and (cons? V4847) (and (cons? (tl V4847)) (= () (tl (tl V4847))))) (cons () (cons (hd V4847) ()))) (true (fail))))

(defun <e> (V4853) (cond ((and (cons? V4853) (and (cons? (tl V4853)) (= () (tl (tl V4853))))) (cons (hd V4853) (cons () ()))) (true (shen.f_error <e>))))



