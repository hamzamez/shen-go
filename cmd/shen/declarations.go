package main

import . "github.com/tiancaiamao/shen-go/kl"

var __defun__shen_4initialise__arity__table Obj // shen.initialise_arity_table
var __defun__arity Obj // arity
var __defun__systemf Obj // systemf
var __defun__adjoin Obj // adjoin
var __defun__shen_4lambda_1form_1entry Obj // shen.lambda-form-entry
var __defun__shen_4lambda_1form Obj // shen.lambda-form
var __defun__shen_4add_1end Obj // shen.add-end
var __defun__shen_4set_1lambda_1form_1entry Obj // shen.set-lambda-form-entry
var __defun__specialise Obj // specialise
var __defun__unspecialise Obj // unspecialise

func init() {
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310184 := MakeString("Copyright (c) 2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of Mark Tarver may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.")
__ctx.Return(reg310184)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310185 := MakeSymbol("shen.*installing-kl*")
reg310186 := False;
reg310187 := PrimSet(reg310185, reg310186)
__ctx.Return(reg310187)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310188 := MakeSymbol("shen.*history*")
reg310189 := Nil;
reg310190 := PrimSet(reg310188, reg310189)
__ctx.Return(reg310190)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310191 := MakeSymbol("shen.*tc*")
reg310192 := False;
reg310193 := PrimSet(reg310191, reg310192)
__ctx.Return(reg310193)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310194 := MakeSymbol("*property-vector*")
reg310195 := MakeNumber(20000)
reg310196 := __e.Call(__defun__shen_4dict, reg310195)
reg310197 := PrimSet(reg310194, reg310196)
__ctx.Return(reg310197)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310198 := MakeSymbol("shen.*process-counter*")
reg310199 := MakeNumber(0)
reg310200 := PrimSet(reg310198, reg310199)
__ctx.Return(reg310200)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310201 := MakeSymbol("shen.*varcounter*")
reg310202 := MakeNumber(10000)
reg310203 := __e.Call(__defun__vector, reg310202)
reg310204 := PrimSet(reg310201, reg310203)
__ctx.Return(reg310204)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310205 := MakeSymbol("shen.*prologvectors*")
reg310206 := MakeNumber(10000)
reg310207 := __e.Call(__defun__vector, reg310206)
reg310208 := PrimSet(reg310205, reg310207)
__ctx.Return(reg310208)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310209 := MakeSymbol("shen.*demodulation-function*")
reg310210 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.Return(X)
return
}, 1)
reg310211 := PrimSet(reg310209, reg310210)
__ctx.Return(reg310211)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310212 := MakeSymbol("shen.*macroreg*")
reg310213 := MakeSymbol("shen.timer-macro")
reg310214 := MakeSymbol("shen.cases-macro")
reg310215 := MakeSymbol("shen.abs-macro")
reg310216 := MakeSymbol("shen.put/get-macro")
reg310217 := MakeSymbol("shen.compile-macro")
reg310218 := MakeSymbol("shen.datatype-macro")
reg310219 := MakeSymbol("shen.let-macro")
reg310220 := MakeSymbol("shen.assoc-macro")
reg310221 := MakeSymbol("shen.make-string-macro")
reg310222 := MakeSymbol("shen.output-macro")
reg310223 := MakeSymbol("shen.input-macro")
reg310224 := MakeSymbol("shen.error-macro")
reg310225 := MakeSymbol("shen.prolog-macro")
reg310226 := MakeSymbol("shen.synonyms-macro")
reg310227 := MakeSymbol("shen.nl-macro")
reg310228 := MakeSymbol("shen.@s-macro")
reg310229 := MakeSymbol("shen.defprolog-macro")
reg310230 := MakeSymbol("shen.function-macro")
reg310231 := Nil;
reg310232 := PrimCons(reg310230, reg310231)
reg310233 := PrimCons(reg310229, reg310232)
reg310234 := PrimCons(reg310228, reg310233)
reg310235 := PrimCons(reg310227, reg310234)
reg310236 := PrimCons(reg310226, reg310235)
reg310237 := PrimCons(reg310225, reg310236)
reg310238 := PrimCons(reg310224, reg310237)
reg310239 := PrimCons(reg310223, reg310238)
reg310240 := PrimCons(reg310222, reg310239)
reg310241 := PrimCons(reg310221, reg310240)
reg310242 := PrimCons(reg310220, reg310241)
reg310243 := PrimCons(reg310219, reg310242)
reg310244 := PrimCons(reg310218, reg310243)
reg310245 := PrimCons(reg310217, reg310244)
reg310246 := PrimCons(reg310216, reg310245)
reg310247 := PrimCons(reg310215, reg310246)
reg310248 := PrimCons(reg310214, reg310247)
reg310249 := PrimCons(reg310213, reg310248)
reg310250 := PrimSet(reg310212, reg310249)
__ctx.Return(reg310250)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310251 := MakeSymbol("*macros*")
reg310252 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4timer_1macro, X)
return
}, 1)
reg310254 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4cases_1macro, X)
return
}, 1)
reg310256 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4abs_1macro, X)
return
}, 1)
reg310258 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4put_cget_1macro, X)
return
}, 1)
reg310260 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4compile_1macro, X)
return
}, 1)
reg310262 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4datatype_1macro, X)
return
}, 1)
reg310264 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4let_1macro, X)
return
}, 1)
reg310266 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4assoc_1macro, X)
return
}, 1)
reg310268 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4make_1string_1macro, X)
return
}, 1)
reg310270 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4output_1macro, X)
return
}, 1)
reg310272 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4input_1macro, X)
return
}, 1)
reg310274 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4error_1macro, X)
return
}, 1)
reg310276 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4prolog_1macro, X)
return
}, 1)
reg310278 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4synonyms_1macro, X)
return
}, 1)
reg310280 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4nl_1macro, X)
return
}, 1)
reg310282 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4_8s_1macro, X)
return
}, 1)
reg310284 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4defprolog_1macro, X)
return
}, 1)
reg310286 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4function_1macro, X)
return
}, 1)
reg310288 := Nil;
reg310289 := PrimCons(reg310286, reg310288)
reg310290 := PrimCons(reg310284, reg310289)
reg310291 := PrimCons(reg310282, reg310290)
reg310292 := PrimCons(reg310280, reg310291)
reg310293 := PrimCons(reg310278, reg310292)
reg310294 := PrimCons(reg310276, reg310293)
reg310295 := PrimCons(reg310274, reg310294)
reg310296 := PrimCons(reg310272, reg310295)
reg310297 := PrimCons(reg310270, reg310296)
reg310298 := PrimCons(reg310268, reg310297)
reg310299 := PrimCons(reg310266, reg310298)
reg310300 := PrimCons(reg310264, reg310299)
reg310301 := PrimCons(reg310262, reg310300)
reg310302 := PrimCons(reg310260, reg310301)
reg310303 := PrimCons(reg310258, reg310302)
reg310304 := PrimCons(reg310256, reg310303)
reg310305 := PrimCons(reg310254, reg310304)
reg310306 := PrimCons(reg310252, reg310305)
reg310307 := PrimSet(reg310251, reg310306)
__ctx.Return(reg310307)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310308 := MakeSymbol("shen.*gensym*")
reg310309 := MakeNumber(0)
reg310310 := PrimSet(reg310308, reg310309)
__ctx.Return(reg310310)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310311 := MakeSymbol("shen.*tracking*")
reg310312 := Nil;
reg310313 := PrimSet(reg310311, reg310312)
__ctx.Return(reg310313)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310314 := MakeSymbol("shen.*alphabet*")
reg310315 := MakeSymbol("A")
reg310316 := MakeSymbol("B")
reg310317 := MakeSymbol("C")
reg310318 := MakeSymbol("D")
reg310319 := MakeSymbol("E")
reg310320 := MakeSymbol("F")
reg310321 := MakeSymbol("G")
reg310322 := MakeSymbol("H")
reg310323 := MakeSymbol("I")
reg310324 := MakeSymbol("J")
reg310325 := MakeSymbol("K")
reg310326 := MakeSymbol("L")
reg310327 := MakeSymbol("M")
reg310328 := MakeSymbol("N")
reg310329 := MakeSymbol("O")
reg310330 := MakeSymbol("P")
reg310331 := MakeSymbol("Q")
reg310332 := MakeSymbol("R")
reg310333 := MakeSymbol("S")
reg310334 := MakeSymbol("T")
reg310335 := MakeSymbol("U")
reg310336 := MakeSymbol("V")
reg310337 := MakeSymbol("W")
reg310338 := MakeSymbol("X")
reg310339 := MakeSymbol("Y")
reg310340 := MakeSymbol("Z")
reg310341 := Nil;
reg310342 := PrimCons(reg310340, reg310341)
reg310343 := PrimCons(reg310339, reg310342)
reg310344 := PrimCons(reg310338, reg310343)
reg310345 := PrimCons(reg310337, reg310344)
reg310346 := PrimCons(reg310336, reg310345)
reg310347 := PrimCons(reg310335, reg310346)
reg310348 := PrimCons(reg310334, reg310347)
reg310349 := PrimCons(reg310333, reg310348)
reg310350 := PrimCons(reg310332, reg310349)
reg310351 := PrimCons(reg310331, reg310350)
reg310352 := PrimCons(reg310330, reg310351)
reg310353 := PrimCons(reg310329, reg310352)
reg310354 := PrimCons(reg310328, reg310353)
reg310355 := PrimCons(reg310327, reg310354)
reg310356 := PrimCons(reg310326, reg310355)
reg310357 := PrimCons(reg310325, reg310356)
reg310358 := PrimCons(reg310324, reg310357)
reg310359 := PrimCons(reg310323, reg310358)
reg310360 := PrimCons(reg310322, reg310359)
reg310361 := PrimCons(reg310321, reg310360)
reg310362 := PrimCons(reg310320, reg310361)
reg310363 := PrimCons(reg310319, reg310362)
reg310364 := PrimCons(reg310318, reg310363)
reg310365 := PrimCons(reg310317, reg310364)
reg310366 := PrimCons(reg310316, reg310365)
reg310367 := PrimCons(reg310315, reg310366)
reg310368 := PrimSet(reg310314, reg310367)
__ctx.Return(reg310368)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310369 := MakeSymbol("shen.*special*")
reg310370 := MakeSymbol("@p")
reg310371 := MakeSymbol("@s")
reg310372 := MakeSymbol("@v")
reg310373 := MakeSymbol("cons")
reg310374 := MakeSymbol("lambda")
reg310375 := MakeSymbol("let")
reg310376 := MakeSymbol("where")
reg310377 := MakeSymbol("set")
reg310378 := MakeSymbol("open")
reg310379 := Nil;
reg310380 := PrimCons(reg310378, reg310379)
reg310381 := PrimCons(reg310377, reg310380)
reg310382 := PrimCons(reg310376, reg310381)
reg310383 := PrimCons(reg310375, reg310382)
reg310384 := PrimCons(reg310374, reg310383)
reg310385 := PrimCons(reg310373, reg310384)
reg310386 := PrimCons(reg310372, reg310385)
reg310387 := PrimCons(reg310371, reg310386)
reg310388 := PrimCons(reg310370, reg310387)
reg310389 := PrimSet(reg310369, reg310388)
__ctx.Return(reg310389)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310390 := MakeSymbol("shen.*extraspecial*")
reg310391 := MakeSymbol("define")
reg310392 := MakeSymbol("shen.process-datatype")
reg310393 := MakeSymbol("input+")
reg310394 := MakeSymbol("defcc")
reg310395 := MakeSymbol("shen.read+")
reg310396 := MakeSymbol("defmacro")
reg310397 := Nil;
reg310398 := PrimCons(reg310396, reg310397)
reg310399 := PrimCons(reg310395, reg310398)
reg310400 := PrimCons(reg310394, reg310399)
reg310401 := PrimCons(reg310393, reg310400)
reg310402 := PrimCons(reg310392, reg310401)
reg310403 := PrimCons(reg310391, reg310402)
reg310404 := PrimSet(reg310390, reg310403)
__ctx.Return(reg310404)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310405 := MakeSymbol("shen.*spy*")
reg310406 := False;
reg310407 := PrimSet(reg310405, reg310406)
__ctx.Return(reg310407)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310408 := MakeSymbol("shen.*datatypes*")
reg310409 := Nil;
reg310410 := PrimSet(reg310408, reg310409)
__ctx.Return(reg310410)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310411 := MakeSymbol("shen.*alldatatypes*")
reg310412 := Nil;
reg310413 := PrimSet(reg310411, reg310412)
__ctx.Return(reg310413)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310414 := MakeSymbol("shen.*shen-type-theory-enabled?*")
reg310415 := True;
reg310416 := PrimSet(reg310414, reg310415)
__ctx.Return(reg310416)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310417 := MakeSymbol("shen.*synonyms*")
reg310418 := Nil;
reg310419 := PrimSet(reg310417, reg310418)
__ctx.Return(reg310419)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310420 := MakeSymbol("shen.*system*")
reg310421 := Nil;
reg310422 := PrimSet(reg310420, reg310421)
__ctx.Return(reg310422)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310423 := MakeSymbol("shen.*signedfuncs*")
reg310424 := Nil;
reg310425 := PrimSet(reg310423, reg310424)
__ctx.Return(reg310425)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310426 := MakeSymbol("shen.*maxcomplexity*")
reg310427 := MakeNumber(128)
reg310428 := PrimSet(reg310426, reg310427)
__ctx.Return(reg310428)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310429 := MakeSymbol("shen.*occurs*")
reg310430 := True;
reg310431 := PrimSet(reg310429, reg310430)
__ctx.Return(reg310431)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310432 := MakeSymbol("shen.*maxinferences*")
reg310433 := MakeNumber(1000000)
reg310434 := PrimSet(reg310432, reg310433)
__ctx.Return(reg310434)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310435 := MakeSymbol("*maximum-print-sequence-size*")
reg310436 := MakeNumber(20)
reg310437 := PrimSet(reg310435, reg310436)
__ctx.Return(reg310437)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310438 := MakeSymbol("shen.*catch*")
reg310439 := MakeNumber(0)
reg310440 := PrimSet(reg310438, reg310439)
__ctx.Return(reg310440)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310441 := MakeSymbol("shen.*call*")
reg310442 := MakeNumber(0)
reg310443 := PrimSet(reg310441, reg310442)
__ctx.Return(reg310443)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310444 := MakeSymbol("shen.*infs*")
reg310445 := MakeNumber(0)
reg310446 := PrimSet(reg310444, reg310445)
__ctx.Return(reg310446)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310447 := MakeSymbol("*hush*")
reg310448 := False;
reg310449 := PrimSet(reg310447, reg310448)
__ctx.Return(reg310449)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310450 := MakeSymbol("shen.*optimise*")
reg310451 := False;
reg310452 := PrimSet(reg310450, reg310451)
__ctx.Return(reg310452)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310453 := MakeSymbol("*version*")
reg310454 := MakeString("Shen 21")
reg310455 := PrimSet(reg310453, reg310454)
__ctx.Return(reg310455)
return
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310456 := MakeSymbol("*home-directory*")
reg310457 := __e.Call(__defun__bound_2, reg310456)
reg310458 := PrimNot(reg310457)
if reg310458 == True {
reg310459 := MakeSymbol("*home-directory*")
reg310460 := MakeString("")
reg310461 := PrimSet(reg310459, reg310460)
__ctx.Return(reg310461)
return
} else {
reg310462 := MakeSymbol("shen.skip")
__ctx.Return(reg310462)
return
}
}, 0))
__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310463 := MakeSymbol("*sterror*")
reg310464 := __e.Call(__defun__bound_2, reg310463)
reg310465 := PrimNot(reg310464)
if reg310465 == True {
reg310466 := MakeSymbol("*sterror*")
reg310467 := MakeSymbol("*stoutput*")
reg310468 := PrimValue(reg310467)
reg310469 := PrimSet(reg310466, reg310468)
__ctx.Return(reg310469)
return
} else {
reg310470 := MakeSymbol("shen.skip")
__ctx.Return(reg310470)
return
}
}, 0))
__defun__shen_4initialise__arity__table = MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
V1647 := __args[0]
_ = V1647
reg310471 := Nil;
reg310472 := PrimEqual(reg310471, V1647)
if reg310472 == True {
reg310473 := Nil;
__ctx.Return(reg310473)
return
} else {
reg310474 := PrimIsPair(V1647)
var reg310481 Obj
if reg310474 == True {
reg310475 := PrimTail(V1647)
reg310476 := PrimIsPair(reg310475)
var reg310479 Obj
if reg310476 == True {
reg310477 := True;
reg310479 = reg310477
} else {
reg310478 := False;
reg310479 = reg310478
}
reg310481 = reg310479
} else {
reg310480 := False;
reg310481 = reg310480
}
if reg310481 == True {
reg310482 := PrimHead(V1647)
reg310483 := MakeSymbol("arity")
reg310484 := PrimTail(V1647)
reg310485 := PrimHead(reg310484)
reg310486 := MakeSymbol("*property-vector*")
reg310487 := PrimValue(reg310486)
reg310488 := __e.Call(__defun__put, reg310482, reg310483, reg310485, reg310487)
DecArity := reg310488
_ = DecArity
reg310489 := PrimTail(V1647)
reg310490 := PrimTail(reg310489)
__ctx.TailApply(__defun__shen_4initialise__arity__table, reg310490)
return
} else {
reg310492 := MakeSymbol("shen.initialise_arity_table")
__ctx.TailApply(__defun__shen_4f__error, reg310492)
return
}
}
}, 1)
__initDefs = append(__initDefs, defType{name: "shen.initialise_arity_table", value: __defun__shen_4initialise__arity__table})

__defun__arity = MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
V1649 := __args[0]
_ = V1649
reg310494 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310495 := MakeSymbol("arity")
reg310496 := MakeSymbol("*property-vector*")
reg310497 := PrimValue(reg310496)
__ctx.TailApply(__defun__get, V1649, reg310495, reg310497)
return
}, 0)
reg310499 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
E := __args[0]
_ = E
reg310500 := MakeNumber(-1)
__ctx.Return(reg310500)
return
}, 1)
reg310501 := __e.Try(reg310494).Catch(reg310499)
__ctx.Return(reg310501)
return
}, 1)
__initDefs = append(__initDefs, defType{name: "arity", value: __defun__arity})

__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg310502 := MakeSymbol("abort")
reg310503 := MakeNumber(0)
reg310504 := MakeSymbol("absvector?")
reg310505 := MakeNumber(1)
reg310506 := MakeSymbol("absvector")
reg310507 := MakeNumber(1)
reg310508 := MakeSymbol("adjoin")
reg310509 := MakeNumber(2)
reg310510 := MakeSymbol("and")
reg310511 := MakeNumber(2)
reg310512 := MakeSymbol("append")
reg310513 := MakeNumber(2)
reg310514 := MakeSymbol("arity")
reg310515 := MakeNumber(1)
reg310516 := MakeSymbol("assoc")
reg310517 := MakeNumber(2)
reg310518 := MakeSymbol("boolean?")
reg310519 := MakeNumber(1)
reg310520 := MakeSymbol("bound?")
reg310521 := MakeNumber(1)
reg310522 := MakeSymbol("cd")
reg310523 := MakeNumber(1)
reg310524 := MakeSymbol("close")
reg310525 := MakeNumber(1)
reg310526 := MakeSymbol("compile")
reg310527 := MakeNumber(3)
reg310528 := MakeSymbol("concat")
reg310529 := MakeNumber(2)
reg310530 := MakeSymbol("cons")
reg310531 := MakeNumber(2)
reg310532 := MakeSymbol("cons?")
reg310533 := MakeNumber(1)
reg310534 := MakeSymbol("cn")
reg310535 := MakeNumber(2)
reg310536 := MakeSymbol("declare")
reg310537 := MakeNumber(2)
reg310538 := MakeSymbol("destroy")
reg310539 := MakeNumber(1)
reg310540 := MakeSymbol("difference")
reg310541 := MakeNumber(2)
reg310542 := MakeSymbol("do")
reg310543 := MakeNumber(2)
reg310544 := MakeSymbol("element?")
reg310545 := MakeNumber(2)
reg310546 := MakeSymbol("empty?")
reg310547 := MakeNumber(1)
reg310548 := MakeSymbol("enable-type-theory")
reg310549 := MakeNumber(1)
reg310550 := MakeSymbol("error-to-string")
reg310551 := MakeNumber(1)
reg310552 := MakeSymbol("shen.interror")
reg310553 := MakeNumber(2)
reg310554 := MakeSymbol("eval")
reg310555 := MakeNumber(1)
reg310556 := MakeSymbol("eval-kl")
reg310557 := MakeNumber(1)
reg310558 := MakeSymbol("explode")
reg310559 := MakeNumber(1)
reg310560 := MakeSymbol("external")
reg310561 := MakeNumber(1)
reg310562 := MakeSymbol("fail-if")
reg310563 := MakeNumber(2)
reg310564 := MakeSymbol("fail")
reg310565 := MakeNumber(0)
reg310566 := MakeSymbol("fix")
reg310567 := MakeNumber(2)
reg310568 := MakeSymbol("findall")
reg310569 := MakeNumber(5)
reg310570 := MakeSymbol("freeze")
reg310571 := MakeNumber(1)
reg310572 := MakeSymbol("fst")
reg310573 := MakeNumber(1)
reg310574 := MakeSymbol("gensym")
reg310575 := MakeNumber(1)
reg310576 := MakeSymbol("get")
reg310577 := MakeNumber(3)
reg310578 := MakeSymbol("get-time")
reg310579 := MakeNumber(1)
reg310580 := MakeSymbol("address->")
reg310581 := MakeNumber(3)
reg310582 := MakeSymbol("<-address")
reg310583 := MakeNumber(2)
reg310584 := MakeSymbol("<-vector")
reg310585 := MakeNumber(2)
reg310586 := MakeSymbol(">")
reg310587 := MakeNumber(2)
reg310588 := MakeSymbol(">=")
reg310589 := MakeNumber(2)
reg310590 := MakeSymbol("=")
reg310591 := MakeNumber(2)
reg310592 := MakeSymbol("hash")
reg310593 := MakeNumber(2)
reg310594 := MakeSymbol("hd")
reg310595 := MakeNumber(1)
reg310596 := MakeSymbol("hdv")
reg310597 := MakeNumber(1)
reg310598 := MakeSymbol("hdstr")
reg310599 := MakeNumber(1)
reg310600 := MakeSymbol("head")
reg310601 := MakeNumber(1)
reg310602 := MakeSymbol("if")
reg310603 := MakeNumber(3)
reg310604 := MakeSymbol("integer?")
reg310605 := MakeNumber(1)
reg310606 := MakeSymbol("intern")
reg310607 := MakeNumber(1)
reg310608 := MakeSymbol("identical")
reg310609 := MakeNumber(4)
reg310610 := MakeSymbol("inferences")
reg310611 := MakeNumber(0)
reg310612 := MakeSymbol("input")
reg310613 := MakeNumber(1)
reg310614 := MakeSymbol("input+")
reg310615 := MakeNumber(2)
reg310616 := MakeSymbol("implementation")
reg310617 := MakeNumber(0)
reg310618 := MakeSymbol("intersection")
reg310619 := MakeNumber(2)
reg310620 := MakeSymbol("internal")
reg310621 := MakeNumber(1)
reg310622 := MakeSymbol("it")
reg310623 := MakeNumber(0)
reg310624 := MakeSymbol("kill")
reg310625 := MakeNumber(0)
reg310626 := MakeSymbol("language")
reg310627 := MakeNumber(0)
reg310628 := MakeSymbol("length")
reg310629 := MakeNumber(1)
reg310630 := MakeSymbol("limit")
reg310631 := MakeNumber(1)
reg310632 := MakeSymbol("lineread")
reg310633 := MakeNumber(1)
reg310634 := MakeSymbol("load")
reg310635 := MakeNumber(1)
reg310636 := MakeSymbol("<")
reg310637 := MakeNumber(2)
reg310638 := MakeSymbol("<=")
reg310639 := MakeNumber(2)
reg310640 := MakeSymbol("vector")
reg310641 := MakeNumber(1)
reg310642 := MakeSymbol("macroexpand")
reg310643 := MakeNumber(1)
reg310644 := MakeSymbol("map")
reg310645 := MakeNumber(2)
reg310646 := MakeSymbol("mapcan")
reg310647 := MakeNumber(2)
reg310648 := MakeSymbol("maxinferences")
reg310649 := MakeNumber(1)
reg310650 := MakeSymbol("nl")
reg310651 := MakeNumber(1)
reg310652 := MakeSymbol("not")
reg310653 := MakeNumber(1)
reg310654 := MakeSymbol("nth")
reg310655 := MakeNumber(2)
reg310656 := MakeSymbol("n->string")
reg310657 := MakeNumber(1)
reg310658 := MakeSymbol("number?")
reg310659 := MakeNumber(1)
reg310660 := MakeSymbol("occurs-check")
reg310661 := MakeNumber(1)
reg310662 := MakeSymbol("occurrences")
reg310663 := MakeNumber(2)
reg310664 := MakeSymbol("occurs-check")
reg310665 := MakeNumber(1)
reg310666 := MakeSymbol("open")
reg310667 := MakeNumber(2)
reg310668 := MakeSymbol("optimise")
reg310669 := MakeNumber(1)
reg310670 := MakeSymbol("or")
reg310671 := MakeNumber(2)
reg310672 := MakeSymbol("os")
reg310673 := MakeNumber(0)
reg310674 := MakeSymbol("package")
reg310675 := MakeNumber(3)
reg310676 := MakeSymbol("package?")
reg310677 := MakeNumber(1)
reg310678 := MakeSymbol("port")
reg310679 := MakeNumber(0)
reg310680 := MakeSymbol("porters")
reg310681 := MakeNumber(0)
reg310682 := MakeSymbol("pos")
reg310683 := MakeNumber(2)
reg310684 := MakeSymbol("print")
reg310685 := MakeNumber(1)
reg310686 := MakeSymbol("profile")
reg310687 := MakeNumber(1)
reg310688 := MakeSymbol("profile-results")
reg310689 := MakeNumber(1)
reg310690 := MakeSymbol("pr")
reg310691 := MakeNumber(2)
reg310692 := MakeSymbol("ps")
reg310693 := MakeNumber(1)
reg310694 := MakeSymbol("preclude")
reg310695 := MakeNumber(1)
reg310696 := MakeSymbol("preclude-all-but")
reg310697 := MakeNumber(1)
reg310698 := MakeSymbol("protect")
reg310699 := MakeNumber(1)
reg310700 := MakeSymbol("address->")
reg310701 := MakeNumber(3)
reg310702 := MakeSymbol("put")
reg310703 := MakeNumber(4)
reg310704 := MakeSymbol("shen.reassemble")
reg310705 := MakeNumber(2)
reg310706 := MakeSymbol("read-file-as-string")
reg310707 := MakeNumber(1)
reg310708 := MakeSymbol("read-file")
reg310709 := MakeNumber(1)
reg310710 := MakeSymbol("read-file-as-bytelist")
reg310711 := MakeNumber(1)
reg310712 := MakeSymbol("read")
reg310713 := MakeNumber(1)
reg310714 := MakeSymbol("read-byte")
reg310715 := MakeNumber(1)
reg310716 := MakeSymbol("read-from-string")
reg310717 := MakeNumber(1)
reg310718 := MakeSymbol("receive")
reg310719 := MakeNumber(1)
reg310720 := MakeSymbol("release")
reg310721 := MakeNumber(0)
reg310722 := MakeSymbol("remove")
reg310723 := MakeNumber(2)
reg310724 := MakeSymbol("shen.require")
reg310725 := MakeNumber(3)
reg310726 := MakeSymbol("reverse")
reg310727 := MakeNumber(1)
reg310728 := MakeSymbol("set")
reg310729 := MakeNumber(2)
reg310730 := MakeSymbol("simple-error")
reg310731 := MakeNumber(1)
reg310732 := MakeSymbol("snd")
reg310733 := MakeNumber(1)
reg310734 := MakeSymbol("specialise")
reg310735 := MakeNumber(1)
reg310736 := MakeSymbol("spy")
reg310737 := MakeNumber(1)
reg310738 := MakeSymbol("step")
reg310739 := MakeNumber(1)
reg310740 := MakeSymbol("stinput")
reg310741 := MakeNumber(0)
reg310742 := MakeSymbol("stoutput")
reg310743 := MakeNumber(0)
reg310744 := MakeSymbol("sterror")
reg310745 := MakeNumber(0)
reg310746 := MakeSymbol("string->n")
reg310747 := MakeNumber(1)
reg310748 := MakeSymbol("string->symbol")
reg310749 := MakeNumber(1)
reg310750 := MakeSymbol("string?")
reg310751 := MakeNumber(1)
reg310752 := MakeSymbol("str")
reg310753 := MakeNumber(1)
reg310754 := MakeSymbol("subst")
reg310755 := MakeNumber(3)
reg310756 := MakeSymbol("sum")
reg310757 := MakeNumber(1)
reg310758 := MakeSymbol("symbol?")
reg310759 := MakeNumber(1)
reg310760 := MakeSymbol("systemf")
reg310761 := MakeNumber(1)
reg310762 := MakeSymbol("tail")
reg310763 := MakeNumber(1)
reg310764 := MakeSymbol("tl")
reg310765 := MakeNumber(1)
reg310766 := MakeSymbol("tc")
reg310767 := MakeNumber(1)
reg310768 := MakeSymbol("tc?")
reg310769 := MakeNumber(0)
reg310770 := MakeSymbol("thaw")
reg310771 := MakeNumber(1)
reg310772 := MakeSymbol("tlstr")
reg310773 := MakeNumber(1)
reg310774 := MakeSymbol("track")
reg310775 := MakeNumber(1)
reg310776 := MakeSymbol("trap-error")
reg310777 := MakeNumber(2)
reg310778 := MakeSymbol("tuple?")
reg310779 := MakeNumber(1)
reg310780 := MakeSymbol("type")
reg310781 := MakeNumber(2)
reg310782 := MakeSymbol("return")
reg310783 := MakeNumber(3)
reg310784 := MakeSymbol("undefmacro")
reg310785 := MakeNumber(1)
reg310786 := MakeSymbol("unput")
reg310787 := MakeNumber(3)
reg310788 := MakeSymbol("unprofile")
reg310789 := MakeNumber(1)
reg310790 := MakeSymbol("unify")
reg310791 := MakeNumber(4)
reg310792 := MakeSymbol("unify!")
reg310793 := MakeNumber(4)
reg310794 := MakeSymbol("union")
reg310795 := MakeNumber(2)
reg310796 := MakeSymbol("untrack")
reg310797 := MakeNumber(1)
reg310798 := MakeSymbol("unspecialise")
reg310799 := MakeNumber(1)
reg310800 := MakeSymbol("undefmacro")
reg310801 := MakeNumber(1)
reg310802 := MakeSymbol("vector")
reg310803 := MakeNumber(1)
reg310804 := MakeSymbol("vector?")
reg310805 := MakeNumber(1)
reg310806 := MakeSymbol("vector->")
reg310807 := MakeNumber(3)
reg310808 := MakeSymbol("value")
reg310809 := MakeNumber(1)
reg310810 := MakeSymbol("variable?")
reg310811 := MakeNumber(1)
reg310812 := MakeSymbol("version")
reg310813 := MakeNumber(0)
reg310814 := MakeSymbol("write-byte")
reg310815 := MakeNumber(2)
reg310816 := MakeSymbol("write-to-file")
reg310817 := MakeNumber(2)
reg310818 := MakeSymbol("y-or-n?")
reg310819 := MakeNumber(1)
reg310820 := MakeSymbol("+")
reg310821 := MakeNumber(2)
reg310822 := MakeSymbol("*")
reg310823 := MakeNumber(2)
reg310824 := MakeSymbol("/")
reg310825 := MakeNumber(2)
reg310826 := MakeSymbol("-")
reg310827 := MakeNumber(2)
reg310828 := MakeSymbol("==")
reg310829 := MakeNumber(2)
reg310830 := MakeSymbol("<e>")
reg310831 := MakeNumber(1)
reg310832 := MakeSymbol("<!>")
reg310833 := MakeNumber(1)
reg310834 := MakeSymbol("@p")
reg310835 := MakeNumber(2)
reg310836 := MakeSymbol("@v")
reg310837 := MakeNumber(2)
reg310838 := MakeSymbol("@s")
reg310839 := MakeNumber(2)
reg310840 := MakeSymbol("preclude")
reg310841 := MakeNumber(1)
reg310842 := MakeSymbol("include")
reg310843 := MakeNumber(1)
reg310844 := MakeSymbol("preclude-all-but")
reg310845 := MakeNumber(1)
reg310846 := MakeSymbol("include-all-but")
reg310847 := MakeNumber(1)
reg310848 := Nil;
reg310849 := PrimCons(reg310847, reg310848)
reg310850 := PrimCons(reg310846, reg310849)
reg310851 := PrimCons(reg310845, reg310850)
reg310852 := PrimCons(reg310844, reg310851)
reg310853 := PrimCons(reg310843, reg310852)
reg310854 := PrimCons(reg310842, reg310853)
reg310855 := PrimCons(reg310841, reg310854)
reg310856 := PrimCons(reg310840, reg310855)
reg310857 := PrimCons(reg310839, reg310856)
reg310858 := PrimCons(reg310838, reg310857)
reg310859 := PrimCons(reg310837, reg310858)
reg310860 := PrimCons(reg310836, reg310859)
reg310861 := PrimCons(reg310835, reg310860)
reg310862 := PrimCons(reg310834, reg310861)
reg310863 := PrimCons(reg310833, reg310862)
reg310864 := PrimCons(reg310832, reg310863)
reg310865 := PrimCons(reg310831, reg310864)
reg310866 := PrimCons(reg310830, reg310865)
reg310867 := PrimCons(reg310829, reg310866)
reg310868 := PrimCons(reg310828, reg310867)
reg310869 := PrimCons(reg310827, reg310868)
reg310870 := PrimCons(reg310826, reg310869)
reg310871 := PrimCons(reg310825, reg310870)
reg310872 := PrimCons(reg310824, reg310871)
reg310873 := PrimCons(reg310823, reg310872)
reg310874 := PrimCons(reg310822, reg310873)
reg310875 := PrimCons(reg310821, reg310874)
reg310876 := PrimCons(reg310820, reg310875)
reg310877 := PrimCons(reg310819, reg310876)
reg310878 := PrimCons(reg310818, reg310877)
reg310879 := PrimCons(reg310817, reg310878)
reg310880 := PrimCons(reg310816, reg310879)
reg310881 := PrimCons(reg310815, reg310880)
reg310882 := PrimCons(reg310814, reg310881)
reg310883 := PrimCons(reg310813, reg310882)
reg310884 := PrimCons(reg310812, reg310883)
reg310885 := PrimCons(reg310811, reg310884)
reg310886 := PrimCons(reg310810, reg310885)
reg310887 := PrimCons(reg310809, reg310886)
reg310888 := PrimCons(reg310808, reg310887)
reg310889 := PrimCons(reg310807, reg310888)
reg310890 := PrimCons(reg310806, reg310889)
reg310891 := PrimCons(reg310805, reg310890)
reg310892 := PrimCons(reg310804, reg310891)
reg310893 := PrimCons(reg310803, reg310892)
reg310894 := PrimCons(reg310802, reg310893)
reg310895 := PrimCons(reg310801, reg310894)
reg310896 := PrimCons(reg310800, reg310895)
reg310897 := PrimCons(reg310799, reg310896)
reg310898 := PrimCons(reg310798, reg310897)
reg310899 := PrimCons(reg310797, reg310898)
reg310900 := PrimCons(reg310796, reg310899)
reg310901 := PrimCons(reg310795, reg310900)
reg310902 := PrimCons(reg310794, reg310901)
reg310903 := PrimCons(reg310793, reg310902)
reg310904 := PrimCons(reg310792, reg310903)
reg310905 := PrimCons(reg310791, reg310904)
reg310906 := PrimCons(reg310790, reg310905)
reg310907 := PrimCons(reg310789, reg310906)
reg310908 := PrimCons(reg310788, reg310907)
reg310909 := PrimCons(reg310787, reg310908)
reg310910 := PrimCons(reg310786, reg310909)
reg310911 := PrimCons(reg310785, reg310910)
reg310912 := PrimCons(reg310784, reg310911)
reg310913 := PrimCons(reg310783, reg310912)
reg310914 := PrimCons(reg310782, reg310913)
reg310915 := PrimCons(reg310781, reg310914)
reg310916 := PrimCons(reg310780, reg310915)
reg310917 := PrimCons(reg310779, reg310916)
reg310918 := PrimCons(reg310778, reg310917)
reg310919 := PrimCons(reg310777, reg310918)
reg310920 := PrimCons(reg310776, reg310919)
reg310921 := PrimCons(reg310775, reg310920)
reg310922 := PrimCons(reg310774, reg310921)
reg310923 := PrimCons(reg310773, reg310922)
reg310924 := PrimCons(reg310772, reg310923)
reg310925 := PrimCons(reg310771, reg310924)
reg310926 := PrimCons(reg310770, reg310925)
reg310927 := PrimCons(reg310769, reg310926)
reg310928 := PrimCons(reg310768, reg310927)
reg310929 := PrimCons(reg310767, reg310928)
reg310930 := PrimCons(reg310766, reg310929)
reg310931 := PrimCons(reg310765, reg310930)
reg310932 := PrimCons(reg310764, reg310931)
reg310933 := PrimCons(reg310763, reg310932)
reg310934 := PrimCons(reg310762, reg310933)
reg310935 := PrimCons(reg310761, reg310934)
reg310936 := PrimCons(reg310760, reg310935)
reg310937 := PrimCons(reg310759, reg310936)
reg310938 := PrimCons(reg310758, reg310937)
reg310939 := PrimCons(reg310757, reg310938)
reg310940 := PrimCons(reg310756, reg310939)
reg310941 := PrimCons(reg310755, reg310940)
reg310942 := PrimCons(reg310754, reg310941)
reg310943 := PrimCons(reg310753, reg310942)
reg310944 := PrimCons(reg310752, reg310943)
reg310945 := PrimCons(reg310751, reg310944)
reg310946 := PrimCons(reg310750, reg310945)
reg310947 := PrimCons(reg310749, reg310946)
reg310948 := PrimCons(reg310748, reg310947)
reg310949 := PrimCons(reg310747, reg310948)
reg310950 := PrimCons(reg310746, reg310949)
reg310951 := PrimCons(reg310745, reg310950)
reg310952 := PrimCons(reg310744, reg310951)
reg310953 := PrimCons(reg310743, reg310952)
reg310954 := PrimCons(reg310742, reg310953)
reg310955 := PrimCons(reg310741, reg310954)
reg310956 := PrimCons(reg310740, reg310955)
reg310957 := PrimCons(reg310739, reg310956)
reg310958 := PrimCons(reg310738, reg310957)
reg310959 := PrimCons(reg310737, reg310958)
reg310960 := PrimCons(reg310736, reg310959)
reg310961 := PrimCons(reg310735, reg310960)
reg310962 := PrimCons(reg310734, reg310961)
reg310963 := PrimCons(reg310733, reg310962)
reg310964 := PrimCons(reg310732, reg310963)
reg310965 := PrimCons(reg310731, reg310964)
reg310966 := PrimCons(reg310730, reg310965)
reg310967 := PrimCons(reg310729, reg310966)
reg310968 := PrimCons(reg310728, reg310967)
reg310969 := PrimCons(reg310727, reg310968)
reg310970 := PrimCons(reg310726, reg310969)
reg310971 := PrimCons(reg310725, reg310970)
reg310972 := PrimCons(reg310724, reg310971)
reg310973 := PrimCons(reg310723, reg310972)
reg310974 := PrimCons(reg310722, reg310973)
reg310975 := PrimCons(reg310721, reg310974)
reg310976 := PrimCons(reg310720, reg310975)
reg310977 := PrimCons(reg310719, reg310976)
reg310978 := PrimCons(reg310718, reg310977)
reg310979 := PrimCons(reg310717, reg310978)
reg310980 := PrimCons(reg310716, reg310979)
reg310981 := PrimCons(reg310715, reg310980)
reg310982 := PrimCons(reg310714, reg310981)
reg310983 := PrimCons(reg310713, reg310982)
reg310984 := PrimCons(reg310712, reg310983)
reg310985 := PrimCons(reg310711, reg310984)
reg310986 := PrimCons(reg310710, reg310985)
reg310987 := PrimCons(reg310709, reg310986)
reg310988 := PrimCons(reg310708, reg310987)
reg310989 := PrimCons(reg310707, reg310988)
reg310990 := PrimCons(reg310706, reg310989)
reg310991 := PrimCons(reg310705, reg310990)
reg310992 := PrimCons(reg310704, reg310991)
reg310993 := PrimCons(reg310703, reg310992)
reg310994 := PrimCons(reg310702, reg310993)
reg310995 := PrimCons(reg310701, reg310994)
reg310996 := PrimCons(reg310700, reg310995)
reg310997 := PrimCons(reg310699, reg310996)
reg310998 := PrimCons(reg310698, reg310997)
reg310999 := PrimCons(reg310697, reg310998)
reg311000 := PrimCons(reg310696, reg310999)
reg311001 := PrimCons(reg310695, reg311000)
reg311002 := PrimCons(reg310694, reg311001)
reg311003 := PrimCons(reg310693, reg311002)
reg311004 := PrimCons(reg310692, reg311003)
reg311005 := PrimCons(reg310691, reg311004)
reg311006 := PrimCons(reg310690, reg311005)
reg311007 := PrimCons(reg310689, reg311006)
reg311008 := PrimCons(reg310688, reg311007)
reg311009 := PrimCons(reg310687, reg311008)
reg311010 := PrimCons(reg310686, reg311009)
reg311011 := PrimCons(reg310685, reg311010)
reg311012 := PrimCons(reg310684, reg311011)
reg311013 := PrimCons(reg310683, reg311012)
reg311014 := PrimCons(reg310682, reg311013)
reg311015 := PrimCons(reg310681, reg311014)
reg311016 := PrimCons(reg310680, reg311015)
reg311017 := PrimCons(reg310679, reg311016)
reg311018 := PrimCons(reg310678, reg311017)
reg311019 := PrimCons(reg310677, reg311018)
reg311020 := PrimCons(reg310676, reg311019)
reg311021 := PrimCons(reg310675, reg311020)
reg311022 := PrimCons(reg310674, reg311021)
reg311023 := PrimCons(reg310673, reg311022)
reg311024 := PrimCons(reg310672, reg311023)
reg311025 := PrimCons(reg310671, reg311024)
reg311026 := PrimCons(reg310670, reg311025)
reg311027 := PrimCons(reg310669, reg311026)
reg311028 := PrimCons(reg310668, reg311027)
reg311029 := PrimCons(reg310667, reg311028)
reg311030 := PrimCons(reg310666, reg311029)
reg311031 := PrimCons(reg310665, reg311030)
reg311032 := PrimCons(reg310664, reg311031)
reg311033 := PrimCons(reg310663, reg311032)
reg311034 := PrimCons(reg310662, reg311033)
reg311035 := PrimCons(reg310661, reg311034)
reg311036 := PrimCons(reg310660, reg311035)
reg311037 := PrimCons(reg310659, reg311036)
reg311038 := PrimCons(reg310658, reg311037)
reg311039 := PrimCons(reg310657, reg311038)
reg311040 := PrimCons(reg310656, reg311039)
reg311041 := PrimCons(reg310655, reg311040)
reg311042 := PrimCons(reg310654, reg311041)
reg311043 := PrimCons(reg310653, reg311042)
reg311044 := PrimCons(reg310652, reg311043)
reg311045 := PrimCons(reg310651, reg311044)
reg311046 := PrimCons(reg310650, reg311045)
reg311047 := PrimCons(reg310649, reg311046)
reg311048 := PrimCons(reg310648, reg311047)
reg311049 := PrimCons(reg310647, reg311048)
reg311050 := PrimCons(reg310646, reg311049)
reg311051 := PrimCons(reg310645, reg311050)
reg311052 := PrimCons(reg310644, reg311051)
reg311053 := PrimCons(reg310643, reg311052)
reg311054 := PrimCons(reg310642, reg311053)
reg311055 := PrimCons(reg310641, reg311054)
reg311056 := PrimCons(reg310640, reg311055)
reg311057 := PrimCons(reg310639, reg311056)
reg311058 := PrimCons(reg310638, reg311057)
reg311059 := PrimCons(reg310637, reg311058)
reg311060 := PrimCons(reg310636, reg311059)
reg311061 := PrimCons(reg310635, reg311060)
reg311062 := PrimCons(reg310634, reg311061)
reg311063 := PrimCons(reg310633, reg311062)
reg311064 := PrimCons(reg310632, reg311063)
reg311065 := PrimCons(reg310631, reg311064)
reg311066 := PrimCons(reg310630, reg311065)
reg311067 := PrimCons(reg310629, reg311066)
reg311068 := PrimCons(reg310628, reg311067)
reg311069 := PrimCons(reg310627, reg311068)
reg311070 := PrimCons(reg310626, reg311069)
reg311071 := PrimCons(reg310625, reg311070)
reg311072 := PrimCons(reg310624, reg311071)
reg311073 := PrimCons(reg310623, reg311072)
reg311074 := PrimCons(reg310622, reg311073)
reg311075 := PrimCons(reg310621, reg311074)
reg311076 := PrimCons(reg310620, reg311075)
reg311077 := PrimCons(reg310619, reg311076)
reg311078 := PrimCons(reg310618, reg311077)
reg311079 := PrimCons(reg310617, reg311078)
reg311080 := PrimCons(reg310616, reg311079)
reg311081 := PrimCons(reg310615, reg311080)
reg311082 := PrimCons(reg310614, reg311081)
reg311083 := PrimCons(reg310613, reg311082)
reg311084 := PrimCons(reg310612, reg311083)
reg311085 := PrimCons(reg310611, reg311084)
reg311086 := PrimCons(reg310610, reg311085)
reg311087 := PrimCons(reg310609, reg311086)
reg311088 := PrimCons(reg310608, reg311087)
reg311089 := PrimCons(reg310607, reg311088)
reg311090 := PrimCons(reg310606, reg311089)
reg311091 := PrimCons(reg310605, reg311090)
reg311092 := PrimCons(reg310604, reg311091)
reg311093 := PrimCons(reg310603, reg311092)
reg311094 := PrimCons(reg310602, reg311093)
reg311095 := PrimCons(reg310601, reg311094)
reg311096 := PrimCons(reg310600, reg311095)
reg311097 := PrimCons(reg310599, reg311096)
reg311098 := PrimCons(reg310598, reg311097)
reg311099 := PrimCons(reg310597, reg311098)
reg311100 := PrimCons(reg310596, reg311099)
reg311101 := PrimCons(reg310595, reg311100)
reg311102 := PrimCons(reg310594, reg311101)
reg311103 := PrimCons(reg310593, reg311102)
reg311104 := PrimCons(reg310592, reg311103)
reg311105 := PrimCons(reg310591, reg311104)
reg311106 := PrimCons(reg310590, reg311105)
reg311107 := PrimCons(reg310589, reg311106)
reg311108 := PrimCons(reg310588, reg311107)
reg311109 := PrimCons(reg310587, reg311108)
reg311110 := PrimCons(reg310586, reg311109)
reg311111 := PrimCons(reg310585, reg311110)
reg311112 := PrimCons(reg310584, reg311111)
reg311113 := PrimCons(reg310583, reg311112)
reg311114 := PrimCons(reg310582, reg311113)
reg311115 := PrimCons(reg310581, reg311114)
reg311116 := PrimCons(reg310580, reg311115)
reg311117 := PrimCons(reg310579, reg311116)
reg311118 := PrimCons(reg310578, reg311117)
reg311119 := PrimCons(reg310577, reg311118)
reg311120 := PrimCons(reg310576, reg311119)
reg311121 := PrimCons(reg310575, reg311120)
reg311122 := PrimCons(reg310574, reg311121)
reg311123 := PrimCons(reg310573, reg311122)
reg311124 := PrimCons(reg310572, reg311123)
reg311125 := PrimCons(reg310571, reg311124)
reg311126 := PrimCons(reg310570, reg311125)
reg311127 := PrimCons(reg310569, reg311126)
reg311128 := PrimCons(reg310568, reg311127)
reg311129 := PrimCons(reg310567, reg311128)
reg311130 := PrimCons(reg310566, reg311129)
reg311131 := PrimCons(reg310565, reg311130)
reg311132 := PrimCons(reg310564, reg311131)
reg311133 := PrimCons(reg310563, reg311132)
reg311134 := PrimCons(reg310562, reg311133)
reg311135 := PrimCons(reg310561, reg311134)
reg311136 := PrimCons(reg310560, reg311135)
reg311137 := PrimCons(reg310559, reg311136)
reg311138 := PrimCons(reg310558, reg311137)
reg311139 := PrimCons(reg310557, reg311138)
reg311140 := PrimCons(reg310556, reg311139)
reg311141 := PrimCons(reg310555, reg311140)
reg311142 := PrimCons(reg310554, reg311141)
reg311143 := PrimCons(reg310553, reg311142)
reg311144 := PrimCons(reg310552, reg311143)
reg311145 := PrimCons(reg310551, reg311144)
reg311146 := PrimCons(reg310550, reg311145)
reg311147 := PrimCons(reg310549, reg311146)
reg311148 := PrimCons(reg310548, reg311147)
reg311149 := PrimCons(reg310547, reg311148)
reg311150 := PrimCons(reg310546, reg311149)
reg311151 := PrimCons(reg310545, reg311150)
reg311152 := PrimCons(reg310544, reg311151)
reg311153 := PrimCons(reg310543, reg311152)
reg311154 := PrimCons(reg310542, reg311153)
reg311155 := PrimCons(reg310541, reg311154)
reg311156 := PrimCons(reg310540, reg311155)
reg311157 := PrimCons(reg310539, reg311156)
reg311158 := PrimCons(reg310538, reg311157)
reg311159 := PrimCons(reg310537, reg311158)
reg311160 := PrimCons(reg310536, reg311159)
reg311161 := PrimCons(reg310535, reg311160)
reg311162 := PrimCons(reg310534, reg311161)
reg311163 := PrimCons(reg310533, reg311162)
reg311164 := PrimCons(reg310532, reg311163)
reg311165 := PrimCons(reg310531, reg311164)
reg311166 := PrimCons(reg310530, reg311165)
reg311167 := PrimCons(reg310529, reg311166)
reg311168 := PrimCons(reg310528, reg311167)
reg311169 := PrimCons(reg310527, reg311168)
reg311170 := PrimCons(reg310526, reg311169)
reg311171 := PrimCons(reg310525, reg311170)
reg311172 := PrimCons(reg310524, reg311171)
reg311173 := PrimCons(reg310523, reg311172)
reg311174 := PrimCons(reg310522, reg311173)
reg311175 := PrimCons(reg310521, reg311174)
reg311176 := PrimCons(reg310520, reg311175)
reg311177 := PrimCons(reg310519, reg311176)
reg311178 := PrimCons(reg310518, reg311177)
reg311179 := PrimCons(reg310517, reg311178)
reg311180 := PrimCons(reg310516, reg311179)
reg311181 := PrimCons(reg310515, reg311180)
reg311182 := PrimCons(reg310514, reg311181)
reg311183 := PrimCons(reg310513, reg311182)
reg311184 := PrimCons(reg310512, reg311183)
reg311185 := PrimCons(reg310511, reg311184)
reg311186 := PrimCons(reg310510, reg311185)
reg311187 := PrimCons(reg310509, reg311186)
reg311188 := PrimCons(reg310508, reg311187)
reg311189 := PrimCons(reg310507, reg311188)
reg311190 := PrimCons(reg310506, reg311189)
reg311191 := PrimCons(reg310505, reg311190)
reg311192 := PrimCons(reg310504, reg311191)
reg311193 := PrimCons(reg310503, reg311192)
reg311194 := PrimCons(reg310502, reg311193)
__ctx.TailApply(__defun__shen_4initialise__arity__table, reg311194)
return
}, 0))
__defun__systemf = MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
V1651 := __args[0]
_ = V1651
reg311196 := MakeString("shen")
reg311197 := PrimIntern(reg311196)
Shen := reg311197
_ = Shen
reg311198 := MakeSymbol("shen.external-symbols")
reg311199 := MakeSymbol("*property-vector*")
reg311200 := PrimValue(reg311199)
reg311201 := __e.Call(__defun__get, Shen, reg311198, reg311200)
External := reg311201
_ = External
reg311202 := MakeSymbol("shen.external-symbols")
reg311203 := __e.Call(__defun__adjoin, V1651, External)
reg311204 := MakeSymbol("*property-vector*")
reg311205 := PrimValue(reg311204)
reg311206 := __e.Call(__defun__put, Shen, reg311202, reg311203, reg311205)
Place := reg311206
_ = Place
__ctx.Return(V1651)
return
}, 1)
__initDefs = append(__initDefs, defType{name: "systemf", value: __defun__systemf})

__defun__adjoin = MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
V1654 := __args[0]
_ = V1654
V1655 := __args[1]
_ = V1655
reg311207 := __e.Call(__defun__element_2, V1654, V1655)
if reg311207 == True {
__ctx.Return(V1655)
return
} else {
reg311208 := PrimCons(V1654, V1655)
__ctx.Return(reg311208)
return
}
}, 2)
__initDefs = append(__initDefs, defType{name: "adjoin", value: __defun__adjoin})

__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg311209 := MakeString("shen")
reg311210 := PrimIntern(reg311209)
reg311211 := MakeSymbol("shen.external-symbols")
reg311212 := MakeSymbol("!")
reg311213 := MakeSymbol("}")
reg311214 := MakeSymbol("{")
reg311215 := MakeSymbol("-->")
reg311216 := MakeSymbol("<--")
reg311217 := MakeSymbol("&&")
reg311218 := MakeSymbol(":")
reg311219 := MakeSymbol(";")
reg311220 := MakeSymbol(":-")
reg311221 := MakeSymbol(":=")
reg311222 := MakeSymbol("_")
reg311223 := MakeSymbol(",")
reg311224 := MakeSymbol("*language*")
reg311225 := MakeSymbol("*implementation*")
reg311226 := MakeSymbol("*stinput*")
reg311227 := MakeSymbol("*stoutput*")
reg311228 := MakeSymbol("*sterror*")
reg311229 := MakeSymbol("*home-directory*")
reg311230 := MakeSymbol("*version*")
reg311231 := MakeSymbol("*maximum-print-sequence-size*")
reg311232 := MakeSymbol("*macros*")
reg311233 := MakeSymbol("*os*")
reg311234 := MakeSymbol("*release*")
reg311235 := MakeSymbol("*property-vector*")
reg311236 := MakeSymbol("*port*")
reg311237 := MakeSymbol("*porters*")
reg311238 := MakeSymbol("*hush*")
reg311239 := MakeSymbol("@v")
reg311240 := MakeSymbol("@p")
reg311241 := MakeSymbol("@s")
reg311242 := MakeSymbol("<-")
reg311243 := MakeSymbol("->")
reg311244 := MakeSymbol("<e>")
reg311245 := MakeSymbol("<!>")
reg311246 := MakeSymbol("==")
reg311247 := MakeSymbol("=")
reg311248 := MakeSymbol(">=")
reg311249 := MakeSymbol(">")
reg311250 := MakeSymbol("/.")
reg311251 := MakeSymbol("=!")
reg311252 := MakeSymbol("$")
reg311253 := MakeSymbol("-")
reg311254 := MakeSymbol("/")
reg311255 := MakeSymbol("*")
reg311256 := MakeSymbol("+")
reg311257 := MakeSymbol("<=")
reg311258 := MakeSymbol("<")
reg311259 := MakeSymbol(">>")
reg311260 := MakeNumber(0)
reg311261 := __e.Call(__defun__vector, reg311260)
reg311262 := MakeSymbol("y-or-n?")
reg311263 := MakeSymbol("write-to-file")
reg311264 := MakeSymbol("write-byte")
reg311265 := MakeSymbol("where")
reg311266 := MakeSymbol("when")
reg311267 := MakeSymbol("warn")
reg311268 := MakeSymbol("version")
reg311269 := MakeSymbol("verified")
reg311270 := MakeSymbol("variable?")
reg311271 := MakeSymbol("value")
reg311272 := MakeSymbol("vector->")
reg311273 := MakeSymbol("<-vector")
reg311274 := MakeSymbol("vector")
reg311275 := MakeSymbol("vector?")
reg311276 := MakeSymbol("unspecialise")
reg311277 := MakeSymbol("untrack")
reg311278 := MakeSymbol("unit")
reg311279 := MakeSymbol("shen.unix")
reg311280 := MakeSymbol("union")
reg311281 := MakeSymbol("unify")
reg311282 := MakeSymbol("unify!")
reg311283 := MakeSymbol("unput")
reg311284 := MakeSymbol("unprofile")
reg311285 := MakeSymbol("undefmacro")
reg311286 := MakeSymbol("return")
reg311287 := MakeSymbol("type")
reg311288 := MakeSymbol("tuple?")
reg311289 := True;
reg311290 := MakeSymbol("trap-error")
reg311291 := MakeSymbol("track")
reg311292 := MakeSymbol("time")
reg311293 := MakeSymbol("thaw")
reg311294 := MakeSymbol("tc?")
reg311295 := MakeSymbol("tc")
reg311296 := MakeSymbol("tl")
reg311297 := MakeSymbol("tlstr")
reg311298 := MakeSymbol("tlv")
reg311299 := MakeSymbol("tail")
reg311300 := MakeSymbol("systemf")
reg311301 := MakeSymbol("synonyms")
reg311302 := MakeSymbol("symbol")
reg311303 := MakeSymbol("symbol?")
reg311304 := MakeSymbol("string->symbol")
reg311305 := MakeSymbol("sum")
reg311306 := MakeSymbol("subst")
reg311307 := MakeSymbol("string?")
reg311308 := MakeSymbol("string->n")
reg311309 := MakeSymbol("stream")
reg311310 := MakeSymbol("string")
reg311311 := MakeSymbol("stinput")
reg311312 := MakeSymbol("sterror")
reg311313 := MakeSymbol("stoutput")
reg311314 := MakeSymbol("step")
reg311315 := MakeSymbol("spy")
reg311316 := MakeSymbol("specialise")
reg311317 := MakeSymbol("snd")
reg311318 := MakeSymbol("simple-error")
reg311319 := MakeSymbol("set")
reg311320 := MakeSymbol("save")
reg311321 := MakeSymbol("str")
reg311322 := MakeSymbol("run")
reg311323 := MakeSymbol("reverse")
reg311324 := MakeSymbol("remove")
reg311325 := MakeSymbol("release")
reg311326 := MakeSymbol("read")
reg311327 := MakeSymbol("receive")
reg311328 := MakeSymbol("read-file")
reg311329 := MakeSymbol("read-file-as-bytelist")
reg311330 := MakeSymbol("read-file-as-string")
reg311331 := MakeSymbol("read-byte")
reg311332 := MakeSymbol("read-from-string")
reg311333 := MakeSymbol("package?")
reg311334 := MakeSymbol("put")
reg311335 := MakeSymbol("preclude")
reg311336 := MakeSymbol("preclude-all-but")
reg311337 := MakeSymbol("ps")
reg311338 := MakeSymbol("prolog?")
reg311339 := MakeSymbol("protect")
reg311340 := MakeSymbol("profile-results")
reg311341 := MakeSymbol("profile")
reg311342 := MakeSymbol("print")
reg311343 := MakeSymbol("pr")
reg311344 := MakeSymbol("pos")
reg311345 := MakeSymbol("porters")
reg311346 := MakeSymbol("port")
reg311347 := MakeSymbol("package")
reg311348 := MakeSymbol("output")
reg311349 := MakeSymbol("out")
reg311350 := MakeSymbol("os")
reg311351 := MakeSymbol("or")
reg311352 := MakeSymbol("optimise")
reg311353 := MakeSymbol("open")
reg311354 := MakeSymbol("occurrences")
reg311355 := MakeSymbol("occurs-check")
reg311356 := MakeSymbol("n->string")
reg311357 := MakeSymbol("number?")
reg311358 := MakeSymbol("number")
reg311359 := MakeSymbol("null")
reg311360 := MakeSymbol("nth")
reg311361 := MakeSymbol("not")
reg311362 := MakeSymbol("nl")
reg311363 := MakeSymbol("mode")
reg311364 := MakeSymbol("macroexpand")
reg311365 := MakeSymbol("maxinferences")
reg311366 := MakeSymbol("mapcan")
reg311367 := MakeSymbol("map")
reg311368 := MakeSymbol("make-string")
reg311369 := MakeSymbol("load")
reg311370 := MakeSymbol("loaded")
reg311371 := MakeSymbol("list")
reg311372 := MakeSymbol("lineread")
reg311373 := MakeSymbol("limit")
reg311374 := MakeSymbol("length")
reg311375 := MakeSymbol("let")
reg311376 := MakeSymbol("lazy")
reg311377 := MakeSymbol("lambda")
reg311378 := MakeSymbol("language")
reg311379 := MakeSymbol("kill")
reg311380 := MakeSymbol("is")
reg311381 := MakeSymbol("intersection")
reg311382 := MakeSymbol("inferences")
reg311383 := MakeSymbol("intern")
reg311384 := MakeSymbol("integer?")
reg311385 := MakeSymbol("input")
reg311386 := MakeSymbol("input+")
reg311387 := MakeSymbol("include")
reg311388 := MakeSymbol("include-all-but")
reg311389 := MakeSymbol("it")
reg311390 := MakeSymbol("in")
reg311391 := MakeSymbol("internal")
reg311392 := MakeSymbol("implementation")
reg311393 := MakeSymbol("if")
reg311394 := MakeSymbol("identical")
reg311395 := MakeSymbol("head")
reg311396 := MakeSymbol("hd")
reg311397 := MakeSymbol("hdv")
reg311398 := MakeSymbol("hdstr")
reg311399 := MakeSymbol("hash")
reg311400 := MakeSymbol("get")
reg311401 := MakeSymbol("get-time")
reg311402 := MakeSymbol("gensym")
reg311403 := MakeSymbol("function")
reg311404 := MakeSymbol("fst")
reg311405 := MakeSymbol("freeze")
reg311406 := MakeSymbol("fix")
reg311407 := MakeSymbol("file")
reg311408 := MakeSymbol("fail")
reg311409 := MakeSymbol("fail-if")
reg311410 := MakeSymbol("fwhen")
reg311411 := MakeSymbol("findall")
reg311412 := False;
reg311413 := MakeSymbol("enable-type-theory")
reg311414 := MakeSymbol("explode")
reg311415 := MakeSymbol("external")
reg311416 := MakeSymbol("exception")
reg311417 := MakeSymbol("eval-kl")
reg311418 := MakeSymbol("eval")
reg311419 := MakeSymbol("error-to-string")
reg311420 := MakeSymbol("error")
reg311421 := MakeSymbol("empty?")
reg311422 := MakeSymbol("element?")
reg311423 := MakeSymbol("do")
reg311424 := MakeSymbol("difference")
reg311425 := MakeSymbol("destroy")
reg311426 := MakeSymbol("defun")
reg311427 := MakeSymbol("define")
reg311428 := MakeSymbol("defmacro")
reg311429 := MakeSymbol("defcc")
reg311430 := MakeSymbol("defprolog")
reg311431 := MakeSymbol("declare")
reg311432 := MakeSymbol("datatype")
reg311433 := MakeSymbol("cut")
reg311434 := MakeSymbol("cn")
reg311435 := MakeSymbol("cons?")
reg311436 := MakeSymbol("cons")
reg311437 := MakeSymbol("cond")
reg311438 := MakeSymbol("concat")
reg311439 := MakeSymbol("compile")
reg311440 := MakeSymbol("cd")
reg311441 := MakeSymbol("cases")
reg311442 := MakeSymbol("call")
reg311443 := MakeSymbol("close")
reg311444 := MakeSymbol("bind")
reg311445 := MakeSymbol("bound?")
reg311446 := MakeSymbol("boolean?")
reg311447 := MakeSymbol("boolean")
reg311448 := MakeSymbol("bar!")
reg311449 := MakeSymbol("assoc")
reg311450 := MakeSymbol("arity")
reg311451 := MakeSymbol("abort")
reg311452 := MakeSymbol("append")
reg311453 := MakeSymbol("and")
reg311454 := MakeSymbol("adjoin")
reg311455 := MakeSymbol("<-address")
reg311456 := MakeSymbol("address->")
reg311457 := MakeSymbol("absvector?")
reg311458 := MakeSymbol("absvector")
reg311459 := Nil;
reg311460 := PrimCons(reg311458, reg311459)
reg311461 := PrimCons(reg311457, reg311460)
reg311462 := PrimCons(reg311456, reg311461)
reg311463 := PrimCons(reg311455, reg311462)
reg311464 := PrimCons(reg311454, reg311463)
reg311465 := PrimCons(reg311453, reg311464)
reg311466 := PrimCons(reg311452, reg311465)
reg311467 := PrimCons(reg311451, reg311466)
reg311468 := PrimCons(reg311450, reg311467)
reg311469 := PrimCons(reg311449, reg311468)
reg311470 := PrimCons(reg311448, reg311469)
reg311471 := PrimCons(reg311447, reg311470)
reg311472 := PrimCons(reg311446, reg311471)
reg311473 := PrimCons(reg311445, reg311472)
reg311474 := PrimCons(reg311444, reg311473)
reg311475 := PrimCons(reg311443, reg311474)
reg311476 := PrimCons(reg311442, reg311475)
reg311477 := PrimCons(reg311441, reg311476)
reg311478 := PrimCons(reg311440, reg311477)
reg311479 := PrimCons(reg311439, reg311478)
reg311480 := PrimCons(reg311438, reg311479)
reg311481 := PrimCons(reg311437, reg311480)
reg311482 := PrimCons(reg311436, reg311481)
reg311483 := PrimCons(reg311435, reg311482)
reg311484 := PrimCons(reg311434, reg311483)
reg311485 := PrimCons(reg311433, reg311484)
reg311486 := PrimCons(reg311432, reg311485)
reg311487 := PrimCons(reg311431, reg311486)
reg311488 := PrimCons(reg311430, reg311487)
reg311489 := PrimCons(reg311429, reg311488)
reg311490 := PrimCons(reg311428, reg311489)
reg311491 := PrimCons(reg311427, reg311490)
reg311492 := PrimCons(reg311426, reg311491)
reg311493 := PrimCons(reg311425, reg311492)
reg311494 := PrimCons(reg311424, reg311493)
reg311495 := PrimCons(reg311423, reg311494)
reg311496 := PrimCons(reg311422, reg311495)
reg311497 := PrimCons(reg311421, reg311496)
reg311498 := PrimCons(reg311420, reg311497)
reg311499 := PrimCons(reg311419, reg311498)
reg311500 := PrimCons(reg311418, reg311499)
reg311501 := PrimCons(reg311417, reg311500)
reg311502 := PrimCons(reg311416, reg311501)
reg311503 := PrimCons(reg311415, reg311502)
reg311504 := PrimCons(reg311414, reg311503)
reg311505 := PrimCons(reg311413, reg311504)
reg311506 := PrimCons(reg311412, reg311505)
reg311507 := PrimCons(reg311411, reg311506)
reg311508 := PrimCons(reg311410, reg311507)
reg311509 := PrimCons(reg311409, reg311508)
reg311510 := PrimCons(reg311408, reg311509)
reg311511 := PrimCons(reg311407, reg311510)
reg311512 := PrimCons(reg311406, reg311511)
reg311513 := PrimCons(reg311405, reg311512)
reg311514 := PrimCons(reg311404, reg311513)
reg311515 := PrimCons(reg311403, reg311514)
reg311516 := PrimCons(reg311402, reg311515)
reg311517 := PrimCons(reg311401, reg311516)
reg311518 := PrimCons(reg311400, reg311517)
reg311519 := PrimCons(reg311399, reg311518)
reg311520 := PrimCons(reg311398, reg311519)
reg311521 := PrimCons(reg311397, reg311520)
reg311522 := PrimCons(reg311396, reg311521)
reg311523 := PrimCons(reg311395, reg311522)
reg311524 := PrimCons(reg311394, reg311523)
reg311525 := PrimCons(reg311393, reg311524)
reg311526 := PrimCons(reg311392, reg311525)
reg311527 := PrimCons(reg311391, reg311526)
reg311528 := PrimCons(reg311390, reg311527)
reg311529 := PrimCons(reg311389, reg311528)
reg311530 := PrimCons(reg311388, reg311529)
reg311531 := PrimCons(reg311387, reg311530)
reg311532 := PrimCons(reg311386, reg311531)
reg311533 := PrimCons(reg311385, reg311532)
reg311534 := PrimCons(reg311384, reg311533)
reg311535 := PrimCons(reg311383, reg311534)
reg311536 := PrimCons(reg311382, reg311535)
reg311537 := PrimCons(reg311381, reg311536)
reg311538 := PrimCons(reg311380, reg311537)
reg311539 := PrimCons(reg311379, reg311538)
reg311540 := PrimCons(reg311378, reg311539)
reg311541 := PrimCons(reg311377, reg311540)
reg311542 := PrimCons(reg311376, reg311541)
reg311543 := PrimCons(reg311375, reg311542)
reg311544 := PrimCons(reg311374, reg311543)
reg311545 := PrimCons(reg311373, reg311544)
reg311546 := PrimCons(reg311372, reg311545)
reg311547 := PrimCons(reg311371, reg311546)
reg311548 := PrimCons(reg311370, reg311547)
reg311549 := PrimCons(reg311369, reg311548)
reg311550 := PrimCons(reg311368, reg311549)
reg311551 := PrimCons(reg311367, reg311550)
reg311552 := PrimCons(reg311366, reg311551)
reg311553 := PrimCons(reg311365, reg311552)
reg311554 := PrimCons(reg311364, reg311553)
reg311555 := PrimCons(reg311363, reg311554)
reg311556 := PrimCons(reg311362, reg311555)
reg311557 := PrimCons(reg311361, reg311556)
reg311558 := PrimCons(reg311360, reg311557)
reg311559 := PrimCons(reg311359, reg311558)
reg311560 := PrimCons(reg311358, reg311559)
reg311561 := PrimCons(reg311357, reg311560)
reg311562 := PrimCons(reg311356, reg311561)
reg311563 := PrimCons(reg311355, reg311562)
reg311564 := PrimCons(reg311354, reg311563)
reg311565 := PrimCons(reg311353, reg311564)
reg311566 := PrimCons(reg311352, reg311565)
reg311567 := PrimCons(reg311351, reg311566)
reg311568 := PrimCons(reg311350, reg311567)
reg311569 := PrimCons(reg311349, reg311568)
reg311570 := PrimCons(reg311348, reg311569)
reg311571 := PrimCons(reg311347, reg311570)
reg311572 := PrimCons(reg311346, reg311571)
reg311573 := PrimCons(reg311345, reg311572)
reg311574 := PrimCons(reg311344, reg311573)
reg311575 := PrimCons(reg311343, reg311574)
reg311576 := PrimCons(reg311342, reg311575)
reg311577 := PrimCons(reg311341, reg311576)
reg311578 := PrimCons(reg311340, reg311577)
reg311579 := PrimCons(reg311339, reg311578)
reg311580 := PrimCons(reg311338, reg311579)
reg311581 := PrimCons(reg311337, reg311580)
reg311582 := PrimCons(reg311336, reg311581)
reg311583 := PrimCons(reg311335, reg311582)
reg311584 := PrimCons(reg311334, reg311583)
reg311585 := PrimCons(reg311333, reg311584)
reg311586 := PrimCons(reg311332, reg311585)
reg311587 := PrimCons(reg311331, reg311586)
reg311588 := PrimCons(reg311330, reg311587)
reg311589 := PrimCons(reg311329, reg311588)
reg311590 := PrimCons(reg311328, reg311589)
reg311591 := PrimCons(reg311327, reg311590)
reg311592 := PrimCons(reg311326, reg311591)
reg311593 := PrimCons(reg311325, reg311592)
reg311594 := PrimCons(reg311324, reg311593)
reg311595 := PrimCons(reg311323, reg311594)
reg311596 := PrimCons(reg311322, reg311595)
reg311597 := PrimCons(reg311321, reg311596)
reg311598 := PrimCons(reg311320, reg311597)
reg311599 := PrimCons(reg311319, reg311598)
reg311600 := PrimCons(reg311318, reg311599)
reg311601 := PrimCons(reg311317, reg311600)
reg311602 := PrimCons(reg311316, reg311601)
reg311603 := PrimCons(reg311315, reg311602)
reg311604 := PrimCons(reg311314, reg311603)
reg311605 := PrimCons(reg311313, reg311604)
reg311606 := PrimCons(reg311312, reg311605)
reg311607 := PrimCons(reg311311, reg311606)
reg311608 := PrimCons(reg311310, reg311607)
reg311609 := PrimCons(reg311309, reg311608)
reg311610 := PrimCons(reg311308, reg311609)
reg311611 := PrimCons(reg311307, reg311610)
reg311612 := PrimCons(reg311306, reg311611)
reg311613 := PrimCons(reg311305, reg311612)
reg311614 := PrimCons(reg311304, reg311613)
reg311615 := PrimCons(reg311303, reg311614)
reg311616 := PrimCons(reg311302, reg311615)
reg311617 := PrimCons(reg311301, reg311616)
reg311618 := PrimCons(reg311300, reg311617)
reg311619 := PrimCons(reg311299, reg311618)
reg311620 := PrimCons(reg311298, reg311619)
reg311621 := PrimCons(reg311297, reg311620)
reg311622 := PrimCons(reg311296, reg311621)
reg311623 := PrimCons(reg311295, reg311622)
reg311624 := PrimCons(reg311294, reg311623)
reg311625 := PrimCons(reg311293, reg311624)
reg311626 := PrimCons(reg311292, reg311625)
reg311627 := PrimCons(reg311291, reg311626)
reg311628 := PrimCons(reg311290, reg311627)
reg311629 := PrimCons(reg311289, reg311628)
reg311630 := PrimCons(reg311288, reg311629)
reg311631 := PrimCons(reg311287, reg311630)
reg311632 := PrimCons(reg311286, reg311631)
reg311633 := PrimCons(reg311285, reg311632)
reg311634 := PrimCons(reg311284, reg311633)
reg311635 := PrimCons(reg311283, reg311634)
reg311636 := PrimCons(reg311282, reg311635)
reg311637 := PrimCons(reg311281, reg311636)
reg311638 := PrimCons(reg311280, reg311637)
reg311639 := PrimCons(reg311279, reg311638)
reg311640 := PrimCons(reg311278, reg311639)
reg311641 := PrimCons(reg311277, reg311640)
reg311642 := PrimCons(reg311276, reg311641)
reg311643 := PrimCons(reg311275, reg311642)
reg311644 := PrimCons(reg311274, reg311643)
reg311645 := PrimCons(reg311273, reg311644)
reg311646 := PrimCons(reg311272, reg311645)
reg311647 := PrimCons(reg311271, reg311646)
reg311648 := PrimCons(reg311270, reg311647)
reg311649 := PrimCons(reg311269, reg311648)
reg311650 := PrimCons(reg311268, reg311649)
reg311651 := PrimCons(reg311267, reg311650)
reg311652 := PrimCons(reg311266, reg311651)
reg311653 := PrimCons(reg311265, reg311652)
reg311654 := PrimCons(reg311264, reg311653)
reg311655 := PrimCons(reg311263, reg311654)
reg311656 := PrimCons(reg311262, reg311655)
reg311657 := PrimCons(reg311261, reg311656)
reg311658 := PrimCons(reg311259, reg311657)
reg311659 := PrimCons(reg311258, reg311658)
reg311660 := PrimCons(reg311257, reg311659)
reg311661 := PrimCons(reg311256, reg311660)
reg311662 := PrimCons(reg311255, reg311661)
reg311663 := PrimCons(reg311254, reg311662)
reg311664 := PrimCons(reg311253, reg311663)
reg311665 := PrimCons(reg311252, reg311664)
reg311666 := PrimCons(reg311251, reg311665)
reg311667 := PrimCons(reg311250, reg311666)
reg311668 := PrimCons(reg311249, reg311667)
reg311669 := PrimCons(reg311248, reg311668)
reg311670 := PrimCons(reg311247, reg311669)
reg311671 := PrimCons(reg311246, reg311670)
reg311672 := PrimCons(reg311245, reg311671)
reg311673 := PrimCons(reg311244, reg311672)
reg311674 := PrimCons(reg311243, reg311673)
reg311675 := PrimCons(reg311242, reg311674)
reg311676 := PrimCons(reg311241, reg311675)
reg311677 := PrimCons(reg311240, reg311676)
reg311678 := PrimCons(reg311239, reg311677)
reg311679 := PrimCons(reg311238, reg311678)
reg311680 := PrimCons(reg311237, reg311679)
reg311681 := PrimCons(reg311236, reg311680)
reg311682 := PrimCons(reg311235, reg311681)
reg311683 := PrimCons(reg311234, reg311682)
reg311684 := PrimCons(reg311233, reg311683)
reg311685 := PrimCons(reg311232, reg311684)
reg311686 := PrimCons(reg311231, reg311685)
reg311687 := PrimCons(reg311230, reg311686)
reg311688 := PrimCons(reg311229, reg311687)
reg311689 := PrimCons(reg311228, reg311688)
reg311690 := PrimCons(reg311227, reg311689)
reg311691 := PrimCons(reg311226, reg311690)
reg311692 := PrimCons(reg311225, reg311691)
reg311693 := PrimCons(reg311224, reg311692)
reg311694 := PrimCons(reg311223, reg311693)
reg311695 := PrimCons(reg311222, reg311694)
reg311696 := PrimCons(reg311221, reg311695)
reg311697 := PrimCons(reg311220, reg311696)
reg311698 := PrimCons(reg311219, reg311697)
reg311699 := PrimCons(reg311218, reg311698)
reg311700 := PrimCons(reg311217, reg311699)
reg311701 := PrimCons(reg311216, reg311700)
reg311702 := PrimCons(reg311215, reg311701)
reg311703 := PrimCons(reg311214, reg311702)
reg311704 := PrimCons(reg311213, reg311703)
reg311705 := PrimCons(reg311212, reg311704)
reg311706 := MakeSymbol("*property-vector*")
reg311707 := PrimValue(reg311706)
__ctx.TailApply(__defun__put, reg311210, reg311211, reg311705, reg311707)
return
}, 0))
__defun__shen_4lambda_1form_1entry = MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
V1657 := __args[0]
_ = V1657
reg311709 := MakeSymbol("package")
reg311710 := PrimEqual(reg311709, V1657)
if reg311710 == True {
reg311711 := Nil;
__ctx.Return(reg311711)
return
} else {
reg311712 := MakeSymbol("receive")
reg311713 := PrimEqual(reg311712, V1657)
if reg311713 == True {
reg311714 := Nil;
__ctx.Return(reg311714)
return
} else {
reg311715 := __e.Call(__defun__arity, V1657)
ArityF := reg311715
_ = ArityF
reg311716 := MakeNumber(-1)
reg311717 := PrimEqual(ArityF, reg311716)
if reg311717 == True {
reg311718 := Nil;
__ctx.Return(reg311718)
return
} else {
reg311719 := MakeNumber(0)
reg311720 := PrimEqual(ArityF, reg311719)
if reg311720 == True {
reg311721 := Nil;
__ctx.Return(reg311721)
return
} else {
reg311722 := __e.Call(__defun__shen_4lambda_1form, V1657, ArityF)
reg311723 := PrimEvalKL(__e, reg311722)
reg311724 := PrimCons(V1657, reg311723)
reg311725 := Nil;
reg311726 := PrimCons(reg311724, reg311725)
__ctx.Return(reg311726)
return
}
}
}
}
}, 1)
__initDefs = append(__initDefs, defType{name: "shen.lambda-form-entry", value: __defun__shen_4lambda_1form_1entry})

__defun__shen_4lambda_1form = MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
V1660 := __args[0]
_ = V1660
V1661 := __args[1]
_ = V1661
reg311727 := MakeNumber(0)
reg311728 := PrimEqual(reg311727, V1661)
if reg311728 == True {
__ctx.Return(V1660)
return
} else {
reg311729 := MakeSymbol("V")
reg311730 := __e.Call(__defun__gensym, reg311729)
X := reg311730
_ = X
reg311731 := MakeSymbol("lambda")
reg311732 := __e.Call(__defun__shen_4add_1end, V1660, X)
reg311733 := MakeNumber(1)
reg311734 := PrimNumberSubtract(V1661, reg311733)
reg311735 := __e.Call(__defun__shen_4lambda_1form, reg311732, reg311734)
reg311736 := Nil;
reg311737 := PrimCons(reg311735, reg311736)
reg311738 := PrimCons(X, reg311737)
reg311739 := PrimCons(reg311731, reg311738)
__ctx.Return(reg311739)
return
}
}, 2)
__initDefs = append(__initDefs, defType{name: "shen.lambda-form", value: __defun__shen_4lambda_1form})

__defun__shen_4add_1end = MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
V1664 := __args[0]
_ = V1664
V1665 := __args[1]
_ = V1665
reg311740 := PrimIsPair(V1664)
if reg311740 == True {
reg311741 := Nil;
reg311742 := PrimCons(V1665, reg311741)
__ctx.TailApply(__defun__append, V1664, reg311742)
return
} else {
reg311744 := Nil;
reg311745 := PrimCons(V1665, reg311744)
reg311746 := PrimCons(V1664, reg311745)
__ctx.Return(reg311746)
return
}
}, 2)
__initDefs = append(__initDefs, defType{name: "shen.add-end", value: __defun__shen_4add_1end})

__defun__shen_4set_1lambda_1form_1entry = MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
V1667 := __args[0]
_ = V1667
reg311747 := PrimIsPair(V1667)
if reg311747 == True {
reg311748 := PrimHead(V1667)
reg311749 := MakeSymbol("shen.lambda-form")
reg311750 := PrimTail(V1667)
reg311751 := MakeSymbol("*property-vector*")
reg311752 := PrimValue(reg311751)
__ctx.TailApply(__defun__put, reg311748, reg311749, reg311750, reg311752)
return
} else {
reg311754 := MakeSymbol("shen.set-lambda-form-entry")
__ctx.TailApply(__defun__shen_4f__error, reg311754)
return
}
}, 1)
__initDefs = append(__initDefs, defType{name: "shen.set-lambda-form-entry", value: __defun__shen_4set_1lambda_1form_1entry})

__initExprs = append(__initExprs, MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
reg311756 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
Entry := __args[0]
_ = Entry
__ctx.TailApply(__defun__shen_4set_1lambda_1form_1entry, Entry)
return
}, 1)
reg311758 := MakeSymbol("shen.datatype-error")
reg311759 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4datatype_1error, X)
return
}, 1)
reg311761 := PrimCons(reg311758, reg311759)
reg311762 := MakeSymbol("shen.tuple")
reg311763 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4tuple, X)
return
}, 1)
reg311765 := PrimCons(reg311762, reg311763)
reg311766 := MakeSymbol("shen.pvar")
reg311767 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4pvar, X)
return
}, 1)
reg311769 := PrimCons(reg311766, reg311767)
reg311770 := MakeSymbol("shen.dictionary")
reg311771 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4dictionary, X)
return
}, 1)
reg311773 := PrimCons(reg311770, reg311771)
reg311774 := MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
X := __args[0]
_ = X
__ctx.TailApply(__defun__shen_4lambda_1form_1entry, X)
return
}, 1)
reg311776 := MakeString("shen")
reg311777 := PrimIntern(reg311776)
reg311778 := __e.Call(__defun__external, reg311777)
reg311779 := __e.Call(__defun__mapcan, reg311774, reg311778)
reg311780 := PrimCons(reg311773, reg311779)
reg311781 := PrimCons(reg311769, reg311780)
reg311782 := PrimCons(reg311765, reg311781)
reg311783 := PrimCons(reg311761, reg311782)
__ctx.TailApply(__defun__shen_4for_1each, reg311756, reg311783)
return
}, 0))
__defun__specialise = MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
V1669 := __args[0]
_ = V1669
reg311785 := MakeSymbol("shen.*special*")
reg311786 := MakeSymbol("shen.*special*")
reg311787 := PrimValue(reg311786)
reg311788 := PrimCons(V1669, reg311787)
reg311789 := PrimSet(reg311785, reg311788)
_ = reg311789
__ctx.Return(V1669)
return
}, 1)
__initDefs = append(__initDefs, defType{name: "specialise", value: __defun__specialise})

__defun__unspecialise = MakeNative(func(__e *Evaluator, __ctx *ControlFlow, __args ...Obj) {
V1671 := __args[0]
_ = V1671
reg311790 := MakeSymbol("shen.*special*")
reg311791 := MakeSymbol("shen.*special*")
reg311792 := PrimValue(reg311791)
reg311793 := __e.Call(__defun__remove, V1671, reg311792)
reg311794 := PrimSet(reg311790, reg311793)
_ = reg311794
__ctx.Return(V1671)
return
}, 1)
__initDefs = append(__initDefs, defType{name: "unspecialise", value: __defun__unspecialise})

}
