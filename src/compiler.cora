(func kl->cora
  env () => ()
  env x => x where (or (number? x) (string? x) (boolean? x))
  env ['if x y z] => ['if (kl->cora env x) (kl->cora env y) (kl->cora env z)]
  env ['do x y] => ['do (kl->cora env x) (kl->cora env y)]
  env ['lambda x y] => ['lambda [x] (kl->cora [x . env] y)]
  env ['type exp _] => (kl->cora env exp)
  env ['defun f x y] => [['fn ['quote 'def]] ['quote f] ['lambda x (kl->cora x y)]]
  env ['let x y z] => [['lambda [x] (kl->cora (cons x env) z)] (kl->cora env y)]
  env ['trap-error body handler] => ['try-catch ['lambda [] (kl->cora env body)] (kl->cora env handler)]

  env ['or x y] => (kl->cora env ['if x true ['if y true false]])
  env ['and x y] => (kl->cora env ['if x ['if y true false] false])
  env ['cond [_case action]] => (kl->cora env ['if _case action ['simple-error "no cond match"]])
  env ['cond [_case action] . more] => (kl->cora env ['if _case action ['cond . more]])
  env ['freeze body] => ['lambda [] (kl->cora env body)]

  env [f . x] => [(parse-app env f) . (map (kl->cora env) x)] where (symbol? f)
  env [f . x] => (map (kl->cora env) [f . x])
  env x => (if (elem? x env) x ['quote x]))


(func parse-app
  env f => f where (elem? f env)
  _ f => ['fn ['quote f]])

(defun compile-kl-file (fin fout)
  (let exprs (read-file-as-sexp fin false)
       (let res (cons 'begin (map (kl->cora ()) exprs))
	    (write-sexp-to-file fout res))))

;; ((fn 'set) '*language* "Go")
;; ((fn 'set) '*implementation* "AOT+interpreter")
;; ((fn 'set) '*porters* "Arthur Mao")
;; ((fn 'set) '*port* "1.0.0")
;; 
;; ((fn 'def) 'cons cons)
;; ((fn 'def) 'cons? cons?)
;; ((fn 'def) 'hd car)
;; ((fn 'def) 'tl cdr)
;; ((fn 'def) 'intern intern)
;; ((fn 'def) '= =)
;; ((fn 'def) '+ +)
;; ((fn 'def) '- -)
;; ((fn 'def) '* *)
;; ((fn 'def) '/ /)
;; ((fn 'def) '<= <=)
;; ((fn 'def) '>= >=)
;; ((fn 'def) '< <)
;; ((fn 'def) '> >)
;; ((fn 'def) 'symbol? symbol?)
;; ((fn 'def) 'not not)
;; ((fn 'def) 'number? number?)
;; ((fn 'def) 'string? string?)
;; ((fn 'def) 'absvector vector)
;; ((fn 'def) 'absvector? vector?)
;; ((fn 'def) '<-address vector-ref)
;; ((fn 'def) 'address-> vector-set!)


(func parse
      env ['fn ['quote f]] => ['$global 2 f] ;; optimize for shen code gen
      env x => (if (elem? x env) x ['$global 1 x]) where (symbol? x)
      env x => ['$const x] where (or (number? x) (string? x) (boolean? x) (null? x))
      env ['quote x] => ['$const x]
      env ['if x y z] => ['$if (parse env x) (parse env y) (parse env z)]
      env ['do x y] => ['$do (parse env x) (parse env y)]
      env ['lambda args body] => ['$lambda args (parse (append args env) body)]
      env [f . args] => (map (parse env) [f . args]))

(func peval-t
      bc ['$const x] => (cons ['return ['$const x]] bc)
      bc ['$global ns x] => (cons ['return ['$global ns x]] bc)
      bc ['$if x y z] => (let y1 (peval0 y)
			      z1 (peval0 z)
			      tmp (gensym 'ifres)
			      (peval bc x (lambda (bc1 reg1)
					    (cons ['if reg1 y1 z1] bc1))))
      bc ['$do x y] => (peval bc x (lambda (bc1 x1)
				    (peval-t (cons ['ignore x1] bc1) y)))
      bc ['$lambda args body] => (cons ['return ['lambda args (peval0 body)]] bc)
      bc [f . args] => (peval-call bc [f . args] []
				   (lambda (bc1 regs)
				     (cons ['tailapply . regs] bc1)))
      bc x => (cons ['return x] bc))

(func peval
      bc ['$const x] cc => (cc bc ['$const x])
      bc ['$global ns x] cc => (cc bc ['$global ns x])
      bc ['$if x y z] cc => (let tmp (gensym 'ifres)
				 (let y1 (peval [] y (lambda (bc1 y1) (cons 'block (reverse (cons ['<- tmp y1] bc1)))))
				      z1 (peval [] z (lambda (bc1 z1) (cons 'block (reverse (cons ['<- tmp z1] bc1)))))
				      (peval bc x (lambda (bc1 reg1)
						    (cc [['if reg1 y1 z1] ['var tmp] . bc1] tmp)))))
      bc ['$do x y] cc => (peval bc x (lambda (bc1 x1)
					(peval (cons ['ignore x1] bc1) y cc)))
      bc ['$lambda args body] cc => (let tmp (gensym 'tmp)
					 (cc (cons ['<-: tmp ['lambda args (peval0 body)]] bc) tmp))
      bc [f . args] cc => (peval-call bc [f . args] []
				      (lambda (bc1 regs)
					(let tmp (gensym 'tmp)
					     (cc (cons ['<-: tmp ['call . regs]] bc1) tmp))))
      bc x cc => (cc bc x))

(func peval-call
      bc [] regs cc => (cc bc (reverse regs))
      bc [x . xs] regs cc => (peval bc x (lambda (bc1 x1)
					     (peval-call bc1 xs (cons x1 regs) cc))))

(defun peval0 (exp)
  (let ret (reverse (peval-t [] exp))
       (if (= 1 (length ret))
	   (car ret)
	 (cons 'block ret))))

(defun codegen (input)
  (let ast (parse () input)
       (peval0 ast)))

(defun compile-file (fin fout)
  (let expr (cons 'begin (read-file-as-sexp fin true))
       (let expand (macroexpand expr)
	    (let bc (codegen expand)
		 (write-sexp-to-file fout bc)))))

